

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Mar 19 14:05:47 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1783
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	swtext1,local,class=CONST,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	swtext2,local,class=CONST,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0014                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0016                     	;# 
    66  0017                     	;# 
    67  0018                     	;# 
    68  0019                     	;# 
    69  001A                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  008E                     	;# 
    75  0090                     	;# 
    76  0091                     	;# 
    77  0092                     	;# 
    78  0094                     	;# 
    79  0095                     	;# 
    80  0096                     	;# 
    81  0097                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009E                     	;# 
    90  009F                     	;# 
    91  010C                     	;# 
    92  010D                     	;# 
    93  010E                     	;# 
    94  0111                     	;# 
    95  0112                     	;# 
    96  0113                     	;# 
    97  0114                     	;# 
    98  0115                     	;# 
    99  0116                     	;# 
   100  0117                     	;# 
   101  0118                     	;# 
   102  0119                     	;# 
   103  011D                     	;# 
   104  011D                     	;# 
   105  011E                     	;# 
   106  011F                     	;# 
   107  018C                     	;# 
   108  018D                     	;# 
   109  0191                     	;# 
   110  0191                     	;# 
   111  0192                     	;# 
   112  0193                     	;# 
   113  0193                     	;# 
   114  0193                     	;# 
   115  0194                     	;# 
   116  0195                     	;# 
   117  0196                     	;# 
   118  0197                     	;# 
   119  0199                     	;# 
   120  0199                     	;# 
   121  0199                     	;# 
   122  019A                     	;# 
   123  019A                     	;# 
   124  019A                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019C                     	;# 
   131  019C                     	;# 
   132  019C                     	;# 
   133  019D                     	;# 
   134  019D                     	;# 
   135  019D                     	;# 
   136  019E                     	;# 
   137  019E                     	;# 
   138  019E                     	;# 
   139  019F                     	;# 
   140  019F                     	;# 
   141  019F                     	;# 
   142  019F                     	;# 
   143  019F                     	;# 
   144  020C                     	;# 
   145  020D                     	;# 
   146  020E                     	;# 
   147  0210                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  028C                     	;# 
   164  028D                     	;# 
   165  028E                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0298                     	;# 
   171  0298                     	;# 
   172  0299                     	;# 
   173  029A                     	;# 
   174  030C                     	;# 
   175  030D                     	;# 
   176  030E                     	;# 
   177  038C                     	;# 
   178  038D                     	;# 
   179  038E                     	;# 
   180  0390                     	;# 
   181  0391                     	;# 
   182  0392                     	;# 
   183  0393                     	;# 
   184  0394                     	;# 
   185  0395                     	;# 
   186  0396                     	;# 
   187  0397                     	;# 
   188  0398                     	;# 
   189  0399                     	;# 
   190  039D                     	;# 
   191  039E                     	;# 
   192  039F                     	;# 
   193  0511                     	;# 
   194  0513                     	;# 
   195  051A                     	;# 
   196  0811                     	;# 
   197  0812                     	;# 
   198  0813                     	;# 
   199  0814                     	;# 
   200  0815                     	;# 
   201  0816                     	;# 
   202  0817                     	;# 
   203  0818                     	;# 
   204  0819                     	;# 
   205  081A                     	;# 
   206  081B                     	;# 
   207  081C                     	;# 
   208  081D                     	;# 
   209  081E                     	;# 
   210  081F                     	;# 
   211  0820                     	;# 
   212  0821                     	;# 
   213  0821                     	;# 
   214  0822                     	;# 
   215  0823                     	;# 
   216  0823                     	;# 
   217  0824                     	;# 
   218  0825                     	;# 
   219  0825                     	;# 
   220  0826                     	;# 
   221  0827                     	;# 
   222  0827                     	;# 
   223  0828                     	;# 
   224  0829                     	;# 
   225  082A                     	;# 
   226  082B                     	;# 
   227  082C                     	;# 
   228  082D                     	;# 
   229  082E                     	;# 
   230  082F                     	;# 
   231  0831                     	;# 
   232  0832                     	;# 
   233  0833                     	;# 
   234  0834                     	;# 
   235  0835                     	;# 
   236  0836                     	;# 
   237  0837                     	;# 
   238  0838                     	;# 
   239  0839                     	;# 
   240  083A                     	;# 
   241  083B                     	;# 
   242  083C                     	;# 
   243  083D                     	;# 
   244  083E                     	;# 
   245  083F                     	;# 
   246  0840                     	;# 
   247  0841                     	;# 
   248  0841                     	;# 
   249  0842                     	;# 
   250  0843                     	;# 
   251  0843                     	;# 
   252  0844                     	;# 
   253  0845                     	;# 
   254  0845                     	;# 
   255  0846                     	;# 
   256  0847                     	;# 
   257  0847                     	;# 
   258  0848                     	;# 
   259  0849                     	;# 
   260  084A                     	;# 
   261  084B                     	;# 
   262  084C                     	;# 
   263  084D                     	;# 
   264  084E                     	;# 
   265  084F                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0014                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0094                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0098                     	;# 
   316  0099                     	;# 
   317  009A                     	;# 
   318  009B                     	;# 
   319  009B                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  0111                     	;# 
   328  0112                     	;# 
   329  0113                     	;# 
   330  0114                     	;# 
   331  0115                     	;# 
   332  0116                     	;# 
   333  0117                     	;# 
   334  0118                     	;# 
   335  0119                     	;# 
   336  011D                     	;# 
   337  011D                     	;# 
   338  011E                     	;# 
   339  011F                     	;# 
   340  018C                     	;# 
   341  018D                     	;# 
   342  0191                     	;# 
   343  0191                     	;# 
   344  0192                     	;# 
   345  0193                     	;# 
   346  0193                     	;# 
   347  0193                     	;# 
   348  0194                     	;# 
   349  0195                     	;# 
   350  0196                     	;# 
   351  0197                     	;# 
   352  0199                     	;# 
   353  0199                     	;# 
   354  0199                     	;# 
   355  019A                     	;# 
   356  019A                     	;# 
   357  019A                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019C                     	;# 
   364  019C                     	;# 
   365  019C                     	;# 
   366  019D                     	;# 
   367  019D                     	;# 
   368  019D                     	;# 
   369  019E                     	;# 
   370  019E                     	;# 
   371  019E                     	;# 
   372  019F                     	;# 
   373  019F                     	;# 
   374  019F                     	;# 
   375  019F                     	;# 
   376  019F                     	;# 
   377  020C                     	;# 
   378  020D                     	;# 
   379  020E                     	;# 
   380  0210                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0216                     	;# 
   393  0216                     	;# 
   394  0217                     	;# 
   395  0217                     	;# 
   396  028C                     	;# 
   397  028D                     	;# 
   398  028E                     	;# 
   399  0291                     	;# 
   400  0291                     	;# 
   401  0292                     	;# 
   402  0293                     	;# 
   403  0298                     	;# 
   404  0298                     	;# 
   405  0299                     	;# 
   406  029A                     	;# 
   407  030C                     	;# 
   408  030D                     	;# 
   409  030E                     	;# 
   410  038C                     	;# 
   411  038D                     	;# 
   412  038E                     	;# 
   413  0390                     	;# 
   414  0391                     	;# 
   415  0392                     	;# 
   416  0393                     	;# 
   417  0394                     	;# 
   418  0395                     	;# 
   419  0396                     	;# 
   420  0397                     	;# 
   421  0398                     	;# 
   422  0399                     	;# 
   423  039D                     	;# 
   424  039E                     	;# 
   425  039F                     	;# 
   426  0511                     	;# 
   427  0513                     	;# 
   428  051A                     	;# 
   429  0811                     	;# 
   430  0812                     	;# 
   431  0813                     	;# 
   432  0814                     	;# 
   433  0815                     	;# 
   434  0816                     	;# 
   435  0817                     	;# 
   436  0818                     	;# 
   437  0819                     	;# 
   438  081A                     	;# 
   439  081B                     	;# 
   440  081C                     	;# 
   441  081D                     	;# 
   442  081E                     	;# 
   443  081F                     	;# 
   444  0820                     	;# 
   445  0821                     	;# 
   446  0821                     	;# 
   447  0822                     	;# 
   448  0823                     	;# 
   449  0823                     	;# 
   450  0824                     	;# 
   451  0825                     	;# 
   452  0825                     	;# 
   453  0826                     	;# 
   454  0827                     	;# 
   455  0827                     	;# 
   456  0828                     	;# 
   457  0829                     	;# 
   458  082A                     	;# 
   459  082B                     	;# 
   460  082C                     	;# 
   461  082D                     	;# 
   462  082E                     	;# 
   463  082F                     	;# 
   464  0831                     	;# 
   465  0832                     	;# 
   466  0833                     	;# 
   467  0834                     	;# 
   468  0835                     	;# 
   469  0836                     	;# 
   470  0837                     	;# 
   471  0838                     	;# 
   472  0839                     	;# 
   473  083A                     	;# 
   474  083B                     	;# 
   475  083C                     	;# 
   476  083D                     	;# 
   477  083E                     	;# 
   478  083F                     	;# 
   479  0840                     	;# 
   480  0841                     	;# 
   481  0841                     	;# 
   482  0842                     	;# 
   483  0843                     	;# 
   484  0843                     	;# 
   485  0844                     	;# 
   486  0845                     	;# 
   487  0845                     	;# 
   488  0846                     	;# 
   489  0847                     	;# 
   490  0847                     	;# 
   491  0848                     	;# 
   492  0849                     	;# 
   493  084A                     	;# 
   494  084B                     	;# 
   495  084C                     	;# 
   496  084D                     	;# 
   497  084E                     	;# 
   498  084F                     	;# 
   499  0FE4                     	;# 
   500  0FE5                     	;# 
   501  0FE6                     	;# 
   502  0FE7                     	;# 
   503  0FE8                     	;# 
   504  0FE9                     	;# 
   505  0FEA                     	;# 
   506  0FEB                     	;# 
   507  0FED                     	;# 
   508  0FEE                     	;# 
   509  0FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  0010                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0014                     	;# 
   529  0015                     	;# 
   530  0016                     	;# 
   531  0016                     	;# 
   532  0017                     	;# 
   533  0018                     	;# 
   534  0019                     	;# 
   535  001A                     	;# 
   536  001B                     	;# 
   537  001C                     	;# 
   538  008C                     	;# 
   539  008D                     	;# 
   540  008E                     	;# 
   541  0090                     	;# 
   542  0091                     	;# 
   543  0092                     	;# 
   544  0094                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0097                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009A                     	;# 
   551  009B                     	;# 
   552  009B                     	;# 
   553  009C                     	;# 
   554  009D                     	;# 
   555  009E                     	;# 
   556  009F                     	;# 
   557  010C                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  0111                     	;# 
   561  0112                     	;# 
   562  0113                     	;# 
   563  0114                     	;# 
   564  0115                     	;# 
   565  0116                     	;# 
   566  0117                     	;# 
   567  0118                     	;# 
   568  0119                     	;# 
   569  011D                     	;# 
   570  011D                     	;# 
   571  011E                     	;# 
   572  011F                     	;# 
   573  018C                     	;# 
   574  018D                     	;# 
   575  0191                     	;# 
   576  0191                     	;# 
   577  0192                     	;# 
   578  0193                     	;# 
   579  0193                     	;# 
   580  0193                     	;# 
   581  0194                     	;# 
   582  0195                     	;# 
   583  0196                     	;# 
   584  0197                     	;# 
   585  0199                     	;# 
   586  0199                     	;# 
   587  0199                     	;# 
   588  019A                     	;# 
   589  019A                     	;# 
   590  019A                     	;# 
   591  019B                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019C                     	;# 
   597  019C                     	;# 
   598  019C                     	;# 
   599  019D                     	;# 
   600  019D                     	;# 
   601  019D                     	;# 
   602  019E                     	;# 
   603  019E                     	;# 
   604  019E                     	;# 
   605  019F                     	;# 
   606  019F                     	;# 
   607  019F                     	;# 
   608  019F                     	;# 
   609  019F                     	;# 
   610  020C                     	;# 
   611  020D                     	;# 
   612  020E                     	;# 
   613  0210                     	;# 
   614  0211                     	;# 
   615  0211                     	;# 
   616  0212                     	;# 
   617  0212                     	;# 
   618  0213                     	;# 
   619  0213                     	;# 
   620  0214                     	;# 
   621  0214                     	;# 
   622  0215                     	;# 
   623  0215                     	;# 
   624  0215                     	;# 
   625  0216                     	;# 
   626  0216                     	;# 
   627  0217                     	;# 
   628  0217                     	;# 
   629  028C                     	;# 
   630  028D                     	;# 
   631  028E                     	;# 
   632  0291                     	;# 
   633  0291                     	;# 
   634  0292                     	;# 
   635  0293                     	;# 
   636  0298                     	;# 
   637  0298                     	;# 
   638  0299                     	;# 
   639  029A                     	;# 
   640  030C                     	;# 
   641  030D                     	;# 
   642  030E                     	;# 
   643  038C                     	;# 
   644  038D                     	;# 
   645  038E                     	;# 
   646  0390                     	;# 
   647  0391                     	;# 
   648  0392                     	;# 
   649  0393                     	;# 
   650  0394                     	;# 
   651  0395                     	;# 
   652  0396                     	;# 
   653  0397                     	;# 
   654  0398                     	;# 
   655  0399                     	;# 
   656  039D                     	;# 
   657  039E                     	;# 
   658  039F                     	;# 
   659  0511                     	;# 
   660  0513                     	;# 
   661  051A                     	;# 
   662  0811                     	;# 
   663  0812                     	;# 
   664  0813                     	;# 
   665  0814                     	;# 
   666  0815                     	;# 
   667  0816                     	;# 
   668  0817                     	;# 
   669  0818                     	;# 
   670  0819                     	;# 
   671  081A                     	;# 
   672  081B                     	;# 
   673  081C                     	;# 
   674  081D                     	;# 
   675  081E                     	;# 
   676  081F                     	;# 
   677  0820                     	;# 
   678  0821                     	;# 
   679  0821                     	;# 
   680  0822                     	;# 
   681  0823                     	;# 
   682  0823                     	;# 
   683  0824                     	;# 
   684  0825                     	;# 
   685  0825                     	;# 
   686  0826                     	;# 
   687  0827                     	;# 
   688  0827                     	;# 
   689  0828                     	;# 
   690  0829                     	;# 
   691  082A                     	;# 
   692  082B                     	;# 
   693  082C                     	;# 
   694  082D                     	;# 
   695  082E                     	;# 
   696  082F                     	;# 
   697  0831                     	;# 
   698  0832                     	;# 
   699  0833                     	;# 
   700  0834                     	;# 
   701  0835                     	;# 
   702  0836                     	;# 
   703  0837                     	;# 
   704  0838                     	;# 
   705  0839                     	;# 
   706  083A                     	;# 
   707  083B                     	;# 
   708  083C                     	;# 
   709  083D                     	;# 
   710  083E                     	;# 
   711  083F                     	;# 
   712  0840                     	;# 
   713  0841                     	;# 
   714  0841                     	;# 
   715  0842                     	;# 
   716  0843                     	;# 
   717  0843                     	;# 
   718  0844                     	;# 
   719  0845                     	;# 
   720  0845                     	;# 
   721  0846                     	;# 
   722  0847                     	;# 
   723  0847                     	;# 
   724  0848                     	;# 
   725  0849                     	;# 
   726  084A                     	;# 
   727  084B                     	;# 
   728  084C                     	;# 
   729  084D                     	;# 
   730  084E                     	;# 
   731  084F                     	;# 
   732  0FE4                     	;# 
   733  0FE5                     	;# 
   734  0FE6                     	;# 
   735  0FE7                     	;# 
   736  0FE8                     	;# 
   737  0FE9                     	;# 
   738  0FEA                     	;# 
   739  0FEB                     	;# 
   740  0FED                     	;# 
   741  0FEE                     	;# 
   742  0FEF                     	;# 
   743  0000                     	;# 
   744  0001                     	;# 
   745  0002                     	;# 
   746  0003                     	;# 
   747  0004                     	;# 
   748  0005                     	;# 
   749  0006                     	;# 
   750  0007                     	;# 
   751  0008                     	;# 
   752  0009                     	;# 
   753  000A                     	;# 
   754  000B                     	;# 
   755  000C                     	;# 
   756  000D                     	;# 
   757  000E                     	;# 
   758  0010                     	;# 
   759  0011                     	;# 
   760  0012                     	;# 
   761  0014                     	;# 
   762  0015                     	;# 
   763  0016                     	;# 
   764  0016                     	;# 
   765  0017                     	;# 
   766  0018                     	;# 
   767  0019                     	;# 
   768  001A                     	;# 
   769  001B                     	;# 
   770  001C                     	;# 
   771  008C                     	;# 
   772  008D                     	;# 
   773  008E                     	;# 
   774  0090                     	;# 
   775  0091                     	;# 
   776  0092                     	;# 
   777  0094                     	;# 
   778  0095                     	;# 
   779  0096                     	;# 
   780  0097                     	;# 
   781  0098                     	;# 
   782  0099                     	;# 
   783  009A                     	;# 
   784  009B                     	;# 
   785  009B                     	;# 
   786  009C                     	;# 
   787  009D                     	;# 
   788  009E                     	;# 
   789  009F                     	;# 
   790  010C                     	;# 
   791  010D                     	;# 
   792  010E                     	;# 
   793  0111                     	;# 
   794  0112                     	;# 
   795  0113                     	;# 
   796  0114                     	;# 
   797  0115                     	;# 
   798  0116                     	;# 
   799  0117                     	;# 
   800  0118                     	;# 
   801  0119                     	;# 
   802  011D                     	;# 
   803  011D                     	;# 
   804  011E                     	;# 
   805  011F                     	;# 
   806  018C                     	;# 
   807  018D                     	;# 
   808  0191                     	;# 
   809  0191                     	;# 
   810  0192                     	;# 
   811  0193                     	;# 
   812  0193                     	;# 
   813  0193                     	;# 
   814  0194                     	;# 
   815  0195                     	;# 
   816  0196                     	;# 
   817  0197                     	;# 
   818  0199                     	;# 
   819  0199                     	;# 
   820  0199                     	;# 
   821  019A                     	;# 
   822  019A                     	;# 
   823  019A                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019B                     	;# 
   829  019C                     	;# 
   830  019C                     	;# 
   831  019C                     	;# 
   832  019D                     	;# 
   833  019D                     	;# 
   834  019D                     	;# 
   835  019E                     	;# 
   836  019E                     	;# 
   837  019E                     	;# 
   838  019F                     	;# 
   839  019F                     	;# 
   840  019F                     	;# 
   841  019F                     	;# 
   842  019F                     	;# 
   843  020C                     	;# 
   844  020D                     	;# 
   845  020E                     	;# 
   846  0210                     	;# 
   847  0211                     	;# 
   848  0211                     	;# 
   849  0212                     	;# 
   850  0212                     	;# 
   851  0213                     	;# 
   852  0213                     	;# 
   853  0214                     	;# 
   854  0214                     	;# 
   855  0215                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0216                     	;# 
   859  0216                     	;# 
   860  0217                     	;# 
   861  0217                     	;# 
   862  028C                     	;# 
   863  028D                     	;# 
   864  028E                     	;# 
   865  0291                     	;# 
   866  0291                     	;# 
   867  0292                     	;# 
   868  0293                     	;# 
   869  0298                     	;# 
   870  0298                     	;# 
   871  0299                     	;# 
   872  029A                     	;# 
   873  030C                     	;# 
   874  030D                     	;# 
   875  030E                     	;# 
   876  038C                     	;# 
   877  038D                     	;# 
   878  038E                     	;# 
   879  0390                     	;# 
   880  0391                     	;# 
   881  0392                     	;# 
   882  0393                     	;# 
   883  0394                     	;# 
   884  0395                     	;# 
   885  0396                     	;# 
   886  0397                     	;# 
   887  0398                     	;# 
   888  0399                     	;# 
   889  039D                     	;# 
   890  039E                     	;# 
   891  039F                     	;# 
   892  0511                     	;# 
   893  0513                     	;# 
   894  051A                     	;# 
   895  0811                     	;# 
   896  0812                     	;# 
   897  0813                     	;# 
   898  0814                     	;# 
   899  0815                     	;# 
   900  0816                     	;# 
   901  0817                     	;# 
   902  0818                     	;# 
   903  0819                     	;# 
   904  081A                     	;# 
   905  081B                     	;# 
   906  081C                     	;# 
   907  081D                     	;# 
   908  081E                     	;# 
   909  081F                     	;# 
   910  0820                     	;# 
   911  0821                     	;# 
   912  0821                     	;# 
   913  0822                     	;# 
   914  0823                     	;# 
   915  0823                     	;# 
   916  0824                     	;# 
   917  0825                     	;# 
   918  0825                     	;# 
   919  0826                     	;# 
   920  0827                     	;# 
   921  0827                     	;# 
   922  0828                     	;# 
   923  0829                     	;# 
   924  082A                     	;# 
   925  082B                     	;# 
   926  082C                     	;# 
   927  082D                     	;# 
   928  082E                     	;# 
   929  082F                     	;# 
   930  0831                     	;# 
   931  0832                     	;# 
   932  0833                     	;# 
   933  0834                     	;# 
   934  0835                     	;# 
   935  0836                     	;# 
   936  0837                     	;# 
   937  0838                     	;# 
   938  0839                     	;# 
   939  083A                     	;# 
   940  083B                     	;# 
   941  083C                     	;# 
   942  083D                     	;# 
   943  083E                     	;# 
   944  083F                     	;# 
   945  0840                     	;# 
   946  0841                     	;# 
   947  0841                     	;# 
   948  0842                     	;# 
   949  0843                     	;# 
   950  0843                     	;# 
   951  0844                     	;# 
   952  0845                     	;# 
   953  0845                     	;# 
   954  0846                     	;# 
   955  0847                     	;# 
   956  0847                     	;# 
   957  0848                     	;# 
   958  0849                     	;# 
   959  084A                     	;# 
   960  084B                     	;# 
   961  084C                     	;# 
   962  084D                     	;# 
   963  084E                     	;# 
   964  084F                     	;# 
   965  0FE4                     	;# 
   966  0FE5                     	;# 
   967  0FE6                     	;# 
   968  0FE7                     	;# 
   969  0FE8                     	;# 
   970  0FE9                     	;# 
   971  0FEA                     	;# 
   972  0FEB                     	;# 
   973  0FED                     	;# 
   974  0FEE                     	;# 
   975  0FEF                     	;# 
   976  0000                     	;# 
   977  0001                     	;# 
   978  0002                     	;# 
   979  0003                     	;# 
   980  0004                     	;# 
   981  0005                     	;# 
   982  0006                     	;# 
   983  0007                     	;# 
   984  0008                     	;# 
   985  0009                     	;# 
   986  000A                     	;# 
   987  000B                     	;# 
   988  000C                     	;# 
   989  000D                     	;# 
   990  000E                     	;# 
   991  0010                     	;# 
   992  0011                     	;# 
   993  0012                     	;# 
   994  0014                     	;# 
   995  0015                     	;# 
   996  0016                     	;# 
   997  0016                     	;# 
   998  0017                     	;# 
   999  0018                     	;# 
  1000  0019                     	;# 
  1001  001A                     	;# 
  1002  001B                     	;# 
  1003  001C                     	;# 
  1004  008C                     	;# 
  1005  008D                     	;# 
  1006  008E                     	;# 
  1007  0090                     	;# 
  1008  0091                     	;# 
  1009  0092                     	;# 
  1010  0094                     	;# 
  1011  0095                     	;# 
  1012  0096                     	;# 
  1013  0097                     	;# 
  1014  0098                     	;# 
  1015  0099                     	;# 
  1016  009A                     	;# 
  1017  009B                     	;# 
  1018  009B                     	;# 
  1019  009C                     	;# 
  1020  009D                     	;# 
  1021  009E                     	;# 
  1022  009F                     	;# 
  1023  010C                     	;# 
  1024  010D                     	;# 
  1025  010E                     	;# 
  1026  0111                     	;# 
  1027  0112                     	;# 
  1028  0113                     	;# 
  1029  0114                     	;# 
  1030  0115                     	;# 
  1031  0116                     	;# 
  1032  0117                     	;# 
  1033  0118                     	;# 
  1034  0119                     	;# 
  1035  011D                     	;# 
  1036  011D                     	;# 
  1037  011E                     	;# 
  1038  011F                     	;# 
  1039  018C                     	;# 
  1040  018D                     	;# 
  1041  0191                     	;# 
  1042  0191                     	;# 
  1043  0192                     	;# 
  1044  0193                     	;# 
  1045  0193                     	;# 
  1046  0193                     	;# 
  1047  0194                     	;# 
  1048  0195                     	;# 
  1049  0196                     	;# 
  1050  0197                     	;# 
  1051  0199                     	;# 
  1052  0199                     	;# 
  1053  0199                     	;# 
  1054  019A                     	;# 
  1055  019A                     	;# 
  1056  019A                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019C                     	;# 
  1063  019C                     	;# 
  1064  019C                     	;# 
  1065  019D                     	;# 
  1066  019D                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019E                     	;# 
  1070  019E                     	;# 
  1071  019F                     	;# 
  1072  019F                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  020C                     	;# 
  1077  020D                     	;# 
  1078  020E                     	;# 
  1079  0210                     	;# 
  1080  0211                     	;# 
  1081  0211                     	;# 
  1082  0212                     	;# 
  1083  0212                     	;# 
  1084  0213                     	;# 
  1085  0213                     	;# 
  1086  0214                     	;# 
  1087  0214                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0216                     	;# 
  1092  0216                     	;# 
  1093  0217                     	;# 
  1094  0217                     	;# 
  1095  028C                     	;# 
  1096  028D                     	;# 
  1097  028E                     	;# 
  1098  0291                     	;# 
  1099  0291                     	;# 
  1100  0292                     	;# 
  1101  0293                     	;# 
  1102  0298                     	;# 
  1103  0298                     	;# 
  1104  0299                     	;# 
  1105  029A                     	;# 
  1106  030C                     	;# 
  1107  030D                     	;# 
  1108  030E                     	;# 
  1109  038C                     	;# 
  1110  038D                     	;# 
  1111  038E                     	;# 
  1112  0390                     	;# 
  1113  0391                     	;# 
  1114  0392                     	;# 
  1115  0393                     	;# 
  1116  0394                     	;# 
  1117  0395                     	;# 
  1118  0396                     	;# 
  1119  0397                     	;# 
  1120  0398                     	;# 
  1121  0399                     	;# 
  1122  039D                     	;# 
  1123  039E                     	;# 
  1124  039F                     	;# 
  1125  0511                     	;# 
  1126  0513                     	;# 
  1127  051A                     	;# 
  1128  0811                     	;# 
  1129  0812                     	;# 
  1130  0813                     	;# 
  1131  0814                     	;# 
  1132  0815                     	;# 
  1133  0816                     	;# 
  1134  0817                     	;# 
  1135  0818                     	;# 
  1136  0819                     	;# 
  1137  081A                     	;# 
  1138  081B                     	;# 
  1139  081C                     	;# 
  1140  081D                     	;# 
  1141  081E                     	;# 
  1142  081F                     	;# 
  1143  0820                     	;# 
  1144  0821                     	;# 
  1145  0821                     	;# 
  1146  0822                     	;# 
  1147  0823                     	;# 
  1148  0823                     	;# 
  1149  0824                     	;# 
  1150  0825                     	;# 
  1151  0825                     	;# 
  1152  0826                     	;# 
  1153  0827                     	;# 
  1154  0827                     	;# 
  1155  0828                     	;# 
  1156  0829                     	;# 
  1157  082A                     	;# 
  1158  082B                     	;# 
  1159  082C                     	;# 
  1160  082D                     	;# 
  1161  082E                     	;# 
  1162  082F                     	;# 
  1163  0831                     	;# 
  1164  0832                     	;# 
  1165  0833                     	;# 
  1166  0834                     	;# 
  1167  0835                     	;# 
  1168  0836                     	;# 
  1169  0837                     	;# 
  1170  0838                     	;# 
  1171  0839                     	;# 
  1172  083A                     	;# 
  1173  083B                     	;# 
  1174  083C                     	;# 
  1175  083D                     	;# 
  1176  083E                     	;# 
  1177  083F                     	;# 
  1178  0840                     	;# 
  1179  0841                     	;# 
  1180  0841                     	;# 
  1181  0842                     	;# 
  1182  0843                     	;# 
  1183  0843                     	;# 
  1184  0844                     	;# 
  1185  0845                     	;# 
  1186  0845                     	;# 
  1187  0846                     	;# 
  1188  0847                     	;# 
  1189  0847                     	;# 
  1190  0848                     	;# 
  1191  0849                     	;# 
  1192  084A                     	;# 
  1193  084B                     	;# 
  1194  084C                     	;# 
  1195  084D                     	;# 
  1196  084E                     	;# 
  1197  084F                     	;# 
  1198  0FE4                     	;# 
  1199  0FE5                     	;# 
  1200  0FE6                     	;# 
  1201  0FE7                     	;# 
  1202  0FE8                     	;# 
  1203  0FE9                     	;# 
  1204  0FEA                     	;# 
  1205  0FEB                     	;# 
  1206  0FED                     	;# 
  1207  0FEE                     	;# 
  1208  0FEF                     	;# 
  1209  0000                     	;# 
  1210  0001                     	;# 
  1211  0002                     	;# 
  1212  0003                     	;# 
  1213  0004                     	;# 
  1214  0005                     	;# 
  1215  0006                     	;# 
  1216  0007                     	;# 
  1217  0008                     	;# 
  1218  0009                     	;# 
  1219  000A                     	;# 
  1220  000B                     	;# 
  1221  000C                     	;# 
  1222  000D                     	;# 
  1223  000E                     	;# 
  1224  0010                     	;# 
  1225  0011                     	;# 
  1226  0012                     	;# 
  1227  0014                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  008C                     	;# 
  1238  008D                     	;# 
  1239  008E                     	;# 
  1240  0090                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0094                     	;# 
  1244  0095                     	;# 
  1245  0096                     	;# 
  1246  0097                     	;# 
  1247  0098                     	;# 
  1248  0099                     	;# 
  1249  009A                     	;# 
  1250  009B                     	;# 
  1251  009B                     	;# 
  1252  009C                     	;# 
  1253  009D                     	;# 
  1254  009E                     	;# 
  1255  009F                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  010E                     	;# 
  1259  0111                     	;# 
  1260  0112                     	;# 
  1261  0113                     	;# 
  1262  0114                     	;# 
  1263  0115                     	;# 
  1264  0116                     	;# 
  1265  0117                     	;# 
  1266  0118                     	;# 
  1267  0119                     	;# 
  1268  011D                     	;# 
  1269  011D                     	;# 
  1270  011E                     	;# 
  1271  011F                     	;# 
  1272  018C                     	;# 
  1273  018D                     	;# 
  1274  0191                     	;# 
  1275  0191                     	;# 
  1276  0192                     	;# 
  1277  0193                     	;# 
  1278  0193                     	;# 
  1279  0193                     	;# 
  1280  0194                     	;# 
  1281  0195                     	;# 
  1282  0196                     	;# 
  1283  0197                     	;# 
  1284  0199                     	;# 
  1285  0199                     	;# 
  1286  0199                     	;# 
  1287  019A                     	;# 
  1288  019A                     	;# 
  1289  019A                     	;# 
  1290  019B                     	;# 
  1291  019B                     	;# 
  1292  019B                     	;# 
  1293  019B                     	;# 
  1294  019B                     	;# 
  1295  019C                     	;# 
  1296  019C                     	;# 
  1297  019C                     	;# 
  1298  019D                     	;# 
  1299  019D                     	;# 
  1300  019D                     	;# 
  1301  019E                     	;# 
  1302  019E                     	;# 
  1303  019E                     	;# 
  1304  019F                     	;# 
  1305  019F                     	;# 
  1306  019F                     	;# 
  1307  019F                     	;# 
  1308  019F                     	;# 
  1309  020C                     	;# 
  1310  020D                     	;# 
  1311  020E                     	;# 
  1312  0210                     	;# 
  1313  0211                     	;# 
  1314  0211                     	;# 
  1315  0212                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0213                     	;# 
  1319  0214                     	;# 
  1320  0214                     	;# 
  1321  0215                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0216                     	;# 
  1325  0216                     	;# 
  1326  0217                     	;# 
  1327  0217                     	;# 
  1328  028C                     	;# 
  1329  028D                     	;# 
  1330  028E                     	;# 
  1331  0291                     	;# 
  1332  0291                     	;# 
  1333  0292                     	;# 
  1334  0293                     	;# 
  1335  0298                     	;# 
  1336  0298                     	;# 
  1337  0299                     	;# 
  1338  029A                     	;# 
  1339  030C                     	;# 
  1340  030D                     	;# 
  1341  030E                     	;# 
  1342  038C                     	;# 
  1343  038D                     	;# 
  1344  038E                     	;# 
  1345  0390                     	;# 
  1346  0391                     	;# 
  1347  0392                     	;# 
  1348  0393                     	;# 
  1349  0394                     	;# 
  1350  0395                     	;# 
  1351  0396                     	;# 
  1352  0397                     	;# 
  1353  0398                     	;# 
  1354  0399                     	;# 
  1355  039D                     	;# 
  1356  039E                     	;# 
  1357  039F                     	;# 
  1358  0511                     	;# 
  1359  0513                     	;# 
  1360  051A                     	;# 
  1361  0811                     	;# 
  1362  0812                     	;# 
  1363  0813                     	;# 
  1364  0814                     	;# 
  1365  0815                     	;# 
  1366  0816                     	;# 
  1367  0817                     	;# 
  1368  0818                     	;# 
  1369  0819                     	;# 
  1370  081A                     	;# 
  1371  081B                     	;# 
  1372  081C                     	;# 
  1373  081D                     	;# 
  1374  081E                     	;# 
  1375  081F                     	;# 
  1376  0820                     	;# 
  1377  0821                     	;# 
  1378  0821                     	;# 
  1379  0822                     	;# 
  1380  0823                     	;# 
  1381  0823                     	;# 
  1382  0824                     	;# 
  1383  0825                     	;# 
  1384  0825                     	;# 
  1385  0826                     	;# 
  1386  0827                     	;# 
  1387  0827                     	;# 
  1388  0828                     	;# 
  1389  0829                     	;# 
  1390  082A                     	;# 
  1391  082B                     	;# 
  1392  082C                     	;# 
  1393  082D                     	;# 
  1394  082E                     	;# 
  1395  082F                     	;# 
  1396  0831                     	;# 
  1397  0832                     	;# 
  1398  0833                     	;# 
  1399  0834                     	;# 
  1400  0835                     	;# 
  1401  0836                     	;# 
  1402  0837                     	;# 
  1403  0838                     	;# 
  1404  0839                     	;# 
  1405  083A                     	;# 
  1406  083B                     	;# 
  1407  083C                     	;# 
  1408  083D                     	;# 
  1409  083E                     	;# 
  1410  083F                     	;# 
  1411  0840                     	;# 
  1412  0841                     	;# 
  1413  0841                     	;# 
  1414  0842                     	;# 
  1415  0843                     	;# 
  1416  0843                     	;# 
  1417  0844                     	;# 
  1418  0845                     	;# 
  1419  0845                     	;# 
  1420  0846                     	;# 
  1421  0847                     	;# 
  1422  0847                     	;# 
  1423  0848                     	;# 
  1424  0849                     	;# 
  1425  084A                     	;# 
  1426  084B                     	;# 
  1427  084C                     	;# 
  1428  084D                     	;# 
  1429  084E                     	;# 
  1430  084F                     	;# 
  1431  0FE4                     	;# 
  1432  0FE5                     	;# 
  1433  0FE6                     	;# 
  1434  0FE7                     	;# 
  1435  0FE8                     	;# 
  1436  0FE9                     	;# 
  1437  0FEA                     	;# 
  1438  0FEB                     	;# 
  1439  0FED                     	;# 
  1440  0FEE                     	;# 
  1441  0FEF                     	;# 
  1442  0000                     	;# 
  1443  0001                     	;# 
  1444  0002                     	;# 
  1445  0003                     	;# 
  1446  0004                     	;# 
  1447  0005                     	;# 
  1448  0006                     	;# 
  1449  0007                     	;# 
  1450  0008                     	;# 
  1451  0009                     	;# 
  1452  000A                     	;# 
  1453  000B                     	;# 
  1454  000C                     	;# 
  1455  000D                     	;# 
  1456  000E                     	;# 
  1457  0010                     	;# 
  1458  0011                     	;# 
  1459  0012                     	;# 
  1460  0014                     	;# 
  1461  0015                     	;# 
  1462  0016                     	;# 
  1463  0016                     	;# 
  1464  0017                     	;# 
  1465  0018                     	;# 
  1466  0019                     	;# 
  1467  001A                     	;# 
  1468  001B                     	;# 
  1469  001C                     	;# 
  1470  008C                     	;# 
  1471  008D                     	;# 
  1472  008E                     	;# 
  1473  0090                     	;# 
  1474  0091                     	;# 
  1475  0092                     	;# 
  1476  0094                     	;# 
  1477  0095                     	;# 
  1478  0096                     	;# 
  1479  0097                     	;# 
  1480  0098                     	;# 
  1481  0099                     	;# 
  1482  009A                     	;# 
  1483  009B                     	;# 
  1484  009B                     	;# 
  1485  009C                     	;# 
  1486  009D                     	;# 
  1487  009E                     	;# 
  1488  009F                     	;# 
  1489  010C                     	;# 
  1490  010D                     	;# 
  1491  010E                     	;# 
  1492  0111                     	;# 
  1493  0112                     	;# 
  1494  0113                     	;# 
  1495  0114                     	;# 
  1496  0115                     	;# 
  1497  0116                     	;# 
  1498  0117                     	;# 
  1499  0118                     	;# 
  1500  0119                     	;# 
  1501  011D                     	;# 
  1502  011D                     	;# 
  1503  011E                     	;# 
  1504  011F                     	;# 
  1505  018C                     	;# 
  1506  018D                     	;# 
  1507  0191                     	;# 
  1508  0191                     	;# 
  1509  0192                     	;# 
  1510  0193                     	;# 
  1511  0193                     	;# 
  1512  0193                     	;# 
  1513  0194                     	;# 
  1514  0195                     	;# 
  1515  0196                     	;# 
  1516  0197                     	;# 
  1517  0199                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  019A                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019C                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019D                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019E                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  019F                     	;# 
  1542  020C                     	;# 
  1543  020D                     	;# 
  1544  020E                     	;# 
  1545  0210                     	;# 
  1546  0211                     	;# 
  1547  0211                     	;# 
  1548  0212                     	;# 
  1549  0212                     	;# 
  1550  0213                     	;# 
  1551  0213                     	;# 
  1552  0214                     	;# 
  1553  0214                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0215                     	;# 
  1557  0216                     	;# 
  1558  0216                     	;# 
  1559  0217                     	;# 
  1560  0217                     	;# 
  1561  028C                     	;# 
  1562  028D                     	;# 
  1563  028E                     	;# 
  1564  0291                     	;# 
  1565  0291                     	;# 
  1566  0292                     	;# 
  1567  0293                     	;# 
  1568  0298                     	;# 
  1569  0298                     	;# 
  1570  0299                     	;# 
  1571  029A                     	;# 
  1572  030C                     	;# 
  1573  030D                     	;# 
  1574  030E                     	;# 
  1575  038C                     	;# 
  1576  038D                     	;# 
  1577  038E                     	;# 
  1578  0390                     	;# 
  1579  0391                     	;# 
  1580  0392                     	;# 
  1581  0393                     	;# 
  1582  0394                     	;# 
  1583  0395                     	;# 
  1584  0396                     	;# 
  1585  0397                     	;# 
  1586  0398                     	;# 
  1587  0399                     	;# 
  1588  039D                     	;# 
  1589  039E                     	;# 
  1590  039F                     	;# 
  1591  0511                     	;# 
  1592  0513                     	;# 
  1593  051A                     	;# 
  1594  0811                     	;# 
  1595  0812                     	;# 
  1596  0813                     	;# 
  1597  0814                     	;# 
  1598  0815                     	;# 
  1599  0816                     	;# 
  1600  0817                     	;# 
  1601  0818                     	;# 
  1602  0819                     	;# 
  1603  081A                     	;# 
  1604  081B                     	;# 
  1605  081C                     	;# 
  1606  081D                     	;# 
  1607  081E                     	;# 
  1608  081F                     	;# 
  1609  0820                     	;# 
  1610  0821                     	;# 
  1611  0821                     	;# 
  1612  0822                     	;# 
  1613  0823                     	;# 
  1614  0823                     	;# 
  1615  0824                     	;# 
  1616  0825                     	;# 
  1617  0825                     	;# 
  1618  0826                     	;# 
  1619  0827                     	;# 
  1620  0827                     	;# 
  1621  0828                     	;# 
  1622  0829                     	;# 
  1623  082A                     	;# 
  1624  082B                     	;# 
  1625  082C                     	;# 
  1626  082D                     	;# 
  1627  082E                     	;# 
  1628  082F                     	;# 
  1629  0831                     	;# 
  1630  0832                     	;# 
  1631  0833                     	;# 
  1632  0834                     	;# 
  1633  0835                     	;# 
  1634  0836                     	;# 
  1635  0837                     	;# 
  1636  0838                     	;# 
  1637  0839                     	;# 
  1638  083A                     	;# 
  1639  083B                     	;# 
  1640  083C                     	;# 
  1641  083D                     	;# 
  1642  083E                     	;# 
  1643  083F                     	;# 
  1644  0840                     	;# 
  1645  0841                     	;# 
  1646  0841                     	;# 
  1647  0842                     	;# 
  1648  0843                     	;# 
  1649  0843                     	;# 
  1650  0844                     	;# 
  1651  0845                     	;# 
  1652  0845                     	;# 
  1653  0846                     	;# 
  1654  0847                     	;# 
  1655  0847                     	;# 
  1656  0848                     	;# 
  1657  0849                     	;# 
  1658  084A                     	;# 
  1659  084B                     	;# 
  1660  084C                     	;# 
  1661  084D                     	;# 
  1662  084E                     	;# 
  1663  084F                     	;# 
  1664  0FE4                     	;# 
  1665  0FE5                     	;# 
  1666  0FE6                     	;# 
  1667  0FE7                     	;# 
  1668  0FE8                     	;# 
  1669  0FE9                     	;# 
  1670  0FEA                     	;# 
  1671  0FEB                     	;# 
  1672  0FED                     	;# 
  1673  0FEE                     	;# 
  1674  0FEF                     	;# 
  1675  0000                     	;# 
  1676  0001                     	;# 
  1677  0002                     	;# 
  1678  0003                     	;# 
  1679  0004                     	;# 
  1680  0005                     	;# 
  1681  0006                     	;# 
  1682  0007                     	;# 
  1683  0008                     	;# 
  1684  0009                     	;# 
  1685  000A                     	;# 
  1686  000B                     	;# 
  1687  000C                     	;# 
  1688  000D                     	;# 
  1689  000E                     	;# 
  1690  0010                     	;# 
  1691  0011                     	;# 
  1692  0012                     	;# 
  1693  0014                     	;# 
  1694  0015                     	;# 
  1695  0016                     	;# 
  1696  0016                     	;# 
  1697  0017                     	;# 
  1698  0018                     	;# 
  1699  0019                     	;# 
  1700  001A                     	;# 
  1701  001B                     	;# 
  1702  001C                     	;# 
  1703  008C                     	;# 
  1704  008D                     	;# 
  1705  008E                     	;# 
  1706  0090                     	;# 
  1707  0091                     	;# 
  1708  0092                     	;# 
  1709  0094                     	;# 
  1710  0095                     	;# 
  1711  0096                     	;# 
  1712  0097                     	;# 
  1713  0098                     	;# 
  1714  0099                     	;# 
  1715  009A                     	;# 
  1716  009B                     	;# 
  1717  009B                     	;# 
  1718  009C                     	;# 
  1719  009D                     	;# 
  1720  009E                     	;# 
  1721  009F                     	;# 
  1722  010C                     	;# 
  1723  010D                     	;# 
  1724  010E                     	;# 
  1725  0111                     	;# 
  1726  0112                     	;# 
  1727  0113                     	;# 
  1728  0114                     	;# 
  1729  0115                     	;# 
  1730  0116                     	;# 
  1731  0117                     	;# 
  1732  0118                     	;# 
  1733  0119                     	;# 
  1734  011D                     	;# 
  1735  011D                     	;# 
  1736  011E                     	;# 
  1737  011F                     	;# 
  1738  018C                     	;# 
  1739  018D                     	;# 
  1740  0191                     	;# 
  1741  0191                     	;# 
  1742  0192                     	;# 
  1743  0193                     	;# 
  1744  0193                     	;# 
  1745  0193                     	;# 
  1746  0194                     	;# 
  1747  0195                     	;# 
  1748  0196                     	;# 
  1749  0197                     	;# 
  1750  0199                     	;# 
  1751  0199                     	;# 
  1752  0199                     	;# 
  1753  019A                     	;# 
  1754  019A                     	;# 
  1755  019A                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019B                     	;# 
  1760  019B                     	;# 
  1761  019C                     	;# 
  1762  019C                     	;# 
  1763  019C                     	;# 
  1764  019D                     	;# 
  1765  019D                     	;# 
  1766  019D                     	;# 
  1767  019E                     	;# 
  1768  019E                     	;# 
  1769  019E                     	;# 
  1770  019F                     	;# 
  1771  019F                     	;# 
  1772  019F                     	;# 
  1773  019F                     	;# 
  1774  019F                     	;# 
  1775  020C                     	;# 
  1776  020D                     	;# 
  1777  020E                     	;# 
  1778  0210                     	;# 
  1779  0211                     	;# 
  1780  0211                     	;# 
  1781  0212                     	;# 
  1782  0212                     	;# 
  1783  0213                     	;# 
  1784  0213                     	;# 
  1785  0214                     	;# 
  1786  0214                     	;# 
  1787  0215                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0216                     	;# 
  1791  0216                     	;# 
  1792  0217                     	;# 
  1793  0217                     	;# 
  1794  028C                     	;# 
  1795  028D                     	;# 
  1796  028E                     	;# 
  1797  0291                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0293                     	;# 
  1801  0298                     	;# 
  1802  0298                     	;# 
  1803  0299                     	;# 
  1804  029A                     	;# 
  1805  030C                     	;# 
  1806  030D                     	;# 
  1807  030E                     	;# 
  1808  038C                     	;# 
  1809  038D                     	;# 
  1810  038E                     	;# 
  1811  0390                     	;# 
  1812  0391                     	;# 
  1813  0392                     	;# 
  1814  0393                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0397                     	;# 
  1819  0398                     	;# 
  1820  0399                     	;# 
  1821  039D                     	;# 
  1822  039E                     	;# 
  1823  039F                     	;# 
  1824  0511                     	;# 
  1825  0513                     	;# 
  1826  051A                     	;# 
  1827  0811                     	;# 
  1828  0812                     	;# 
  1829  0813                     	;# 
  1830  0814                     	;# 
  1831  0815                     	;# 
  1832  0816                     	;# 
  1833  0817                     	;# 
  1834  0818                     	;# 
  1835  0819                     	;# 
  1836  081A                     	;# 
  1837  081B                     	;# 
  1838  081C                     	;# 
  1839  081D                     	;# 
  1840  081E                     	;# 
  1841  081F                     	;# 
  1842  0820                     	;# 
  1843  0821                     	;# 
  1844  0821                     	;# 
  1845  0822                     	;# 
  1846  0823                     	;# 
  1847  0823                     	;# 
  1848  0824                     	;# 
  1849  0825                     	;# 
  1850  0825                     	;# 
  1851  0826                     	;# 
  1852  0827                     	;# 
  1853  0827                     	;# 
  1854  0828                     	;# 
  1855  0829                     	;# 
  1856  082A                     	;# 
  1857  082B                     	;# 
  1858  082C                     	;# 
  1859  082D                     	;# 
  1860  082E                     	;# 
  1861  082F                     	;# 
  1862  0831                     	;# 
  1863  0832                     	;# 
  1864  0833                     	;# 
  1865  0834                     	;# 
  1866  0835                     	;# 
  1867  0836                     	;# 
  1868  0837                     	;# 
  1869  0838                     	;# 
  1870  0839                     	;# 
  1871  083A                     	;# 
  1872  083B                     	;# 
  1873  083C                     	;# 
  1874  083D                     	;# 
  1875  083E                     	;# 
  1876  083F                     	;# 
  1877  0840                     	;# 
  1878  0841                     	;# 
  1879  0841                     	;# 
  1880  0842                     	;# 
  1881  0843                     	;# 
  1882  0843                     	;# 
  1883  0844                     	;# 
  1884  0845                     	;# 
  1885  0845                     	;# 
  1886  0846                     	;# 
  1887  0847                     	;# 
  1888  0847                     	;# 
  1889  0848                     	;# 
  1890  0849                     	;# 
  1891  084A                     	;# 
  1892  084B                     	;# 
  1893  084C                     	;# 
  1894  084D                     	;# 
  1895  084E                     	;# 
  1896  084F                     	;# 
  1897  0FE4                     	;# 
  1898  0FE5                     	;# 
  1899  0FE6                     	;# 
  1900  0FE7                     	;# 
  1901  0FE8                     	;# 
  1902  0FE9                     	;# 
  1903  0FEA                     	;# 
  1904  0FEB                     	;# 
  1905  0FED                     	;# 
  1906  0FEE                     	;# 
  1907  0FEF                     	;# 
  1908                           
  1909                           	psect	idataBANK0
  1910  0DF6                     __pidataBANK0:	
  1911                           
  1912                           ;initializer for _ADC_intF
  1913  0DF6  3401               	retlw	1
  1914  0DF7  3400               	retlw	0
  1915                           
  1916                           ;initializer for _PWMDC
  1917  0DF8  3413               	retlw	19
  1918  0DF9  3400               	retlw	0
  1919                           
  1920                           	psect	stringtext
  1921  0800                     __pstringtext:	
  1922  0800                     _dpowers:	
  1923  0800  3401               	retlw	1
  1924  0801  3400               	retlw	0
  1925  0802  340A               	retlw	10
  1926  0803  3400               	retlw	0
  1927  0804  3464               	retlw	100
  1928  0805  3400               	retlw	0
  1929  0806  34E8               	retlw	232
  1930  0807  3403               	retlw	3
  1931  0808  3410               	retlw	16
  1932  0809  3427               	retlw	39
  1933  080A                     __end_of_dpowers:	
  1934  000B                     _INTCONbits	set	11
  1935  000C                     _PORTA	set	12
  1936  000D                     _PORTB	set	13
  1937  000E                     _PORTC	set	14
  1938  000E                     _PORTCbits	set	14
  1939  0015                     _TMR0	set	21
  1940  009D                     _ADCON0bits	set	157
  1941  009E                     _ADCON1bits	set	158
  1942  009F                     _ADCON2bits	set	159
  1943  009C                     _ADRESH	set	156
  1944  009B                     _ADRESL	set	155
  1945  0095                     _OPTION_REGbits	set	149
  1946  0099                     _OSCCONbits	set	153
  1947  008C                     _TRISA	set	140
  1948  008C                     _TRISAbits	set	140
  1949  008D                     _TRISB	set	141
  1950  008D                     _TRISBbits	set	141
  1951  008E                     _TRISC	set	142
  1952  010C                     _LATA	set	268
  1953  010C                     _LATAbits	set	268
  1954  010D                     _LATB	set	269
  1955  010D                     _LATBbits	set	269
  1956  010E                     _LATC	set	270
  1957  018C                     _ANSELAbits	set	396
  1958  018D                     _ANSELBbits	set	397
  1959  020C                     _WPUA	set	524
  1960  020D                     _WPUB	set	525
  1961  020E                     _WPUC	set	526
  1962  080A                     __stringdata:	
  1963  080A                     STR_2:	
  1964  080A  3454               	retlw	84	;'T'
  1965  080B  343A               	retlw	58	;':'
  1966  080C  3420               	retlw	32	;' '
  1967  080D  3420               	retlw	32	;' '
  1968  080E  342D               	retlw	45	;'-'
  1969  080F  3425               	retlw	37	;'%'
  1970  0810  3464               	retlw	100	;'d'
  1971  0811  342E               	retlw	46	;'.'
  1972  0812  3425               	retlw	37	;'%'
  1973  0813  3464               	retlw	100	;'d'
  1974  0814  340D               	retlw	13
  1975  0815  340A               	retlw	10
  1976  0816  3400               	retlw	0
  1977  0817                     STR_1:	
  1978  0817  3425               	retlw	37	;'%'
  1979  0818  3464               	retlw	100	;'d'
  1980  0819  3420               	retlw	32	;' '
  1981  081A  3425               	retlw	37	;'%'
  1982  081B  3464               	retlw	100	;'d'
  1983  081C  340A               	retlw	10
  1984  081D  3400               	retlw	0
  1985  081E                     STR_3:	
  1986  081E  3425               	retlw	37	;'%'
  1987  081F  3464               	retlw	100	;'d'
  1988  0820  3420               	retlw	32	;' '
  1989  0821  3425               	retlw	37	;'%'
  1990  0822  3464               	retlw	100	;'d'
  1991  0823  3400               	retlw	0
  1992  0824                     __end_of__stringdata:	
  1993                           
  1994                           ; #config settings
  1995  0000                     
  1996                           	psect	cinit
  1997  00AD                     start_initialization:	
  1998  00AD                     __initialization:	
  1999                           
  2000                           ; Clear objects allocated to COMMON
  2001  00AD  01FA               	clrf	__pbssCOMMON& (0+127)
  2002  00AE  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2003  00AF  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2004  00B0  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  2005                           
  2006                           ; Clear objects allocated to BANK0
  2007  00B1  3056               	movlw	low __pbssBANK0
  2008  00B2  0084               	movwf	4
  2009  00B3  3000               	movlw	high __pbssBANK0
  2010  00B4  0085               	movwf	5
  2011  00B5  3016               	movlw	22
  2012  00B6  318D  25FA  3180   	fcall	clear_ram0
  2013                           
  2014                           ; Clear objects allocated to BANK1
  2015  00B9  30A0               	movlw	low __pbssBANK1
  2016  00BA  0084               	movwf	4
  2017  00BB  3000               	movlw	high __pbssBANK1
  2018  00BC  0085               	movwf	5
  2019  00BD  304F               	movlw	79
  2020  00BE  318D  25FA  3180   	fcall	clear_ram0
  2021                           
  2022                           ; Initialize objects allocated to BANK0
  2023  00C1  318D  25F6  3180   	fcall	__pidataBANK0	;fetch initializer
  2024  00C4  00EC               	movwf	__pdataBANK0& (0+127)
  2025  00C5  318D  25F7  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2026  00C8  00ED               	movwf	(__pdataBANK0+1)& (0+127)
  2027  00C9  318D  25F8  3180   	fcall	__pidataBANK0+2	;fetch initializer
  2028  00CC  00EE               	movwf	(__pdataBANK0+2)& (0+127)
  2029  00CD  318D  25F9         	fcall	__pidataBANK0+3	;fetch initializer
  2030  00CF  00EF               	movwf	(__pdataBANK0+3)& (0+127)
  2031  00D0                     end_of_initialization:	
  2032                           ;End of C runtime variable initialization code
  2033                           
  2034  00D0                     __end_of__initialization:	
  2035  00D0  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2036  00D1  0020               	movlb	0
  2037  00D2  3180  28D4         	ljmp	_main	;jump to C main() function
  2038                           
  2039                           	psect	bssCOMMON
  2040  007A                     __pbssCOMMON:	
  2041  007A                     _tick_us1:	
  2042  007A                     	ds	4
  2043                           
  2044                           	psect	bssBANK0
  2045  0056                     __pbssBANK0:	
  2046  0056                     _PWMCounter:	
  2047  0056                     	ds	2
  2048  0058                     _TriacDelay:	
  2049  0058                     	ds	2
  2050  005A                     _triacCounter:	
  2051  005A                     	ds	2
  2052  005C                     _sens:	
  2053  005C                     	ds	16
  2054                           
  2055                           	psect	dataBANK0
  2056  006C                     __pdataBANK0:	
  2057  006C                     _ADC_intF:	
  2058  006C                     	ds	2
  2059  006E                     _PWMDC:	
  2060  006E                     	ds	2
  2061                           
  2062                           	psect	bssBANK1
  2063  00A0                     __pbssBANK1:	
  2064  00A0                     LCD_WriteNumber@numstr:	
  2065  00A0                     	ds	10
  2066  00AA                     _rh:	
  2067  00AA                     	ds	8
  2068  00B2                     _temp:	
  2069  00B2                     	ds	8
  2070  00BA                     _ledFlashTimer:	
  2071  00BA                     	ds	4
  2072  00BE                     _potDivider:	
  2073  00BE                     	ds	4
  2074  00C2                     _sensorReadTimer:	
  2075  00C2                     	ds	4
  2076  00C6                     _fanspeed:	
  2077  00C6                     	ds	2
  2078  00C8                     _timer24overflow:	
  2079  00C8                     	ds	2
  2080  00CA                     _rhString:	
  2081  00CA                     	ds	16
  2082  00DA                     _tempString:	
  2083  00DA                     	ds	16
  2084  00EA                     _RHT_data:	
  2085  00EA                     	ds	5
  2086                           
  2087                           	psect	clrtext
  2088  0DFA                     clear_ram0:	
  2089                           ;	Called with FSR0 containing the base address, and
  2090                           ;	WREG with the size to clear
  2091                           
  2092  0DFA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2093  0DFB                     clrloop0:	
  2094  0DFB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2095  0DFC  3101               	addfsr 0,1
  2096  0DFD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2097  0DFE  2DFB               	goto	clrloop0	;have we reached the end yet?
  2098  0DFF  3400               	retlw	0	;all done for this memory range, return
  2099                           
  2100                           	psect	cstackCOMMON
  2101  0070                     __pcstackCOMMON:	
  2102  0070                     ?_SetClockSpeed:	
  2103  0070                     ?_LCD_Initialize:	
  2104                           ; 0 bytes @ 0x0
  2105                           
  2106  0070                     ?_LCD_Clear:	
  2107                           ; 0 bytes @ 0x0
  2108                           
  2109  0070                     ?_LCD_WriteString:	
  2110                           ; 0 bytes @ 0x0
  2111                           
  2112  0070                     ?_LCD_GoTo:	
  2113                           ; 0 bytes @ 0x0
  2114                           
  2115  0070                     ?_init_adc:	
  2116                           ; 0 bytes @ 0x0
  2117                           
  2118  0070                     ?_tc_int:	
  2119                           ; 0 bytes @ 0x0
  2120                           
  2121  0070                     ?_LCD_Clock:	
  2122                           ; 0 bytes @ 0x0
  2123                           
  2124  0070                     ?_LCD_Write:	
  2125                           ; 0 bytes @ 0x0
  2126                           
  2127  0070                     ?_RHT_readData:	
  2128                           ; 0 bytes @ 0x0
  2129                           
  2130  0070                     ?_RHT_start:	
  2131                           ; 1 bytes @ 0x0
  2132                           
  2133  0070                     ?_adc_convert:	
  2134                           ; 1 bytes @ 0x0
  2135                           
  2136  0070                     ?_main:	
  2137                           ; 2 bytes @ 0x0
  2138                           
  2139  0070                     adc_convert@pChannel:	
  2140                           ; 2 bytes @ 0x0
  2141                           
  2142                           
  2143                           ; 2 bytes @ 0x0
  2144  0070                     	ds	2
  2145  0072                     adc_convert@notSigned:	
  2146                           
  2147                           ; 1 bytes @ 0x2
  2148  0072                     	ds	1
  2149  0073                     ??_adc_convert:	
  2150                           
  2151                           ; 0 bytes @ 0x3
  2152  0073                     	ds	1
  2153  0074                     adc_convert@temp:	
  2154                           
  2155                           ; 1 bytes @ 0x4
  2156  0074                     	ds	1
  2157  0075                     ??_tc_int:	
  2158                           
  2159                           ; 0 bytes @ 0x5
  2160  0075                     	ds	5
  2161                           
  2162                           	psect	cstackBANK0
  2163  0020                     __pcstackBANK0:	
  2164  0020                     ??_SetClockSpeed:	
  2165  0020                     ??_init_adc:	
  2166                           ; 0 bytes @ 0x0
  2167                           
  2168  0020                     ??_LCD_Clock:	
  2169                           ; 0 bytes @ 0x0
  2170                           
  2171  0020                     ??_RHT_start:	
  2172                           ; 0 bytes @ 0x0
  2173                           
  2174  0020                     ?_RHT_readByte:	
  2175                           ; 0 bytes @ 0x0
  2176                           
  2177  0020                     ?___bmul:	
  2178                           ; 1 bytes @ 0x0
  2179                           
  2180  0020                     ?_CheckTick24Timer:	
  2181                           ; 1 bytes @ 0x0
  2182                           
  2183  0020                     ?___wmul:	
  2184                           ; 2 bytes @ 0x0
  2185                           
  2186  0020                     ?___awmod:	
  2187                           ; 2 bytes @ 0x0
  2188                           
  2189  0020                     ?___lwdiv:	
  2190                           ; 2 bytes @ 0x0
  2191                           
  2192  0020                     ?_Tick24BitTimer:	
  2193                           ; 2 bytes @ 0x0
  2194                           
  2195  0020                     ?___lmul:	
  2196                           ; 4 bytes @ 0x0
  2197                           
  2198  0020                     RHT_readByte@port:	
  2199                           ; 4 bytes @ 0x0
  2200                           
  2201  0020                     ___bmul@multiplicand:	
  2202                           ; 1 bytes @ 0x0
  2203                           
  2204  0020                     ___wmul@multiplier:	
  2205                           ; 1 bytes @ 0x0
  2206                           
  2207  0020                     ___awmod@divisor:	
  2208                           ; 2 bytes @ 0x0
  2209                           
  2210  0020                     ___lwdiv@divisor:	
  2211                           ; 2 bytes @ 0x0
  2212                           
  2213  0020                     Tick24BitTimer@timer4:	
  2214                           ; 2 bytes @ 0x0
  2215                           
  2216  0020                     CheckTick24Timer@timeout:	
  2217                           ; 4 bytes @ 0x0
  2218                           
  2219  0020                     ___lmul@multiplier:	
  2220                           ; 4 bytes @ 0x0
  2221                           
  2222                           
  2223                           ; 4 bytes @ 0x0
  2224  0020                     	ds	1
  2225  0021                     ??_LCD_Write:	
  2226  0021                     ??_RHT_readByte:	
  2227                           ; 0 bytes @ 0x1
  2228                           
  2229  0021                     ??___bmul:	
  2230                           ; 0 bytes @ 0x1
  2231                           
  2232                           
  2233                           ; 0 bytes @ 0x1
  2234  0021                     	ds	1
  2235  0022                     RHT_start@port:	
  2236  0022                     ___bmul@product:	
  2237                           ; 1 bytes @ 0x2
  2238                           
  2239  0022                     ___wmul@multiplicand:	
  2240                           ; 1 bytes @ 0x2
  2241                           
  2242  0022                     ___awmod@dividend:	
  2243                           ; 2 bytes @ 0x2
  2244                           
  2245  0022                     ___lwdiv@dividend:	
  2246                           ; 2 bytes @ 0x2
  2247                           
  2248                           
  2249                           ; 2 bytes @ 0x2
  2250  0022                     	ds	1
  2251  0023                     LCD_Write@c:	
  2252  0023                     RHT_readByte@out:	
  2253                           ; 1 bytes @ 0x3
  2254                           
  2255  0023                     ___bmul@multiplier:	
  2256                           ; 1 bytes @ 0x3
  2257                           
  2258  0023                     RHT_start@timeout:	
  2259                           ; 1 bytes @ 0x3
  2260                           
  2261                           
  2262                           ; 2 bytes @ 0x3
  2263  0023                     	ds	1
  2264  0024                     ??_Tick24BitTimer:	
  2265  0024                     ??_LCD_Initialize:	
  2266                           ; 0 bytes @ 0x4
  2267                           
  2268  0024                     ??_CheckTick24Timer:	
  2269                           ; 0 bytes @ 0x4
  2270                           
  2271  0024                     ??_LCD_Clear:	
  2272                           ; 0 bytes @ 0x4
  2273                           
  2274  0024                     ??_LCD_GoTo:	
  2275                           ; 0 bytes @ 0x4
  2276                           
  2277  0024                     ??___wmul:	
  2278                           ; 0 bytes @ 0x4
  2279                           
  2280  0024                     ??___awmod:	
  2281                           ; 0 bytes @ 0x4
  2282                           
  2283  0024                     ??___lwdiv:	
  2284                           ; 0 bytes @ 0x4
  2285                           
  2286  0024                     RHT_readByte@tempBit:	
  2287                           ; 0 bytes @ 0x4
  2288                           
  2289  0024                     ___wmul@product:	
  2290                           ; 1 bytes @ 0x4
  2291                           
  2292  0024                     ___lmul@multiplicand:	
  2293                           ; 2 bytes @ 0x4
  2294                           
  2295                           
  2296                           ; 4 bytes @ 0x4
  2297  0024                     	ds	1
  2298  0025                     RHT_readByte@tempByte:	
  2299  0025                     ___awmod@counter:	
  2300                           ; 1 bytes @ 0x5
  2301                           
  2302  0025                     RHT_start@mask:	
  2303                           ; 1 bytes @ 0x5
  2304                           
  2305  0025                     ___lwdiv@quotient:	
  2306                           ; 2 bytes @ 0x5
  2307                           
  2308                           
  2309                           ; 2 bytes @ 0x5
  2310  0025                     	ds	1
  2311  0026                     ?___awdiv:	
  2312  0026                     LCD_GoTo@P:	
  2313                           ; 2 bytes @ 0x6
  2314                           
  2315  0026                     RHT_readByte@i:	
  2316                           ; 1 bytes @ 0x6
  2317                           
  2318  0026                     ___awmod@sign:	
  2319                           ; 1 bytes @ 0x6
  2320                           
  2321  0026                     ___awdiv@divisor:	
  2322                           ; 1 bytes @ 0x6
  2323                           
  2324                           
  2325                           ; 2 bytes @ 0x6
  2326  0026                     	ds	1
  2327  0027                     ??_LCD_WriteString:	
  2328  0027                     ___lwdiv@counter:	
  2329                           ; 0 bytes @ 0x7
  2330                           
  2331  0027                     RHT_readByte@timeout:	
  2332                           ; 1 bytes @ 0x7
  2333                           
  2334                           
  2335                           ; 2 bytes @ 0x7
  2336  0027                     	ds	1
  2337  0028                     ??___lmul:	
  2338  0028                     ?___lwmod:	
  2339                           ; 0 bytes @ 0x8
  2340                           
  2341  0028                     LCD_WriteString@s:	
  2342                           ; 2 bytes @ 0x8
  2343                           
  2344  0028                     ___awdiv@dividend:	
  2345                           ; 1 bytes @ 0x8
  2346                           
  2347  0028                     ___lwmod@divisor:	
  2348                           ; 2 bytes @ 0x8
  2349                           
  2350  0028                     Tick24BitTimer@temp:	
  2351                           ; 2 bytes @ 0x8
  2352                           
  2353  0028                     ___lmul@product:	
  2354                           ; 4 bytes @ 0x8
  2355                           
  2356                           
  2357                           ; 4 bytes @ 0x8
  2358  0028                     	ds	1
  2359  0029                     RHT_readByte@mask:	
  2360                           
  2361                           ; 2 bytes @ 0x9
  2362  0029                     	ds	1
  2363  002A                     ??___awdiv:	
  2364  002A                     ___lwmod@dividend:	
  2365                           ; 0 bytes @ 0xA
  2366                           
  2367                           
  2368                           ; 2 bytes @ 0xA
  2369  002A                     	ds	1
  2370  002B                     ??_RHT_readData:	
  2371  002B                     ___awdiv@counter:	
  2372                           ; 0 bytes @ 0xB
  2373                           
  2374                           
  2375                           ; 1 bytes @ 0xB
  2376  002B                     	ds	1
  2377  002C                     ??___lwmod:	
  2378  002C                     ?___lldiv:	
  2379                           ; 0 bytes @ 0xC
  2380                           
  2381  002C                     ___awdiv@sign:	
  2382                           ; 4 bytes @ 0xC
  2383                           
  2384  002C                     ___lldiv@divisor:	
  2385                           ; 1 bytes @ 0xC
  2386                           
  2387                           
  2388                           ; 4 bytes @ 0xC
  2389  002C                     	ds	1
  2390  002D                     ___lwmod@counter:	
  2391  002D                     ___awdiv@quotient:	
  2392                           ; 1 bytes @ 0xD
  2393                           
  2394                           
  2395                           ; 2 bytes @ 0xD
  2396  002D                     	ds	1
  2397  002E                     RHT_readData@checksum:	
  2398                           
  2399                           ; 1 bytes @ 0xE
  2400  002E                     	ds	1
  2401  002F                     ?_Triac_Counter:	
  2402  002F                     ?_PWM_Counter:	
  2403                           ; 2 bytes @ 0xF
  2404                           
  2405  002F                     ?_sprintf:	
  2406                           ; 2 bytes @ 0xF
  2407                           
  2408  002F                     RHT_readData@error:	
  2409                           ; 2 bytes @ 0xF
  2410                           
  2411  002F                     Triac_Counter@speed:	
  2412                           ; 1 bytes @ 0xF
  2413                           
  2414  002F                     PWM_Counter@speed:	
  2415                           ; 2 bytes @ 0xF
  2416                           
  2417  002F                     sprintf@f:	
  2418                           ; 2 bytes @ 0xF
  2419                           
  2420                           
  2421                           ; 2 bytes @ 0xF
  2422  002F                     	ds	1
  2423  0030                     RHT_readData@port:	
  2424  0030                     ___lldiv@dividend:	
  2425                           ; 1 bytes @ 0x10
  2426                           
  2427                           
  2428                           ; 4 bytes @ 0x10
  2429  0030                     	ds	1
  2430  0031                     RHT_readData@i:	
  2431  0031                     Triac_Counter@maxCount:	
  2432                           ; 2 bytes @ 0x11
  2433                           
  2434  0031                     PWM_Counter@invert:	
  2435                           ; 2 bytes @ 0x11
  2436                           
  2437                           
  2438                           ; 2 bytes @ 0x11
  2439  0031                     	ds	2
  2440  0033                     ??_PWM_Counter:	
  2441  0033                     Triac_Counter@zeroDelay:	
  2442                           ; 0 bytes @ 0x13
  2443                           
  2444                           
  2445                           ; 2 bytes @ 0x13
  2446  0033                     	ds	1
  2447  0034                     ??___lldiv:	
  2448                           
  2449                           ; 0 bytes @ 0x14
  2450  0034                     	ds	1
  2451  0035                     ??_Triac_Counter:	
  2452  0035                     ??_sprintf:	
  2453                           ; 0 bytes @ 0x15
  2454                           
  2455  0035                     ___lldiv@quotient:	
  2456                           ; 0 bytes @ 0x15
  2457                           
  2458                           
  2459                           ; 4 bytes @ 0x15
  2460  0035                     	ds	4
  2461  0039                     sprintf@ap:	
  2462  0039                     ___lldiv@counter:	
  2463                           ; 1 bytes @ 0x19
  2464                           
  2465                           
  2466                           ; 1 bytes @ 0x19
  2467  0039                     	ds	1
  2468  003A                     sprintf@flag:	
  2469                           
  2470                           ; 1 bytes @ 0x1A
  2471  003A                     	ds	1
  2472  003B                     sprintf@prec:	
  2473                           
  2474                           ; 1 bytes @ 0x1B
  2475  003B                     	ds	1
  2476  003C                     sprintf@_val:	
  2477                           
  2478                           ; 4 bytes @ 0x1C
  2479  003C                     	ds	4
  2480  0040                     sprintf@sp:	
  2481                           
  2482                           ; 1 bytes @ 0x20
  2483  0040                     	ds	1
  2484  0041                     sprintf@c:	
  2485                           
  2486                           ; 1 bytes @ 0x21
  2487  0041                     	ds	1
  2488  0042                     ??_main:	
  2489                           
  2490                           ; 0 bytes @ 0x22
  2491  0042                     	ds	3
  2492  0045                     main@i:	
  2493                           
  2494                           ; 2 bytes @ 0x25
  2495  0045                     	ds	2
  2496  0047                     main@ADCDelay:	
  2497                           
  2498                           ; 4 bytes @ 0x27
  2499  0047                     	ds	4
  2500  004B                     main@error_counter:	
  2501                           
  2502                           ; 2 bytes @ 0x2B
  2503  004B                     	ds	2
  2504  004D                     main@sensorDelay:	
  2505                           
  2506                           ; 4 bytes @ 0x2D
  2507  004D                     	ds	4
  2508  0051                     main@sensor_er_no:	
  2509                           
  2510                           ; 1 bytes @ 0x31
  2511  0051                     	ds	1
  2512  0052                     main@speed:	
  2513                           
  2514                           ; 2 bytes @ 0x32
  2515  0052                     	ds	2
  2516  0054                     main@error:	
  2517                           
  2518                           ; 1 bytes @ 0x34
  2519  0054                     	ds	1
  2520  0055                     main@sensorPort:	
  2521                           
  2522                           ; 1 bytes @ 0x35
  2523  0055                     	ds	1
  2524                           
  2525                           	psect	maintext
  2526  00D4                     __pmaintext:	
  2527 ;;
  2528 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2529 ;;
  2530 ;; *************** function _main *****************
  2531 ;; Defined at:
  2532 ;;		line 75 in file "main.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;		None
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  sensorDelay     4   45[BANK0 ] unsigned long 
  2537 ;;  ADCDelay        4   39[BANK0 ] unsigned long 
  2538 ;;  speed           2   50[BANK0 ] int 
  2539 ;;  error_counte    2   43[BANK0 ] unsigned int 
  2540 ;;  i               2   37[BANK0 ] unsigned int 
  2541 ;;  sensorPort      1   53[BANK0 ] unsigned char 
  2542 ;;  error           1   52[BANK0 ] enum E4931
  2543 ;;  sensor_er_no    1   49[BANK0 ] unsigned char 
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  2   92[COMMON] int 
  2546 ;; Registers used:
  2547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : 17F/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2553 ;;      Params:         0       0       0       0       0       0       0       0
  2554 ;;      Locals:         0      17       0       0       0       0       0       0
  2555 ;;      Temps:          0       3       0       0       0       0       0       0
  2556 ;;      Totals:         0      20       0       0       0       0       0       0
  2557 ;;Total ram usage:       20 bytes
  2558 ;; Hardware stack levels required when called:    6
  2559 ;; This function calls:
  2560 ;;		_CheckTick24Timer
  2561 ;;		_LCD_Clear
  2562 ;;		_LCD_Initialize
  2563 ;;		_LCD_WriteString
  2564 ;;		_PWM_Counter
  2565 ;;		_RHT_readData
  2566 ;;		_SetClockSpeed
  2567 ;;		_Tick24BitTimer
  2568 ;;		_Triac_Counter
  2569 ;;		___awdiv
  2570 ;;		___awmod
  2571 ;;		___bmul
  2572 ;;		___lldiv
  2573 ;;		___lmul
  2574 ;;		___wmul
  2575 ;;		_init_adc
  2576 ;;		_sprintf
  2577 ;; This function is called by:
  2578 ;;		Startup code after reset
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _main
  2584  00D4                     _main:	
  2585                           
  2586                           ;main.c: 76: NB_TIMER_ sensorDelay = Tick24BitTimer(64000);
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2590  00D4  3000               	movlw	0
  2591  00D5  0020               	movlb	0	; select bank0
  2592  00D6  00A3               	movwf	Tick24BitTimer@timer4+3
  2593  00D7  3000               	movlw	0
  2594  00D8  00A2               	movwf	Tick24BitTimer@timer4+2
  2595  00D9  30FA               	movlw	250
  2596  00DA  00A1               	movwf	Tick24BitTimer@timer4+1
  2597  00DB  3000               	movlw	0
  2598  00DC  00A0               	movwf	Tick24BitTimer@timer4
  2599  00DD  3186  2677  3180   	fcall	_Tick24BitTimer
  2600  00E0  0020               	movlb	0	; select bank0
  2601  00E1  0823               	movf	?_Tick24BitTimer+3,w
  2602  00E2  00D0               	movwf	main@sensorDelay+3
  2603  00E3  0822               	movf	?_Tick24BitTimer+2,w
  2604  00E4  00CF               	movwf	main@sensorDelay+2
  2605  00E5  0821               	movf	?_Tick24BitTimer+1,w
  2606  00E6  00CE               	movwf	main@sensorDelay+1
  2607  00E7  0820               	movf	?_Tick24BitTimer,w
  2608  00E8  00CD               	movwf	main@sensorDelay
  2609                           
  2610                           ;main.c: 77: NB_TIMER_ ADCDelay = Tick24BitTimer(64000);
  2611  00E9  3000               	movlw	0
  2612  00EA  00A3               	movwf	Tick24BitTimer@timer4+3
  2613  00EB  3000               	movlw	0
  2614  00EC  00A2               	movwf	Tick24BitTimer@timer4+2
  2615  00ED  30FA               	movlw	250
  2616  00EE  00A1               	movwf	Tick24BitTimer@timer4+1
  2617  00EF  3000               	movlw	0
  2618  00F0  00A0               	movwf	Tick24BitTimer@timer4
  2619  00F1  3186  2677  3180   	fcall	_Tick24BitTimer
  2620  00F4  0020               	movlb	0	; select bank0
  2621  00F5  0823               	movf	?_Tick24BitTimer+3,w
  2622  00F6  00CA               	movwf	main@ADCDelay+3
  2623  00F7  0822               	movf	?_Tick24BitTimer+2,w
  2624  00F8  00C9               	movwf	main@ADCDelay+2
  2625  00F9  0821               	movf	?_Tick24BitTimer+1,w
  2626  00FA  00C8               	movwf	main@ADCDelay+1
  2627  00FB  0820               	movf	?_Tick24BitTimer,w
  2628  00FC  00C7               	movwf	main@ADCDelay
  2629                           
  2630                           ;main.c: 78: unsigned int i = 0;
  2631  00FD  01C5               	clrf	main@i
  2632  00FE  01C6               	clrf	main@i+1
  2633                           
  2634                           ;main.c: 79: char sensorPort = 0;
  2635  00FF  01D5               	clrf	main@sensorPort
  2636                           
  2637                           ;main.c: 82: RHT_ERR_t error;
  2638                           ;main.c: 84: TRISBbits.TRISB = 0b11100001;
  2639  0100  0021               	movlb	1	; select bank1
  2640  0101  080D               	movf	13,w	;volatile
  2641  0102  3900               	andlw	-256
  2642  0103  38E1               	iorlw	225
  2643  0104  008D               	movwf	13	;volatile
  2644                           
  2645                           ;main.c: 85: TRISAbits.TRISA = 0b00100000;
  2646  0105  080C               	movf	12,w	;volatile
  2647  0106  3900               	andlw	-256
  2648  0107  3820               	iorlw	32
  2649  0108  008C               	movwf	12	;volatile
  2650                           
  2651                           ;main.c: 86: ANSELBbits.ANSELB = 0b00000000;
  2652  0109  30C0               	movlw	-64
  2653  010A  0023               	movlb	3	; select bank3
  2654  010B  058D               	andwf	13,f	;volatile
  2655                           
  2656                           ;main.c: 87: ANSELAbits.ANSELA = 0b00000000;
  2657  010C  3000               	movlw	-256
  2658  010D  058C               	andwf	12,f	;volatile
  2659                           
  2660                           ;main.c: 94: ANSELAbits.ANSA5 = 0b1;
  2661  010E  168C               	bsf	12,5	;volatile
  2662                           
  2663                           ;main.c: 108: OPTION_REGbits.TMR0CS = 0;
  2664  010F  0021               	movlb	1	; select bank1
  2665  0110  1295               	bcf	21,5	;volatile
  2666                           
  2667                           ;main.c: 109: OPTION_REGbits.TMR0SE = 0;
  2668  0111  1215               	bcf	21,4	;volatile
  2669                           
  2670                           ;main.c: 110: OPTION_REGbits.INTEDG = 1;
  2671  0112  1715               	bsf	21,6	;volatile
  2672                           
  2673                           ;main.c: 111: INTCONbits.TMR0IE = 1;
  2674  0113  168B               	bsf	11,5	;volatile
  2675                           
  2676                           ;main.c: 112: OPTION_REGbits.PSA =1;
  2677  0114  1595               	bsf	21,3	;volatile
  2678                           
  2679                           ;main.c: 114: init_adc();
  2680  0115  318E  2611  3180   	fcall	_init_adc
  2681                           
  2682                           ;main.c: 116: SetClockSpeed();
  2683  0118  318E  2600  3180   	fcall	_SetClockSpeed
  2684                           
  2685                           ;main.c: 117: _delay((unsigned long)((50)*(32000000/4000.0)));
  2686  011B  3003               	movlw	3
  2687  011C  0020               	movlb	0	; select bank0
  2688  011D  00C4               	movwf	??_main+2
  2689  011E  3008               	movlw	8
  2690  011F  00C3               	movwf	??_main+1
  2691  0120  3078               	movlw	120
  2692  0121  00C2               	movwf	??_main
  2693  0122                     u3297:	
  2694  0122  0BC2               	decfsz	??_main,f
  2695  0123  2922               	goto	u3297
  2696  0124  0BC3               	decfsz	??_main+1,f
  2697  0125  2922               	goto	u3297
  2698  0126  0BC4               	decfsz	??_main+2,f
  2699  0127  2922               	goto	u3297
  2700                           
  2701                           ;main.c: 118: LCD_Initialize();
  2702  0128  3186  2619  3180   	fcall	_LCD_Initialize
  2703                           
  2704                           ;main.c: 120: INTCONbits.INTE = 1;
  2705  012B  160B               	bsf	11,4	;volatile
  2706                           
  2707                           ;main.c: 121: INTCONbits. GIE = 1;
  2708  012C  178B               	bsf	11,7	;volatile
  2709                           
  2710                           ;main.c: 123: int speed = 0;
  2711  012D  0020               	movlb	0	; select bank0
  2712  012E  01D2               	clrf	main@speed
  2713  012F  01D3               	clrf	main@speed+1
  2714                           
  2715                           ;main.c: 124: unsigned int error_counter = 0;
  2716  0130  01CB               	clrf	main@error_counter
  2717  0131  01CC               	clrf	main@error_counter+1
  2718                           
  2719                           ;main.c: 125: unsigned char sensor_er_no = 50;
  2720  0132  3032               	movlw	50
  2721  0133  00C2               	movwf	??_main
  2722  0134  0842               	movf	??_main,w
  2723  0135  00D1               	movwf	main@sensor_er_no
  2724  0136                     l2835:	
  2725                           ;main.c: 127: while(1){
  2726                           
  2727                           
  2728                           ;main.c: 131: speed = (potDivider*100/4095);
  2729  0136  3000               	movlw	0
  2730  0137  00AF               	movwf	___lldiv@divisor+3
  2731  0138  3000               	movlw	0
  2732  0139  00AE               	movwf	___lldiv@divisor+2
  2733  013A  300F               	movlw	15
  2734  013B  00AD               	movwf	___lldiv@divisor+1
  2735  013C  30FF               	movlw	255
  2736  013D  00AC               	movwf	___lldiv@divisor
  2737  013E  0021               	movlb	1	; select bank1
  2738  013F  0841               	movf	(_potDivider+3)^(0+128),w
  2739  0140  0020               	movlb	0	; select bank0
  2740  0141  00A3               	movwf	___lmul@multiplier+3
  2741  0142  0021               	movlb	1	; select bank1
  2742  0143  0840               	movf	(_potDivider+2)^(0+128),w
  2743  0144  0020               	movlb	0	; select bank0
  2744  0145  00A2               	movwf	___lmul@multiplier+2
  2745  0146  0021               	movlb	1	; select bank1
  2746  0147  083F               	movf	(_potDivider+1)^(0+128),w
  2747  0148  0020               	movlb	0	; select bank0
  2748  0149  00A1               	movwf	___lmul@multiplier+1
  2749  014A  0021               	movlb	1	; select bank1
  2750  014B  083E               	movf	_potDivider^(0+128),w
  2751  014C  0020               	movlb	0	; select bank0
  2752  014D  00A0               	movwf	___lmul@multiplier
  2753  014E  3000               	movlw	0
  2754  014F  00A7               	movwf	___lmul@multiplicand+3
  2755  0150  3000               	movlw	0
  2756  0151  00A6               	movwf	___lmul@multiplicand+2
  2757  0152  3000               	movlw	0
  2758  0153  00A5               	movwf	___lmul@multiplicand+1
  2759  0154  3064               	movlw	100
  2760  0155  00A4               	movwf	___lmul@multiplicand
  2761  0156  318E  26BF  3180   	fcall	___lmul
  2762  0159  0020               	movlb	0	; select bank0
  2763  015A  0823               	movf	?___lmul+3,w
  2764  015B  00B3               	movwf	___lldiv@dividend+3
  2765  015C  0822               	movf	?___lmul+2,w
  2766  015D  00B2               	movwf	___lldiv@dividend+2
  2767  015E  0821               	movf	?___lmul+1,w
  2768  015F  00B1               	movwf	___lldiv@dividend+1
  2769  0160  0820               	movf	?___lmul,w
  2770  0161  00B0               	movwf	___lldiv@dividend
  2771  0162  3187  277E  3180   	fcall	___lldiv
  2772  0165  0020               	movlb	0	; select bank0
  2773  0166  082D               	movf	?___lldiv+1,w
  2774  0167  01D3               	clrf	main@speed+1
  2775  0168  07D3               	addwf	main@speed+1,f
  2776  0169  082C               	movf	?___lldiv,w
  2777  016A  01D2               	clrf	main@speed
  2778  016B  07D2               	addwf	main@speed,f
  2779                           
  2780                           ;main.c: 132: TriacDelay = Triac_Counter(speed, 320, 50);
  2781  016C  0853               	movf	main@speed+1,w
  2782  016D  01B0               	clrf	Triac_Counter@speed+1
  2783  016E  07B0               	addwf	Triac_Counter@speed+1,f
  2784  016F  0852               	movf	main@speed,w
  2785  0170  01AF               	clrf	Triac_Counter@speed
  2786  0171  07AF               	addwf	Triac_Counter@speed,f
  2787  0172  3040               	movlw	64
  2788  0173  00B1               	movwf	Triac_Counter@maxCount
  2789  0174  3001               	movlw	1
  2790  0175  00B2               	movwf	Triac_Counter@maxCount+1
  2791  0176  3032               	movlw	50
  2792  0177  00B3               	movwf	Triac_Counter@zeroDelay
  2793  0178  3000               	movlw	0
  2794  0179  00B4               	movwf	Triac_Counter@zeroDelay+1
  2795  017A  318F  2726  3180   	fcall	_Triac_Counter
  2796  017D  0020               	movlb	0	; select bank0
  2797  017E  0830               	movf	?_Triac_Counter+1,w
  2798  017F  01D9               	clrf	_TriacDelay+1
  2799  0180  07D9               	addwf	_TriacDelay+1,f
  2800  0181  082F               	movf	?_Triac_Counter,w
  2801  0182  01D8               	clrf	_TriacDelay
  2802  0183  07D8               	addwf	_TriacDelay,f
  2803                           
  2804                           ;main.c: 133: PWMDC = PWM_Counter(speed, 0);
  2805  0184  0853               	movf	main@speed+1,w
  2806  0185  01B0               	clrf	PWM_Counter@speed+1
  2807  0186  07B0               	addwf	PWM_Counter@speed+1,f
  2808  0187  0852               	movf	main@speed,w
  2809  0188  01AF               	clrf	PWM_Counter@speed
  2810  0189  07AF               	addwf	PWM_Counter@speed,f
  2811  018A  3000               	movlw	0
  2812  018B  00B1               	movwf	PWM_Counter@invert
  2813  018C  3000               	movlw	0
  2814  018D  00B2               	movwf	PWM_Counter@invert+1
  2815  018E  318F  27AF  3180   	fcall	_PWM_Counter
  2816  0191  0020               	movlb	0	; select bank0
  2817  0192  0830               	movf	?_PWM_Counter+1,w
  2818  0193  01EF               	clrf	_PWMDC+1
  2819  0194  07EF               	addwf	_PWMDC+1,f
  2820  0195  082F               	movf	?_PWM_Counter,w
  2821  0196  01EE               	clrf	_PWMDC
  2822  0197  07EE               	addwf	_PWMDC,f
  2823                           
  2824                           ;main.c: 136: if(CheckTick24Timer(sensorDelay)){
  2825  0198  0850               	movf	main@sensorDelay+3,w
  2826  0199  00A3               	movwf	CheckTick24Timer@timeout+3
  2827  019A  084F               	movf	main@sensorDelay+2,w
  2828  019B  00A2               	movwf	CheckTick24Timer@timeout+2
  2829  019C  084E               	movf	main@sensorDelay+1,w
  2830  019D  00A1               	movwf	CheckTick24Timer@timeout+1
  2831  019E  084D               	movf	main@sensorDelay,w
  2832  019F  00A0               	movwf	CheckTick24Timer@timeout
  2833  01A0  3186  26D1  3180   	fcall	_CheckTick24Timer
  2834  01A3  0020               	movlb	0	; select bank0
  2835  01A4  0821               	movf	?_CheckTick24Timer+1,w
  2836  01A5  0420               	iorwf	?_CheckTick24Timer,w
  2837  01A6  1903               	skipnz
  2838  01A7  2AB8               	goto	l2899
  2839                           
  2840                           ;main.c: 162: for(sensorPort=0;sensorPort<4;sensorPort++){
  2841  01A8  01D5               	clrf	main@sensorPort
  2842  01A9  3004               	movlw	4
  2843  01AA  0255               	subwf	main@sensorPort,w
  2844  01AB  1803               	btfsc	3,0
  2845  01AC  2AB8               	goto	l2899
  2846  01AD                     l2849:	
  2847                           
  2848                           ;main.c: 163: error = 0;
  2849  01AD  01D4               	clrf	main@error
  2850                           
  2851                           ;main.c: 164: error = RHT_readData(sensorPort);
  2852  01AE  0855               	movf	main@sensorPort,w
  2853  01AF  3183  23B4  3180   	fcall	_RHT_readData
  2854  01B2  0020               	movlb	0	; select bank0
  2855  01B3  00C2               	movwf	??_main
  2856  01B4  0842               	movf	??_main,w
  2857  01B5  00D4               	movwf	main@error
  2858                           
  2859                           ;main.c: 169: if (error == ERR_OK) {
  2860  01B6  08D4               	movf	main@error,f
  2861  01B7  1D03               	skipz
  2862  01B8  2A5C               	goto	l2875
  2863                           
  2864                           ;main.c: 171: sensorDelay = Tick24BitTimer(64000);
  2865  01B9  3000               	movlw	0
  2866  01BA  00A3               	movwf	Tick24BitTimer@timer4+3
  2867  01BB  3000               	movlw	0
  2868  01BC  00A2               	movwf	Tick24BitTimer@timer4+2
  2869  01BD  30FA               	movlw	250
  2870  01BE  00A1               	movwf	Tick24BitTimer@timer4+1
  2871  01BF  3000               	movlw	0
  2872  01C0  00A0               	movwf	Tick24BitTimer@timer4
  2873  01C1  3186  2677  3180   	fcall	_Tick24BitTimer
  2874  01C4  0020               	movlb	0	; select bank0
  2875  01C5  0823               	movf	?_Tick24BitTimer+3,w
  2876  01C6  00D0               	movwf	main@sensorDelay+3
  2877  01C7  0822               	movf	?_Tick24BitTimer+2,w
  2878  01C8  00CF               	movwf	main@sensorDelay+2
  2879  01C9  0821               	movf	?_Tick24BitTimer+1,w
  2880  01CA  00CE               	movwf	main@sensorDelay+1
  2881  01CB  0820               	movf	?_Tick24BitTimer,w
  2882  01CC  00CD               	movwf	main@sensorDelay
  2883                           
  2884                           ;main.c: 177: PORTC = 0;
  2885  01CD  018E               	clrf	14	;volatile
  2886                           
  2887                           ;main.c: 179: LCD_Clear();
  2888  01CE  318E  2631  3180   	fcall	_LCD_Clear
  2889                           
  2890                           ;main.c: 181: sprintf(rhString, "%d %d\n", speed, sensor_er_no );
  2891  01D1  3017               	movlw	low (STR_1| (0+32768))
  2892  01D2  0020               	movlb	0	; select bank0
  2893  01D3  00AF               	movwf	sprintf@f
  2894  01D4  3088               	movlw	high (STR_1| (0+32768))
  2895  01D5  00B0               	movwf	sprintf@f+1
  2896  01D6  0853               	movf	main@speed+1,w
  2897  01D7  01B2               	clrf	?_sprintf+3
  2898  01D8  07B2               	addwf	?_sprintf+3,f
  2899  01D9  0852               	movf	main@speed,w
  2900  01DA  01B1               	clrf	?_sprintf+2
  2901  01DB  07B1               	addwf	?_sprintf+2,f
  2902  01DC  0851               	movf	main@sensor_er_no,w
  2903  01DD  00C2               	movwf	??_main
  2904  01DE  01C3               	clrf	??_main+1
  2905  01DF  0842               	movf	??_main,w
  2906  01E0  00B3               	movwf	?_sprintf+4
  2907  01E1  0843               	movf	??_main+1,w
  2908  01E2  00B4               	movwf	?_sprintf+5
  2909  01E3  30CA               	movlw	_rhString& (0+255)
  2910  01E4  3182  22E1  3180   	fcall	_sprintf
  2911                           
  2912                           ;main.c: 182: LCD_WriteString(rhString);
  2913  01E7  30CA               	movlw	_rhString& (0+255)
  2914  01E8  318E  2697  3180   	fcall	_LCD_WriteString
  2915                           
  2916                           ;main.c: 184: if (temp[0] < 0) {
  2917  01EB  0021               	movlb	1	; select bank1
  2918  01EC  1FB3               	btfss	(_temp+1)^(0+128),7
  2919  01ED  2A3E               	goto	l2871
  2920                           
  2921                           ;main.c: 185: temp[0] *= -1;
  2922  01EE  30FF               	movlw	255
  2923  01EF  0020               	movlb	0	; select bank0
  2924  01F0  00A0               	movwf	___wmul@multiplier
  2925  01F1  30FF               	movlw	255
  2926  01F2  00A1               	movwf	___wmul@multiplier+1
  2927  01F3  0021               	movlb	1	; select bank1
  2928  01F4  0833               	movf	(_temp+1)^(0+128),w
  2929  01F5  0020               	movlb	0	; select bank0
  2930  01F6  01A3               	clrf	___wmul@multiplicand+1
  2931  01F7  07A3               	addwf	___wmul@multiplicand+1,f
  2932  01F8  0021               	movlb	1	; select bank1
  2933  01F9  0832               	movf	_temp^(0+128),w
  2934  01FA  0020               	movlb	0	; select bank0
  2935  01FB  01A2               	clrf	___wmul@multiplicand
  2936  01FC  07A2               	addwf	___wmul@multiplicand,f
  2937  01FD  318E  2679  3180   	fcall	___wmul
  2938  0200  0020               	movlb	0	; select bank0
  2939  0201  0821               	movf	?___wmul+1,w
  2940  0202  0021               	movlb	1	; select bank1
  2941  0203  01B3               	clrf	(_temp+1)^(0+128)
  2942  0204  07B3               	addwf	(_temp+1)^(0+128),f
  2943  0205  0020               	movlb	0	; select bank0
  2944  0206  0820               	movf	?___wmul,w
  2945  0207  0021               	movlb	1	; select bank1
  2946  0208  01B2               	clrf	_temp^(0+128)
  2947  0209  07B2               	addwf	_temp^(0+128),f
  2948                           
  2949                           ;main.c: 186: sprintf(tempString, "T:  -%d.%d\r\n", temp[0] / 10, temp[0] % 10);
  2950  020A  300A               	movlw	low (STR_2| (0+32768))
  2951  020B  0020               	movlb	0	; select bank0
  2952  020C  00AF               	movwf	sprintf@f
  2953  020D  3088               	movlw	high (STR_2| (0+32768))
  2954  020E  00B0               	movwf	sprintf@f+1
  2955  020F  300A               	movlw	10
  2956  0210  00A6               	movwf	___awdiv@divisor
  2957  0211  3000               	movlw	0
  2958  0212  00A7               	movwf	___awdiv@divisor+1
  2959  0213  0021               	movlb	1	; select bank1
  2960  0214  0833               	movf	(_temp+1)^(0+128),w
  2961  0215  0020               	movlb	0	; select bank0
  2962  0216  01A9               	clrf	___awdiv@dividend+1
  2963  0217  07A9               	addwf	___awdiv@dividend+1,f
  2964  0218  0021               	movlb	1	; select bank1
  2965  0219  0832               	movf	_temp^(0+128),w
  2966  021A  0020               	movlb	0	; select bank0
  2967  021B  01A8               	clrf	___awdiv@dividend
  2968  021C  07A8               	addwf	___awdiv@dividend,f
  2969  021D  3187  272A  3180   	fcall	___awdiv
  2970  0220  0020               	movlb	0	; select bank0
  2971  0221  0827               	movf	?___awdiv+1,w
  2972  0222  01B2               	clrf	?_sprintf+3
  2973  0223  07B2               	addwf	?_sprintf+3,f
  2974  0224  0826               	movf	?___awdiv,w
  2975  0225  01B1               	clrf	?_sprintf+2
  2976  0226  07B1               	addwf	?_sprintf+2,f
  2977  0227  300A               	movlw	10
  2978  0228  00A0               	movwf	___awmod@divisor
  2979  0229  3000               	movlw	0
  2980  022A  00A1               	movwf	___awmod@divisor+1
  2981  022B  0021               	movlb	1	; select bank1
  2982  022C  0833               	movf	(_temp+1)^(0+128),w
  2983  022D  0020               	movlb	0	; select bank0
  2984  022E  01A3               	clrf	___awmod@dividend+1
  2985  022F  07A3               	addwf	___awmod@dividend+1,f
  2986  0230  0021               	movlb	1	; select bank1
  2987  0231  0832               	movf	_temp^(0+128),w
  2988  0232  0020               	movlb	0	; select bank0
  2989  0233  01A2               	clrf	___awmod@dividend
  2990  0234  07A2               	addwf	___awmod@dividend,f
  2991  0235  318F  2767  3180   	fcall	___awmod
  2992  0238  0020               	movlb	0	; select bank0
  2993  0239  0821               	movf	?___awmod+1,w
  2994  023A  01B4               	clrf	?_sprintf+5
  2995  023B  07B4               	addwf	?_sprintf+5,f
  2996  023C  0820               	movf	?___awmod,w
  2997  023D  2A51               	goto	L1
  2998  023E                     l2871:	
  2999                           ;main.c: 187: } else {
  3000                           
  3001                           
  3002                           ;main.c: 190: sprintf(tempString, "%d %d", temp[0], error_counter);
  3003  023E  301E               	movlw	low (STR_3| (0+32768))
  3004  023F  0020               	movlb	0	; select bank0
  3005  0240  00AF               	movwf	sprintf@f
  3006  0241  3088               	movlw	high (STR_3| (0+32768))
  3007  0242  00B0               	movwf	sprintf@f+1
  3008  0243  0021               	movlb	1	; select bank1
  3009  0244  0833               	movf	(_temp+1)^(0+128),w
  3010  0245  0020               	movlb	0	; select bank0
  3011  0246  01B2               	clrf	?_sprintf+3
  3012  0247  07B2               	addwf	?_sprintf+3,f
  3013  0248  0021               	movlb	1	; select bank1
  3014  0249  0832               	movf	_temp^(0+128),w
  3015  024A  0020               	movlb	0	; select bank0
  3016  024B  01B1               	clrf	?_sprintf+2
  3017  024C  07B1               	addwf	?_sprintf+2,f
  3018  024D  084C               	movf	main@error_counter+1,w
  3019  024E  01B4               	clrf	?_sprintf+5
  3020  024F  07B4               	addwf	?_sprintf+5,f
  3021  0250  084B               	movf	main@error_counter,w
  3022  0251                     L1:	
  3023  0251  01B3               	clrf	?_sprintf+4
  3024  0252  07B3               	addwf	?_sprintf+4,f
  3025  0253  30DA               	movlw	_tempString& (0+255)
  3026  0254  3182  22E1  3180   	fcall	_sprintf
  3027                           
  3028                           ;main.c: 191: }
  3029                           ;main.c: 192: LCD_WriteString(tempString);
  3030  0257  30DA               	movlw	_tempString& (0+255)
  3031  0258  318E  2697  3180   	fcall	_LCD_WriteString
  3032                           
  3033                           ;main.c: 194: } else if (error == ERR_CHECKSUM) {
  3034  025B  2AA2               	goto	l2893
  3035  025C                     l2875:	
  3036  025C  0020               	movlb	0	; select bank0
  3037  025D  0854               	movf	main@error,w
  3038  025E  3A05               	xorlw	5
  3039  025F  1D03               	skipz
  3040  0260  2A85               	goto	l2887
  3041                           
  3042                           ;main.c: 196: LCD_Clear();
  3043  0261  318E  2631  3180   	fcall	_LCD_Clear
  3044                           
  3045                           ;main.c: 197: sensorDelay = Tick24BitTimer(64000);
  3046  0264  3000               	movlw	0
  3047  0265  0020               	movlb	0	; select bank0
  3048  0266  00A3               	movwf	Tick24BitTimer@timer4+3
  3049  0267  3000               	movlw	0
  3050  0268  00A2               	movwf	Tick24BitTimer@timer4+2
  3051  0269  30FA               	movlw	250
  3052  026A  00A1               	movwf	Tick24BitTimer@timer4+1
  3053  026B  3000               	movlw	0
  3054  026C  00A0               	movwf	Tick24BitTimer@timer4
  3055  026D  3186  2677  3180   	fcall	_Tick24BitTimer
  3056  0270  0020               	movlb	0	; select bank0
  3057  0271  0823               	movf	?_Tick24BitTimer+3,w
  3058  0272  00D0               	movwf	main@sensorDelay+3
  3059  0273  0822               	movf	?_Tick24BitTimer+2,w
  3060  0274  00CF               	movwf	main@sensorDelay+2
  3061  0275  0821               	movf	?_Tick24BitTimer+1,w
  3062  0276  00CE               	movwf	main@sensorDelay+1
  3063  0277  0820               	movf	?_Tick24BitTimer,w
  3064  0278  00CD               	movwf	main@sensorDelay
  3065                           
  3066                           ;main.c: 198: sensor_er_no = sensorPort*3;
  3067  0279  3003               	movlw	3
  3068  027A  00C2               	movwf	??_main
  3069  027B  0842               	movf	??_main,w
  3070  027C  00A0               	movwf	___bmul@multiplicand
  3071  027D  0855               	movf	main@sensorPort,w
  3072  027E  318E  261F  3180   	fcall	___bmul
  3073  0281  0020               	movlb	0	; select bank0
  3074  0282  00C3               	movwf	??_main+1
  3075  0283  0843               	movf	??_main+1,w
  3076  0284  2A9C               	goto	L2
  3077  0285                     l2887:	
  3078                           ;main.c: 201: } else {
  3079                           
  3080                           ;main.c: 200: break;
  3081                           
  3082                           ;main.c: 199: error_counter++;
  3083                           
  3084                           
  3085                           ;main.c: 204: sensorDelay = Tick24BitTimer(64000);
  3086  0285  3000               	movlw	0
  3087  0286  00A3               	movwf	Tick24BitTimer@timer4+3
  3088  0287  3000               	movlw	0
  3089  0288  00A2               	movwf	Tick24BitTimer@timer4+2
  3090  0289  30FA               	movlw	250
  3091  028A  00A1               	movwf	Tick24BitTimer@timer4+1
  3092  028B  3000               	movlw	0
  3093  028C  00A0               	movwf	Tick24BitTimer@timer4
  3094  028D  3186  2677  3180   	fcall	_Tick24BitTimer
  3095  0290  0020               	movlb	0	; select bank0
  3096  0291  0823               	movf	?_Tick24BitTimer+3,w
  3097  0292  00D0               	movwf	main@sensorDelay+3
  3098  0293  0822               	movf	?_Tick24BitTimer+2,w
  3099  0294  00CF               	movwf	main@sensorDelay+2
  3100  0295  0821               	movf	?_Tick24BitTimer+1,w
  3101  0296  00CE               	movwf	main@sensorDelay+1
  3102  0297  0820               	movf	?_Tick24BitTimer,w
  3103  0298  00CD               	movwf	main@sensorDelay
  3104                           
  3105                           ;main.c: 205: sensor_er_no = error;
  3106  0299  0854               	movf	main@error,w
  3107  029A  00C2               	movwf	??_main
  3108  029B  0842               	movf	??_main,w
  3109  029C                     L2:	
  3110  029C  00D1               	movwf	main@sensor_er_no
  3111                           
  3112                           ;main.c: 206: error_counter++;
  3113  029D  3001               	movlw	1
  3114  029E  07CB               	addwf	main@error_counter,f
  3115  029F  3000               	movlw	0
  3116  02A0  3DCC               	addwfc	main@error_counter+1,f
  3117                           
  3118                           ;main.c: 207: break;
  3119  02A1  2AB8               	goto	l2899
  3120  02A2                     l2893:	
  3121                           
  3122                           ;main.c: 208: }
  3123                           ;main.c: 209: _delay((unsigned long)((100)*(32000000/4000.0)));
  3124  02A2  3005               	movlw	5
  3125  02A3  0020               	movlb	0	; select bank0
  3126  02A4  00C4               	movwf	??_main+2
  3127  02A5  300F               	movlw	15
  3128  02A6  00C3               	movwf	??_main+1
  3129  02A7  30F4               	movlw	244
  3130  02A8  00C2               	movwf	??_main
  3131  02A9                     u3307:	
  3132  02A9  0BC2               	decfsz	??_main,f
  3133  02AA  2AA9               	goto	u3307
  3134  02AB  0BC3               	decfsz	??_main+1,f
  3135  02AC  2AA9               	goto	u3307
  3136  02AD  0BC4               	decfsz	??_main+2,f
  3137  02AE  2AA9               	goto	u3307
  3138  02AF  3001               	movlw	1
  3139  02B0  0020               	movlb	0	; select bank0
  3140  02B1  00C2               	movwf	??_main
  3141  02B2  0842               	movf	??_main,w
  3142  02B3  07D5               	addwf	main@sensorPort,f
  3143  02B4  3004               	movlw	4
  3144  02B5  0255               	subwf	main@sensorPort,w
  3145  02B6  1C03               	skipc
  3146  02B7  29AD               	goto	l2849
  3147  02B8                     l2899:	
  3148                           
  3149                           ;main.c: 210: }
  3150                           ;main.c: 213: }
  3151                           ;main.c: 251: if(CheckTick24Timer(ADCDelay)){
  3152  02B8  084A               	movf	main@ADCDelay+3,w
  3153  02B9  00A3               	movwf	CheckTick24Timer@timeout+3
  3154  02BA  0849               	movf	main@ADCDelay+2,w
  3155  02BB  00A2               	movwf	CheckTick24Timer@timeout+2
  3156  02BC  0848               	movf	main@ADCDelay+1,w
  3157  02BD  00A1               	movwf	CheckTick24Timer@timeout+1
  3158  02BE  0847               	movf	main@ADCDelay,w
  3159  02BF  00A0               	movwf	CheckTick24Timer@timeout
  3160  02C0  3186  26D1  3180   	fcall	_CheckTick24Timer
  3161  02C3  0020               	movlb	0	; select bank0
  3162  02C4  0821               	movf	?_CheckTick24Timer+1,w
  3163  02C5  0420               	iorwf	?_CheckTick24Timer,w
  3164  02C6  1903               	skipnz
  3165  02C7  2936               	goto	l2835
  3166                           
  3167                           ;main.c: 252: ADC_intF = 1;
  3168  02C8  3001               	movlw	1
  3169  02C9  00EC               	movwf	_ADC_intF
  3170  02CA  3000               	movlw	0
  3171  02CB  00ED               	movwf	_ADC_intF+1
  3172                           
  3173                           ;main.c: 253: ADCDelay = Tick24BitTimer(64000);
  3174  02CC  3000               	movlw	0
  3175  02CD  00A3               	movwf	Tick24BitTimer@timer4+3
  3176  02CE  3000               	movlw	0
  3177  02CF  00A2               	movwf	Tick24BitTimer@timer4+2
  3178  02D0  30FA               	movlw	250
  3179  02D1  00A1               	movwf	Tick24BitTimer@timer4+1
  3180  02D2  3000               	movlw	0
  3181  02D3  00A0               	movwf	Tick24BitTimer@timer4
  3182  02D4  3186  2677  3180   	fcall	_Tick24BitTimer
  3183  02D7  0020               	movlb	0	; select bank0
  3184  02D8  0823               	movf	?_Tick24BitTimer+3,w
  3185  02D9  00CA               	movwf	main@ADCDelay+3
  3186  02DA  0822               	movf	?_Tick24BitTimer+2,w
  3187  02DB  00C9               	movwf	main@ADCDelay+2
  3188  02DC  0821               	movf	?_Tick24BitTimer+1,w
  3189  02DD  00C8               	movwf	main@ADCDelay+1
  3190  02DE  0820               	movf	?_Tick24BitTimer,w
  3191  02DF  00C7               	movwf	main@ADCDelay
  3192  02E0  2936               	goto	l2835
  3193  02E1                     __end_of_main:	
  3194                           ;main.c: 254: }
  3195                           ;main.c: 255: }
  3196                           ;main.c: 257: return 0;
  3197                           ;	Return value of _main is never used
  3198                           
  3199                           
  3200                           	psect	text1
  3201  02E1                     __ptext1:	
  3202 ;; *************** function _sprintf *****************
  3203 ;; Defined at:
  3204 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\doprnt.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;  sp              1    wreg     PTR unsigned char 
  3207 ;;		 -> tempString(16), rhString(16), 
  3208 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  3209 ;;		 -> STR_3(6), STR_2(13), STR_1(7), 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  sp              1   32[BANK0 ] PTR unsigned char 
  3212 ;;		 -> tempString(16), rhString(16), 
  3213 ;;  _val            4   28[BANK0 ] struct .
  3214 ;;  c               1   33[BANK0 ] char 
  3215 ;;  prec            1   27[BANK0 ] char 
  3216 ;;  flag            1   26[BANK0 ] unsigned char 
  3217 ;;  ap              1   25[BANK0 ] PTR void [1]
  3218 ;;		 -> ?_sprintf(2), 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  2   15[BANK0 ] int 
  3221 ;; Registers used:
  3222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3228 ;;      Params:         0       6       0       0       0       0       0       0
  3229 ;;      Locals:         0       9       0       0       0       0       0       0
  3230 ;;      Temps:          0       4       0       0       0       0       0       0
  3231 ;;      Totals:         0      19       0       0       0       0       0       0
  3232 ;;Total ram usage:       19 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:    3
  3235 ;; This function calls:
  3236 ;;		___lwdiv
  3237 ;;		___lwmod
  3238 ;; This function is called by:
  3239 ;;		_main
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           
  3244                           ;psect for function _sprintf
  3245  02E1                     _sprintf:	
  3246                           
  3247                           ;incstack = 0
  3248                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3249                           ;sprintf@sp stored from wreg
  3250  02E1  0020               	movlb	0	; select bank0
  3251  02E2  00C0               	movwf	sprintf@sp
  3252                           
  3253                           ;doprnt.c: 494: va_list ap;
  3254                           ;doprnt.c: 499: signed char c;
  3255                           ;doprnt.c: 506: signed char prec;
  3256                           ;doprnt.c: 508: unsigned char flag;
  3257                           ;doprnt.c: 527: union {
  3258                           ;doprnt.c: 528: unsigned int _val;
  3259                           ;doprnt.c: 529: struct {
  3260                           ;doprnt.c: 530: const char * _cp;
  3261                           ;doprnt.c: 531: unsigned _len;
  3262                           ;doprnt.c: 532: } _str;
  3263                           ;doprnt.c: 533: } _val;
  3264                           ;doprnt.c: 542: *ap = __va_start();
  3265  02E3  3031               	movlw	(?_sprintf+2)& (0+255)
  3266  02E4  00B5               	movwf	??_sprintf
  3267  02E5  0835               	movf	??_sprintf,w
  3268  02E6  00B9               	movwf	sprintf@ap
  3269  02E7                     l2671:	
  3270                           ;doprnt.c: 545: while(c = *f++) {
  3271                           
  3272  02E7  0830               	movf	sprintf@f+1,w
  3273  02E8  00B6               	movwf	??_sprintf+1
  3274  02E9  082F               	movf	sprintf@f,w
  3275  02EA  00B5               	movwf	??_sprintf
  3276  02EB  0AAF               	incf	sprintf@f,f
  3277  02EC  1903               	skipnz
  3278  02ED  0AB0               	incf	sprintf@f+1,f
  3279  02EE  0835               	movf	??_sprintf,w
  3280  02EF  0084               	movwf	4
  3281  02F0  0836               	movf	??_sprintf+1,w
  3282  02F1  0085               	movwf	5
  3283  02F2  0800               	movf	0,w	;code access
  3284  02F3  00B7               	movwf	??_sprintf+2
  3285  02F4  0837               	movf	??_sprintf+2,w
  3286  02F5  00C1               	movwf	sprintf@c
  3287  02F6  08C1               	movf	sprintf@c,f
  3288  02F7  1903               	btfsc	3,2
  3289  02F8  2BAF               	goto	l2673
  3290                           
  3291                           ;doprnt.c: 547: if(c != '%')
  3292  02F9  0841               	movf	sprintf@c,w
  3293  02FA  3A25               	xorlw	37
  3294  02FB  1903               	skipnz
  3295  02FC  2B09               	goto	l2627
  3296                           
  3297                           ;doprnt.c: 549: {
  3298                           ;doprnt.c: 550: ((*sp++ = (c)));
  3299  02FD  0841               	movf	sprintf@c,w
  3300  02FE  00B5               	movwf	??_sprintf
  3301  02FF  0840               	movf	sprintf@sp,w
  3302  0300  0086               	movwf	6
  3303  0301  0187               	clrf	7
  3304  0302  0835               	movf	??_sprintf,w
  3305  0303  0081               	movwf	1
  3306  0304  3001               	movlw	1
  3307  0305  00B5               	movwf	??_sprintf
  3308  0306  0835               	movf	??_sprintf,w
  3309  0307  07C0               	addwf	sprintf@sp,f
  3310                           
  3311                           ;doprnt.c: 551: continue;
  3312  0308  2AE7               	goto	l2671
  3313  0309                     l2627:	
  3314                           
  3315                           ;doprnt.c: 552: }
  3316                           ;doprnt.c: 557: flag = 0;
  3317  0309  01BA               	clrf	sprintf@flag
  3318                           
  3319                           ;doprnt.c: 831: }
  3320                           
  3321                           ;doprnt.c: 822: continue;
  3322                           
  3323                           ;doprnt.c: 811: default:
  3324                           
  3325                           ;doprnt.c: 707: case 'i':
  3326                           ;doprnt.c: 708: break;
  3327                           
  3328                           ;doprnt.c: 706: case 'd':
  3329                           
  3330                           ;doprnt.c: 647: goto alldone;
  3331                           
  3332                           ;doprnt.c: 646: case 0:
  3333                           
  3334                           ;doprnt.c: 644: switch(c = *f++) {
  3335  030A  0830               	movf	sprintf@f+1,w
  3336  030B  00B6               	movwf	??_sprintf+1
  3337  030C  082F               	movf	sprintf@f,w
  3338  030D  00B5               	movwf	??_sprintf
  3339  030E  0AAF               	incf	sprintf@f,f
  3340  030F  1903               	skipnz
  3341  0310  0AB0               	incf	sprintf@f+1,f
  3342  0311  0835               	movf	??_sprintf,w
  3343  0312  0084               	movwf	4
  3344  0313  0836               	movf	??_sprintf+1,w
  3345  0314  0085               	movwf	5
  3346  0315  0800               	movf	0,w	;code access
  3347  0316  00C1               	movwf	sprintf@c
  3348                           
  3349                           ; Switch size 1, requested type "space"
  3350                           ; Number of cases is 3, Range of values is 0 to 105
  3351                           ; switch strategies available:
  3352                           ; Name         Instructions Cycles
  3353                           ; simple_byte           10     6 (average)
  3354                           ; direct_byte          218     6 (fixed)
  3355                           ; jumptable            260     6 (fixed)
  3356                           ;	Chosen strategy is simple_byte
  3357  0317  3A00               	xorlw	0	; case 0
  3358  0318  1903               	skipnz
  3359  0319  2BAF               	goto	l2673
  3360  031A  3A64               	xorlw	100	; case 100
  3361  031B  1903               	skipnz
  3362  031C  2B21               	goto	l2633
  3363  031D  3A0D               	xorlw	13	; case 105
  3364  031E  1903               	skipnz
  3365  031F  2B21               	goto	l2633
  3366  0320  2AE7               	goto	l2671
  3367  0321                     l2633:	
  3368                           
  3369                           ;doprnt.c: 1262: {
  3370                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3371  0321  0839               	movf	sprintf@ap,w
  3372  0322  0086               	movwf	6
  3373  0323  0187               	clrf	7
  3374  0324  3F40               	moviw [0]fsr1
  3375  0325  00BC               	movwf	sprintf@_val
  3376  0326  3F41               	moviw [1]fsr1
  3377  0327  00BD               	movwf	sprintf@_val+1
  3378  0328  3002               	movlw	2
  3379  0329  00B5               	movwf	??_sprintf
  3380  032A  0835               	movf	??_sprintf,w
  3381  032B  07B9               	addwf	sprintf@ap,f
  3382                           
  3383                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  3384  032C  1FBD               	btfss	sprintf@_val+1,7
  3385  032D  2B37               	goto	l2643
  3386                           
  3387                           ;doprnt.c: 1271: flag |= 0x03;
  3388  032E  3003               	movlw	3
  3389  032F  00B5               	movwf	??_sprintf
  3390  0330  0835               	movf	??_sprintf,w
  3391  0331  04BA               	iorwf	sprintf@flag,f
  3392                           
  3393                           ;doprnt.c: 1272: _val._val = -_val._val;
  3394  0332  09BC               	comf	sprintf@_val,f
  3395  0333  09BD               	comf	sprintf@_val+1,f
  3396  0334  0ABC               	incf	sprintf@_val,f
  3397  0335  1903               	skipnz
  3398  0336  0ABD               	incf	sprintf@_val+1,f
  3399  0337                     l2643:	
  3400                           
  3401                           ;doprnt.c: 1273: }
  3402                           ;doprnt.c: 1275: }
  3403                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3404  0337  01C1               	clrf	sprintf@c
  3405  0338  0AC1               	incf	sprintf@c,f
  3406  0339  0841               	movf	sprintf@c,w
  3407  033A  3A05               	xorlw	5
  3408  033B  1903               	btfsc	3,2
  3409  033C  2B5C               	goto	l2655
  3410  033D                     l2647:	
  3411                           
  3412                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  3413  033D  0841               	movf	sprintf@c,w
  3414  033E  00B5               	movwf	??_sprintf
  3415  033F  01B6               	clrf	??_sprintf+1
  3416  0340  35B5               	lslf	??_sprintf,f
  3417  0341  0DB6               	rlf	??_sprintf+1,f
  3418  0342  3000               	movlw	low (_dpowers| (0+32768))
  3419  0343  0735               	addwf	??_sprintf,w
  3420  0344  0084               	movwf	4
  3421  0345  3088               	movlw	high (_dpowers| (0+32768))
  3422  0346  3D36               	addwfc	??_sprintf+1,w
  3423  0347  0085               	movwf	5
  3424  0348  3F00               	moviw [0]fsr0
  3425  0349  00B7               	movwf	??_sprintf+2
  3426  034A  3F01               	moviw [1]fsr0
  3427  034B  00B8               	movwf	??_sprintf+3
  3428  034C  0838               	movf	??_sprintf+3,w
  3429  034D  023D               	subwf	sprintf@_val+1,w
  3430  034E  1D03               	skipz
  3431  034F  2B52               	goto	u2685
  3432  0350  0837               	movf	??_sprintf+2,w
  3433  0351  023C               	subwf	sprintf@_val,w
  3434  0352                     u2685:	
  3435  0352  1C03               	btfss	3,0
  3436  0353  2B5C               	goto	l2655
  3437                           
  3438                           ;doprnt.c: 1316: break;
  3439  0354  3001               	movlw	1
  3440  0355  00B5               	movwf	??_sprintf
  3441  0356  0835               	movf	??_sprintf,w
  3442  0357  07C1               	addwf	sprintf@c,f
  3443  0358  0841               	movf	sprintf@c,w
  3444  0359  3A05               	xorlw	5
  3445  035A  1D03               	skipz
  3446  035B  2B3D               	goto	l2647
  3447  035C                     l2655:	
  3448                           
  3449                           ;doprnt.c: 1431: {
  3450                           ;doprnt.c: 1447: if(flag & 0x03)
  3451  035C  083A               	movf	sprintf@flag,w
  3452  035D  3903               	andlw	3
  3453  035E  1903               	btfsc	3,2
  3454  035F  2B6B               	goto	l2661
  3455                           
  3456                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  3457  0360  302D               	movlw	45
  3458  0361  00B5               	movwf	??_sprintf
  3459  0362  0840               	movf	sprintf@sp,w
  3460  0363  0086               	movwf	6
  3461  0364  0187               	clrf	7
  3462  0365  0835               	movf	??_sprintf,w
  3463  0366  0081               	movwf	1
  3464  0367  3001               	movlw	1
  3465  0368  00B5               	movwf	??_sprintf
  3466  0369  0835               	movf	??_sprintf,w
  3467  036A  07C0               	addwf	sprintf@sp,f
  3468  036B                     l2661:	
  3469                           
  3470                           ;doprnt.c: 1478: }
  3471                           ;doprnt.c: 1481: prec = c;
  3472  036B  0841               	movf	sprintf@c,w
  3473  036C  00B5               	movwf	??_sprintf
  3474  036D  0835               	movf	??_sprintf,w
  3475  036E  00BB               	movwf	sprintf@prec
  3476  036F                     l2669:	
  3477                           ;doprnt.c: 1483: while(prec--) {
  3478                           
  3479  036F  30FF               	movlw	-1
  3480  0370  00B5               	movwf	??_sprintf
  3481  0371  0835               	movf	??_sprintf,w
  3482  0372  07BB               	addwf	sprintf@prec,f
  3483  0373  083B               	movf	sprintf@prec,w
  3484  0374  3AFF               	xorlw	255
  3485  0375  1903               	btfsc	3,2
  3486  0376  2AE7               	goto	l2671
  3487                           
  3488                           ;doprnt.c: 1487: {
  3489                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  3490  0377  300A               	movlw	10
  3491  0378  00A8               	movwf	___lwmod@divisor
  3492  0379  3000               	movlw	0
  3493  037A  00A9               	movwf	___lwmod@divisor+1
  3494  037B  083B               	movf	sprintf@prec,w
  3495  037C  00B5               	movwf	??_sprintf
  3496  037D  01B6               	clrf	??_sprintf+1
  3497  037E  35B5               	lslf	??_sprintf,f
  3498  037F  0DB6               	rlf	??_sprintf+1,f
  3499  0380  3000               	movlw	low (_dpowers| (0+32768))
  3500  0381  0735               	addwf	??_sprintf,w
  3501  0382  0084               	movwf	4
  3502  0383  3088               	movlw	high (_dpowers| (0+32768))
  3503  0384  3D36               	addwfc	??_sprintf+1,w
  3504  0385  0085               	movwf	5
  3505  0386  3F00               	moviw [0]fsr0
  3506  0387  00A0               	movwf	___lwdiv@divisor
  3507  0388  3F01               	moviw [1]fsr0
  3508  0389  00A1               	movwf	___lwdiv@divisor+1
  3509  038A  083D               	movf	sprintf@_val+1,w
  3510  038B  01A3               	clrf	___lwdiv@dividend+1
  3511  038C  07A3               	addwf	___lwdiv@dividend+1,f
  3512  038D  083C               	movf	sprintf@_val,w
  3513  038E  01A2               	clrf	___lwdiv@dividend
  3514  038F  07A2               	addwf	___lwdiv@dividend,f
  3515  0390  318E  26EF  3182   	fcall	___lwdiv
  3516  0393  0020               	movlb	0	; select bank0
  3517  0394  0821               	movf	?___lwdiv+1,w
  3518  0395  01AB               	clrf	___lwmod@dividend+1
  3519  0396  07AB               	addwf	___lwmod@dividend+1,f
  3520  0397  0820               	movf	?___lwdiv,w
  3521  0398  01AA               	clrf	___lwmod@dividend
  3522  0399  07AA               	addwf	___lwmod@dividend,f
  3523  039A  3187  27D1  3182   	fcall	___lwmod
  3524  039D  0020               	movlb	0	; select bank0
  3525  039E  0828               	movf	?___lwmod,w
  3526  039F  3E30               	addlw	48
  3527  03A0  00B7               	movwf	??_sprintf+2
  3528  03A1  0837               	movf	??_sprintf+2,w
  3529  03A2  00C1               	movwf	sprintf@c
  3530                           
  3531                           ;doprnt.c: 1532: }
  3532                           ;doprnt.c: 1533: ((*sp++ = (c)));
  3533  03A3  0841               	movf	sprintf@c,w
  3534  03A4  00B5               	movwf	??_sprintf
  3535  03A5  0840               	movf	sprintf@sp,w
  3536  03A6  0086               	movwf	6
  3537  03A7  0187               	clrf	7
  3538  03A8  0835               	movf	??_sprintf,w
  3539  03A9  0081               	movwf	1
  3540  03AA  3001               	movlw	1
  3541  03AB  00B5               	movwf	??_sprintf
  3542  03AC  0835               	movf	??_sprintf,w
  3543  03AD  07C0               	addwf	sprintf@sp,f
  3544  03AE  2B6F               	goto	l2669
  3545  03AF                     l2673:	
  3546                           ;doprnt.c: 1534: }
  3547                           ;doprnt.c: 1542: }
  3548                           ;doprnt.c: 1544: alldone:
  3549                           
  3550                           
  3551                           ;doprnt.c: 1547: *sp = 0;
  3552  03AF  0840               	movf	sprintf@sp,w
  3553  03B0  0086               	movwf	6
  3554  03B1  0187               	clrf	7
  3555  03B2  0181               	clrf	1
  3556  03B3  0008               	return
  3557  03B4                     __end_of_sprintf:	
  3558                           ;doprnt.c: 1549: return 0;
  3559                           ;	Return value of _sprintf is never used
  3560                           
  3561                           
  3562                           	psect	text2
  3563  07D1                     __ptext2:	
  3564 ;; *************** function ___lwmod *****************
  3565 ;; Defined at:
  3566 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lwmod.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  divisor         2    8[BANK0 ] unsigned int 
  3569 ;;  dividend        2   10[BANK0 ] unsigned int 
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;  counter         1   13[BANK0 ] unsigned char 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  2    8[BANK0 ] unsigned int 
  3574 ;; Registers used:
  3575 ;;		wreg, status,2, status,0
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3581 ;;      Params:         0       4       0       0       0       0       0       0
  3582 ;;      Locals:         0       1       0       0       0       0       0       0
  3583 ;;      Temps:          0       1       0       0       0       0       0       0
  3584 ;;      Totals:         0       6       0       0       0       0       0       0
  3585 ;;Total ram usage:        6 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; Hardware stack levels required when called:    2
  3588 ;; This function calls:
  3589 ;;		Nothing
  3590 ;; This function is called by:
  3591 ;;		_sprintf
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           
  3596                           ;psect for function ___lwmod
  3597  07D1                     ___lwmod:	
  3598                           
  3599                           ;incstack = 0
  3600                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3601  07D1  0020               	movlb	0	; select bank0
  3602  07D2  0829               	movf	___lwmod@divisor+1,w
  3603  07D3  0428               	iorwf	___lwmod@divisor,w
  3604  07D4  1903               	skipnz
  3605  07D5  2FF9               	goto	l2431
  3606  07D6  01AD               	clrf	___lwmod@counter
  3607  07D7  0AAD               	incf	___lwmod@counter,f
  3608  07D8                     l2421:	
  3609  07D8  1BA9               	btfsc	___lwmod@divisor+1,7
  3610  07D9  2FE4               	goto	l2423
  3611  07DA  3001               	movlw	1
  3612  07DB                     u2435:	
  3613  07DB  35A8               	lslf	___lwmod@divisor,f
  3614  07DC  0DA9               	rlf	___lwmod@divisor+1,f
  3615  07DD  0B89               	decfsz	9,f
  3616  07DE  2FDB               	goto	u2435
  3617  07DF  3001               	movlw	1
  3618  07E0  00AC               	movwf	??___lwmod
  3619  07E1  082C               	movf	??___lwmod,w
  3620  07E2  07AD               	addwf	___lwmod@counter,f
  3621  07E3  2FD8               	goto	l2421
  3622  07E4                     l2423:	
  3623  07E4  0829               	movf	___lwmod@divisor+1,w
  3624  07E5  022B               	subwf	___lwmod@dividend+1,w
  3625  07E6  1D03               	skipz
  3626  07E7  2FEA               	goto	u2455
  3627  07E8  0828               	movf	___lwmod@divisor,w
  3628  07E9  022A               	subwf	___lwmod@dividend,w
  3629  07EA                     u2455:	
  3630  07EA  1C03               	skipc
  3631  07EB  2FF0               	goto	l2427
  3632  07EC  0828               	movf	___lwmod@divisor,w
  3633  07ED  02AA               	subwf	___lwmod@dividend,f
  3634  07EE  0829               	movf	___lwmod@divisor+1,w
  3635  07EF  3BAB               	subwfb	___lwmod@dividend+1,f
  3636  07F0                     l2427:	
  3637  07F0  3001               	movlw	1
  3638  07F1                     u2465:	
  3639  07F1  36A9               	lsrf	___lwmod@divisor+1,f
  3640  07F2  0CA8               	rrf	___lwmod@divisor,f
  3641  07F3  0B89               	decfsz	9,f
  3642  07F4  2FF1               	goto	u2465
  3643  07F5  3001               	movlw	1
  3644  07F6  02AD               	subwf	___lwmod@counter,f
  3645  07F7  1D03               	btfss	3,2
  3646  07F8  2FE4               	goto	l2423
  3647  07F9                     l2431:	
  3648  07F9  082B               	movf	___lwmod@dividend+1,w
  3649  07FA  01A9               	clrf	?___lwmod+1
  3650  07FB  07A9               	addwf	?___lwmod+1,f
  3651  07FC  082A               	movf	___lwmod@dividend,w
  3652  07FD  01A8               	clrf	?___lwmod
  3653  07FE  07A8               	addwf	?___lwmod,f
  3654  07FF  0008               	return
  3655  0800                     __end_of___lwmod:	
  3656                           
  3657                           	psect	text3
  3658  0EEF                     __ptext3:	
  3659 ;; *************** function ___lwdiv *****************
  3660 ;; Defined at:
  3661 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  divisor         2    0[BANK0 ] unsigned int 
  3664 ;;  dividend        2    2[BANK0 ] unsigned int 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  quotient        2    5[BANK0 ] unsigned int 
  3667 ;;  counter         1    7[BANK0 ] unsigned char 
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  2    0[BANK0 ] unsigned int 
  3670 ;; Registers used:
  3671 ;;		wreg, status,2, status,0
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3677 ;;      Params:         0       4       0       0       0       0       0       0
  3678 ;;      Locals:         0       3       0       0       0       0       0       0
  3679 ;;      Temps:          0       1       0       0       0       0       0       0
  3680 ;;      Totals:         0       8       0       0       0       0       0       0
  3681 ;;Total ram usage:        8 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    2
  3684 ;; This function calls:
  3685 ;;		Nothing
  3686 ;; This function is called by:
  3687 ;;		_sprintf
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           
  3692                           ;psect for function ___lwdiv
  3693  0EEF                     ___lwdiv:	
  3694                           
  3695                           ;incstack = 0
  3696                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3697  0EEF  0020               	movlb	0	; select bank0
  3698  0EF0  01A5               	clrf	___lwdiv@quotient
  3699  0EF1  01A6               	clrf	___lwdiv@quotient+1
  3700  0EF2  0821               	movf	___lwdiv@divisor+1,w
  3701  0EF3  0420               	iorwf	___lwdiv@divisor,w
  3702  0EF4  1903               	skipnz
  3703  0EF5  2F1F               	goto	l2409
  3704  0EF6  01A7               	clrf	___lwdiv@counter
  3705  0EF7  0AA7               	incf	___lwdiv@counter,f
  3706  0EF8                     l2397:	
  3707  0EF8  1BA1               	btfsc	___lwdiv@divisor+1,7
  3708  0EF9  2F04               	goto	l2399
  3709  0EFA  3001               	movlw	1
  3710  0EFB                     u2365:	
  3711  0EFB  35A0               	lslf	___lwdiv@divisor,f
  3712  0EFC  0DA1               	rlf	___lwdiv@divisor+1,f
  3713  0EFD  0B89               	decfsz	9,f
  3714  0EFE  2EFB               	goto	u2365
  3715  0EFF  3001               	movlw	1
  3716  0F00  00A4               	movwf	??___lwdiv
  3717  0F01  0824               	movf	??___lwdiv,w
  3718  0F02  07A7               	addwf	___lwdiv@counter,f
  3719  0F03  2EF8               	goto	l2397
  3720  0F04                     l2399:	
  3721  0F04  3001               	movlw	1
  3722  0F05                     u2385:	
  3723  0F05  35A5               	lslf	___lwdiv@quotient,f
  3724  0F06  0DA6               	rlf	___lwdiv@quotient+1,f
  3725  0F07  0B89               	decfsz	9,f
  3726  0F08  2F05               	goto	u2385
  3727  0F09  0821               	movf	___lwdiv@divisor+1,w
  3728  0F0A  0223               	subwf	___lwdiv@dividend+1,w
  3729  0F0B  1D03               	skipz
  3730  0F0C  2F0F               	goto	u2395
  3731  0F0D  0820               	movf	___lwdiv@divisor,w
  3732  0F0E  0222               	subwf	___lwdiv@dividend,w
  3733  0F0F                     u2395:	
  3734  0F0F  1C03               	skipc
  3735  0F10  2F16               	goto	l2405
  3736  0F11  0820               	movf	___lwdiv@divisor,w
  3737  0F12  02A2               	subwf	___lwdiv@dividend,f
  3738  0F13  0821               	movf	___lwdiv@divisor+1,w
  3739  0F14  3BA3               	subwfb	___lwdiv@dividend+1,f
  3740  0F15  1425               	bsf	___lwdiv@quotient,0
  3741  0F16                     l2405:	
  3742  0F16  3001               	movlw	1
  3743  0F17                     u2405:	
  3744  0F17  36A1               	lsrf	___lwdiv@divisor+1,f
  3745  0F18  0CA0               	rrf	___lwdiv@divisor,f
  3746  0F19  0B89               	decfsz	9,f
  3747  0F1A  2F17               	goto	u2405
  3748  0F1B  3001               	movlw	1
  3749  0F1C  02A7               	subwf	___lwdiv@counter,f
  3750  0F1D  1D03               	btfss	3,2
  3751  0F1E  2F04               	goto	l2399
  3752  0F1F                     l2409:	
  3753  0F1F  0826               	movf	___lwdiv@quotient+1,w
  3754  0F20  01A1               	clrf	?___lwdiv+1
  3755  0F21  07A1               	addwf	?___lwdiv+1,f
  3756  0F22  0825               	movf	___lwdiv@quotient,w
  3757  0F23  01A0               	clrf	?___lwdiv
  3758  0F24  07A0               	addwf	?___lwdiv,f
  3759  0F25  0008               	return
  3760  0F26                     __end_of___lwdiv:	
  3761                           
  3762                           	psect	text4
  3763  0E11                     __ptext4:	
  3764 ;; *************** function _init_adc *****************
  3765 ;; Defined at:
  3766 ;;		line 12 in file "NB_ADC.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;		None
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;		None               void
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3780 ;;      Params:         0       0       0       0       0       0       0       0
  3781 ;;      Locals:         0       0       0       0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0       0
  3783 ;;      Totals:         0       0       0       0       0       0       0       0
  3784 ;;Total ram usage:        0 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    2
  3787 ;; This function calls:
  3788 ;;		Nothing
  3789 ;; This function is called by:
  3790 ;;		_main
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           
  3795                           ;psect for function _init_adc
  3796  0E11                     _init_adc:	
  3797                           
  3798                           ;NB_ADC.c: 15: ADCON2bits.CHSN = 0b1111;
  3799                           
  3800                           ;incstack = 0
  3801                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  3802  0E11  300F               	movlw	15
  3803  0E12  0021               	movlb	1	; select bank1
  3804  0E13  049F               	iorwf	31,f	;volatile
  3805                           
  3806                           ;NB_ADC.c: 16: ADCON1bits.ADPREF = 0b00;
  3807  0E14  30FC               	movlw	-4
  3808  0E15  059E               	andwf	30,f	;volatile
  3809                           
  3810                           ;NB_ADC.c: 17: ADCON1bits.ADNREF = 0b0;
  3811  0E16  111E               	bcf	30,2	;volatile
  3812                           
  3813                           ;NB_ADC.c: 18: ADCON0bits.ADRMD = 0b0;
  3814  0E17  139D               	bcf	29,7	;volatile
  3815                           
  3816                           ;NB_ADC.c: 19: ADCON1bits.ADFM = 0b1;
  3817  0E18  179E               	bsf	30,7	;volatile
  3818                           
  3819                           ;NB_ADC.c: 22: ADCON1bits.ADCS = 0b110;
  3820  0E19  081E               	movf	30,w	;volatile
  3821  0E1A  398F               	andlw	-113
  3822  0E1B  3860               	iorlw	96
  3823  0E1C  009E               	movwf	30	;volatile
  3824                           
  3825                           ;NB_ADC.c: 23: ADCON0bits.ADON = 0b1;
  3826  0E1D  141D               	bsf	29,0	;volatile
  3827  0E1E  0008               	return
  3828  0E1F                     __end_of_init_adc:	
  3829                           
  3830                           	psect	text5
  3831  0EBF                     __ptext5:	
  3832 ;; *************** function ___lmul *****************
  3833 ;; Defined at:
  3834 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul32.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3837 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  product         4    8[BANK0 ] unsigned long 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  4    0[BANK0 ] unsigned long 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2, status,0
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3849 ;;      Params:         0       8       0       0       0       0       0       0
  3850 ;;      Locals:         0       4       0       0       0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0
  3852 ;;      Totals:         0      12       0       0       0       0       0       0
  3853 ;;Total ram usage:       12 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    2
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_main
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           
  3864                           ;psect for function ___lmul
  3865  0EBF                     ___lmul:	
  3866                           
  3867                           ;incstack = 0
  3868                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3869  0EBF  3000               	movlw	0
  3870  0EC0  0020               	movlb	0	; select bank0
  3871  0EC1  00AB               	movwf	___lmul@product+3
  3872  0EC2  3000               	movlw	0
  3873  0EC3  00AA               	movwf	___lmul@product+2
  3874  0EC4  3000               	movlw	0
  3875  0EC5  00A9               	movwf	___lmul@product+1
  3876  0EC6  3000               	movlw	0
  3877  0EC7  00A8               	movwf	___lmul@product
  3878  0EC8                     l2701:	
  3879  0EC8  1C20               	btfss	___lmul@multiplier,0
  3880  0EC9  2ED2               	goto	l2705
  3881  0ECA  0824               	movf	___lmul@multiplicand,w
  3882  0ECB  07A8               	addwf	___lmul@product,f
  3883  0ECC  0825               	movf	___lmul@multiplicand+1,w
  3884  0ECD  3DA9               	addwfc	___lmul@product+1,f
  3885  0ECE  0826               	movf	___lmul@multiplicand+2,w
  3886  0ECF  3DAA               	addwfc	___lmul@product+2,f
  3887  0ED0  0827               	movf	___lmul@multiplicand+3,w
  3888  0ED1  3DAB               	addwfc	___lmul@product+3,f
  3889  0ED2                     l2705:	
  3890  0ED2  3001               	movlw	1
  3891  0ED3                     u2775:	
  3892  0ED3  35A4               	lslf	___lmul@multiplicand,f
  3893  0ED4  0DA5               	rlf	___lmul@multiplicand+1,f
  3894  0ED5  0DA6               	rlf	___lmul@multiplicand+2,f
  3895  0ED6  0DA7               	rlf	___lmul@multiplicand+3,f
  3896  0ED7  0B89               	decfsz	9,f
  3897  0ED8  2ED3               	goto	u2775
  3898  0ED9  3001               	movlw	1
  3899  0EDA                     u2785:	
  3900  0EDA  36A3               	lsrf	___lmul@multiplier+3,f
  3901  0EDB  0CA2               	rrf	___lmul@multiplier+2,f
  3902  0EDC  0CA1               	rrf	___lmul@multiplier+1,f
  3903  0EDD  0CA0               	rrf	___lmul@multiplier,f
  3904  0EDE  0B89               	decfsz	9,f
  3905  0EDF  2EDA               	goto	u2785
  3906  0EE0  0823               	movf	___lmul@multiplier+3,w
  3907  0EE1  0422               	iorwf	___lmul@multiplier+2,w
  3908  0EE2  0421               	iorwf	___lmul@multiplier+1,w
  3909  0EE3  0420               	iorwf	___lmul@multiplier,w
  3910  0EE4  1D03               	skipz
  3911  0EE5  2EC8               	goto	l2701
  3912  0EE6  082B               	movf	___lmul@product+3,w
  3913  0EE7  00A3               	movwf	?___lmul+3
  3914  0EE8  082A               	movf	___lmul@product+2,w
  3915  0EE9  00A2               	movwf	?___lmul+2
  3916  0EEA  0829               	movf	___lmul@product+1,w
  3917  0EEB  00A1               	movwf	?___lmul+1
  3918  0EEC  0828               	movf	___lmul@product,w
  3919  0EED  00A0               	movwf	?___lmul
  3920  0EEE  0008               	return
  3921  0EEF                     __end_of___lmul:	
  3922                           
  3923                           	psect	text6
  3924  077E                     __ptext6:	
  3925 ;; *************** function ___lldiv *****************
  3926 ;; Defined at:
  3927 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\lldiv.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  divisor         4   12[BANK0 ] unsigned long 
  3930 ;;  dividend        4   16[BANK0 ] unsigned long 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  quotient        4   21[BANK0 ] unsigned long 
  3933 ;;  counter         1   25[BANK0 ] unsigned char 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  4   12[BANK0 ] unsigned long 
  3936 ;; Registers used:
  3937 ;;		wreg, status,2, status,0
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3943 ;;      Params:         0       8       0       0       0       0       0       0
  3944 ;;      Locals:         0       5       0       0       0       0       0       0
  3945 ;;      Temps:          0       1       0       0       0       0       0       0
  3946 ;;      Totals:         0      14       0       0       0       0       0       0
  3947 ;;Total ram usage:       14 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    2
  3950 ;; This function calls:
  3951 ;;		Nothing
  3952 ;; This function is called by:
  3953 ;;		_main
  3954 ;;		_LCD_WriteNumber
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           
  3959                           ;psect for function ___lldiv
  3960  077E                     ___lldiv:	
  3961                           
  3962                           ;incstack = 0
  3963                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3964  077E  3000               	movlw	0
  3965  077F  0020               	movlb	0	; select bank0
  3966  0780  00B8               	movwf	___lldiv@quotient+3
  3967  0781  3000               	movlw	0
  3968  0782  00B7               	movwf	___lldiv@quotient+2
  3969  0783  3000               	movlw	0
  3970  0784  00B6               	movwf	___lldiv@quotient+1
  3971  0785  3000               	movlw	0
  3972  0786  00B5               	movwf	___lldiv@quotient
  3973  0787  082F               	movf	___lldiv@divisor+3,w
  3974  0788  042E               	iorwf	___lldiv@divisor+2,w
  3975  0789  042D               	iorwf	___lldiv@divisor+1,w
  3976  078A  042C               	iorwf	___lldiv@divisor,w
  3977  078B  1903               	skipnz
  3978  078C  2FC8               	goto	l2787
  3979  078D  01B9               	clrf	___lldiv@counter
  3980  078E  0AB9               	incf	___lldiv@counter,f
  3981  078F                     l2773:	
  3982  078F  1BAF               	btfsc	___lldiv@divisor+3,7
  3983  0790  2F9D               	goto	l2775
  3984  0791  3001               	movlw	1
  3985  0792                     u2925:	
  3986  0792  35AC               	lslf	___lldiv@divisor,f
  3987  0793  0DAD               	rlf	___lldiv@divisor+1,f
  3988  0794  0DAE               	rlf	___lldiv@divisor+2,f
  3989  0795  0DAF               	rlf	___lldiv@divisor+3,f
  3990  0796  0B89               	decfsz	9,f
  3991  0797  2F92               	goto	u2925
  3992  0798  3001               	movlw	1
  3993  0799  00B4               	movwf	??___lldiv
  3994  079A  0834               	movf	??___lldiv,w
  3995  079B  07B9               	addwf	___lldiv@counter,f
  3996  079C  2F8F               	goto	l2773
  3997  079D                     l2775:	
  3998  079D  3001               	movlw	1
  3999  079E                     u2945:	
  4000  079E  35B5               	lslf	___lldiv@quotient,f
  4001  079F  0DB6               	rlf	___lldiv@quotient+1,f
  4002  07A0  0DB7               	rlf	___lldiv@quotient+2,f
  4003  07A1  0DB8               	rlf	___lldiv@quotient+3,f
  4004  07A2  0B89               	decfsz	9,f
  4005  07A3  2F9E               	goto	u2945
  4006  07A4  082F               	movf	___lldiv@divisor+3,w
  4007  07A5  0233               	subwf	___lldiv@dividend+3,w
  4008  07A6  1D03               	skipz
  4009  07A7  2FB2               	goto	u2955
  4010  07A8  082E               	movf	___lldiv@divisor+2,w
  4011  07A9  0232               	subwf	___lldiv@dividend+2,w
  4012  07AA  1D03               	skipz
  4013  07AB  2FB2               	goto	u2955
  4014  07AC  082D               	movf	___lldiv@divisor+1,w
  4015  07AD  0231               	subwf	___lldiv@dividend+1,w
  4016  07AE  1D03               	skipz
  4017  07AF  2FB2               	goto	u2955
  4018  07B0  082C               	movf	___lldiv@divisor,w
  4019  07B1  0230               	subwf	___lldiv@dividend,w
  4020  07B2                     u2955:	
  4021  07B2  1C03               	skipc
  4022  07B3  2FBD               	goto	l2783
  4023  07B4  082C               	movf	___lldiv@divisor,w
  4024  07B5  02B0               	subwf	___lldiv@dividend,f
  4025  07B6  082D               	movf	___lldiv@divisor+1,w
  4026  07B7  3BB1               	subwfb	___lldiv@dividend+1,f
  4027  07B8  082E               	movf	___lldiv@divisor+2,w
  4028  07B9  3BB2               	subwfb	___lldiv@dividend+2,f
  4029  07BA  082F               	movf	___lldiv@divisor+3,w
  4030  07BB  3BB3               	subwfb	___lldiv@dividend+3,f
  4031  07BC  1435               	bsf	___lldiv@quotient,0
  4032  07BD                     l2783:	
  4033  07BD  3001               	movlw	1
  4034  07BE                     u2965:	
  4035  07BE  36AF               	lsrf	___lldiv@divisor+3,f
  4036  07BF  0CAE               	rrf	___lldiv@divisor+2,f
  4037  07C0  0CAD               	rrf	___lldiv@divisor+1,f
  4038  07C1  0CAC               	rrf	___lldiv@divisor,f
  4039  07C2  0B89               	decfsz	9,f
  4040  07C3  2FBE               	goto	u2965
  4041  07C4  3001               	movlw	1
  4042  07C5  02B9               	subwf	___lldiv@counter,f
  4043  07C6  1D03               	btfss	3,2
  4044  07C7  2F9D               	goto	l2775
  4045  07C8                     l2787:	
  4046  07C8  0838               	movf	___lldiv@quotient+3,w
  4047  07C9  00AF               	movwf	?___lldiv+3
  4048  07CA  0837               	movf	___lldiv@quotient+2,w
  4049  07CB  00AE               	movwf	?___lldiv+2
  4050  07CC  0836               	movf	___lldiv@quotient+1,w
  4051  07CD  00AD               	movwf	?___lldiv+1
  4052  07CE  0835               	movf	___lldiv@quotient,w
  4053  07CF  00AC               	movwf	?___lldiv
  4054  07D0  0008               	return
  4055  07D1                     __end_of___lldiv:	
  4056                           
  4057                           	psect	text7
  4058  0E1F                     __ptext7:	
  4059 ;; *************** function ___bmul *****************
  4060 ;; Defined at:
  4061 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul8.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  multiplier      1    wreg     unsigned char 
  4064 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4067 ;;  product         1    2[BANK0 ] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      unsigned char 
  4070 ;; Registers used:
  4071 ;;		wreg, status,2, status,0
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4077 ;;      Params:         0       1       0       0       0       0       0       0
  4078 ;;      Locals:         0       2       0       0       0       0       0       0
  4079 ;;      Temps:          0       1       0       0       0       0       0       0
  4080 ;;      Totals:         0       4       0       0       0       0       0       0
  4081 ;;Total ram usage:        4 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    2
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_main
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           
  4092                           ;psect for function ___bmul
  4093  0E1F                     ___bmul:	
  4094                           
  4095                           ;incstack = 0
  4096                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4097                           ;___bmul@multiplier stored from wreg
  4098  0E1F  0020               	movlb	0	; select bank0
  4099  0E20  00A3               	movwf	___bmul@multiplier
  4100  0E21  01A2               	clrf	___bmul@product
  4101  0E22                     l2715:	
  4102  0E22  1C23               	btfss	___bmul@multiplier,0
  4103  0E23  2E28               	goto	l2719
  4104  0E24  0820               	movf	___bmul@multiplicand,w
  4105  0E25  00A1               	movwf	??___bmul
  4106  0E26  0821               	movf	??___bmul,w
  4107  0E27  07A2               	addwf	___bmul@product,f
  4108  0E28                     l2719:	
  4109  0E28  1003               	clrc
  4110  0E29  0DA0               	rlf	___bmul@multiplicand,f
  4111  0E2A  1003               	clrc
  4112  0E2B  0CA3               	rrf	___bmul@multiplier,f
  4113  0E2C  08A3               	movf	___bmul@multiplier,f
  4114  0E2D  1D03               	skipz
  4115  0E2E  2E22               	goto	l2715
  4116  0E2F  0822               	movf	___bmul@product,w
  4117  0E30  0008               	return
  4118  0E31                     __end_of___bmul:	
  4119                           
  4120                           	psect	text8
  4121  0F67                     __ptext8:	
  4122 ;; *************** function ___awmod *****************
  4123 ;; Defined at:
  4124 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awmod.c"
  4125 ;; Parameters:    Size  Location     Type
  4126 ;;  divisor         2    0[BANK0 ] int 
  4127 ;;  dividend        2    2[BANK0 ] int 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;  sign            1    6[BANK0 ] unsigned char 
  4130 ;;  counter         1    5[BANK0 ] unsigned char 
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  2    0[BANK0 ] int 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4140 ;;      Params:         0       4       0       0       0       0       0       0
  4141 ;;      Locals:         0       2       0       0       0       0       0       0
  4142 ;;      Temps:          0       1       0       0       0       0       0       0
  4143 ;;      Totals:         0       7       0       0       0       0       0       0
  4144 ;;Total ram usage:        7 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    2
  4147 ;; This function calls:
  4148 ;;		Nothing
  4149 ;; This function is called by:
  4150 ;;		_main
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           
  4155                           ;psect for function ___awmod
  4156  0F67                     ___awmod:	
  4157                           
  4158                           ;incstack = 0
  4159                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4160  0F67  0020               	movlb	0	; select bank0
  4161  0F68  01A6               	clrf	___awmod@sign
  4162  0F69  1FA3               	btfss	___awmod@dividend+1,7
  4163  0F6A  2F72               	goto	l2737
  4164  0F6B  09A2               	comf	___awmod@dividend,f
  4165  0F6C  09A3               	comf	___awmod@dividend+1,f
  4166  0F6D  0AA2               	incf	___awmod@dividend,f
  4167  0F6E  1903               	skipnz
  4168  0F6F  0AA3               	incf	___awmod@dividend+1,f
  4169  0F70  01A6               	clrf	___awmod@sign
  4170  0F71  0AA6               	incf	___awmod@sign,f
  4171  0F72                     l2737:	
  4172  0F72  1FA1               	btfss	___awmod@divisor+1,7
  4173  0F73  2F79               	goto	l2741
  4174  0F74  09A0               	comf	___awmod@divisor,f
  4175  0F75  09A1               	comf	___awmod@divisor+1,f
  4176  0F76  0AA0               	incf	___awmod@divisor,f
  4177  0F77  1903               	skipnz
  4178  0F78  0AA1               	incf	___awmod@divisor+1,f
  4179  0F79                     l2741:	
  4180  0F79  0821               	movf	___awmod@divisor+1,w
  4181  0F7A  0420               	iorwf	___awmod@divisor,w
  4182  0F7B  1903               	skipnz
  4183  0F7C  2FA0               	goto	l2759
  4184  0F7D  01A5               	clrf	___awmod@counter
  4185  0F7E  0AA5               	incf	___awmod@counter,f
  4186  0F7F                     l2749:	
  4187  0F7F  1BA1               	btfsc	___awmod@divisor+1,7
  4188  0F80  2F8B               	goto	l2751
  4189  0F81  3001               	movlw	1
  4190  0F82                     u2855:	
  4191  0F82  35A0               	lslf	___awmod@divisor,f
  4192  0F83  0DA1               	rlf	___awmod@divisor+1,f
  4193  0F84  0B89               	decfsz	9,f
  4194  0F85  2F82               	goto	u2855
  4195  0F86  3001               	movlw	1
  4196  0F87  00A4               	movwf	??___awmod
  4197  0F88  0824               	movf	??___awmod,w
  4198  0F89  07A5               	addwf	___awmod@counter,f
  4199  0F8A  2F7F               	goto	l2749
  4200  0F8B                     l2751:	
  4201  0F8B  0821               	movf	___awmod@divisor+1,w
  4202  0F8C  0223               	subwf	___awmod@dividend+1,w
  4203  0F8D  1D03               	skipz
  4204  0F8E  2F91               	goto	u2875
  4205  0F8F  0820               	movf	___awmod@divisor,w
  4206  0F90  0222               	subwf	___awmod@dividend,w
  4207  0F91                     u2875:	
  4208  0F91  1C03               	skipc
  4209  0F92  2F97               	goto	l2755
  4210  0F93  0820               	movf	___awmod@divisor,w
  4211  0F94  02A2               	subwf	___awmod@dividend,f
  4212  0F95  0821               	movf	___awmod@divisor+1,w
  4213  0F96  3BA3               	subwfb	___awmod@dividend+1,f
  4214  0F97                     l2755:	
  4215  0F97  3001               	movlw	1
  4216  0F98                     u2885:	
  4217  0F98  36A1               	lsrf	___awmod@divisor+1,f
  4218  0F99  0CA0               	rrf	___awmod@divisor,f
  4219  0F9A  0B89               	decfsz	9,f
  4220  0F9B  2F98               	goto	u2885
  4221  0F9C  3001               	movlw	1
  4222  0F9D  02A5               	subwf	___awmod@counter,f
  4223  0F9E  1D03               	btfss	3,2
  4224  0F9F  2F8B               	goto	l2751
  4225  0FA0                     l2759:	
  4226  0FA0  0826               	movf	___awmod@sign,w
  4227  0FA1  1903               	btfsc	3,2
  4228  0FA2  2FA8               	goto	l2763
  4229  0FA3  09A2               	comf	___awmod@dividend,f
  4230  0FA4  09A3               	comf	___awmod@dividend+1,f
  4231  0FA5  0AA2               	incf	___awmod@dividend,f
  4232  0FA6  1903               	skipnz
  4233  0FA7  0AA3               	incf	___awmod@dividend+1,f
  4234  0FA8                     l2763:	
  4235  0FA8  0823               	movf	___awmod@dividend+1,w
  4236  0FA9  01A1               	clrf	?___awmod+1
  4237  0FAA  07A1               	addwf	?___awmod+1,f
  4238  0FAB  0822               	movf	___awmod@dividend,w
  4239  0FAC  01A0               	clrf	?___awmod
  4240  0FAD  07A0               	addwf	?___awmod,f
  4241  0FAE  0008               	return
  4242  0FAF                     __end_of___awmod:	
  4243                           
  4244                           	psect	text9
  4245  0F26                     __ptext9:	
  4246 ;; *************** function _Triac_Counter *****************
  4247 ;; Defined at:
  4248 ;;		line 22 in file "NB_fans.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  speed           2   15[BANK0 ] int 
  4251 ;;  maxCount        2   17[BANK0 ] int 
  4252 ;;  zeroDelay       2   19[BANK0 ] int 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  2   15[BANK0 ] int 
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0, pclath, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4264 ;;      Params:         0       6       0       0       0       0       0       0
  4265 ;;      Locals:         0       0       0       0       0       0       0       0
  4266 ;;      Temps:          0       2       0       0       0       0       0       0
  4267 ;;      Totals:         0       8       0       0       0       0       0       0
  4268 ;;Total ram usage:        8 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    3
  4271 ;; This function calls:
  4272 ;;		___awdiv
  4273 ;;		___wmul
  4274 ;; This function is called by:
  4275 ;;		_main
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           
  4280                           ;psect for function _Triac_Counter
  4281  0F26                     _Triac_Counter:	
  4282                           
  4283                           ;NB_fans.c: 23: if((speed<60)&&(speed!=0)){
  4284                           
  4285                           ;incstack = 0
  4286                           ; Regs used in _Triac_Counter: [wreg+status,2+status,0+pclath+cstack]
  4287  0F26  0020               	movlb	0	; select bank0
  4288  0F27  0830               	movf	Triac_Counter@speed+1,w
  4289  0F28  3A80               	xorlw	128
  4290  0F29  00B5               	movwf	??_Triac_Counter
  4291  0F2A  3080               	movlw	128
  4292  0F2B  0235               	subwf	??_Triac_Counter,w
  4293  0F2C  1D03               	skipz
  4294  0F2D  2F30               	goto	u2515
  4295  0F2E  303C               	movlw	60
  4296  0F2F  022F               	subwf	Triac_Counter@speed,w
  4297  0F30                     u2515:	
  4298  0F30  1803               	skipnc
  4299  0F31  2F3B               	goto	l2535
  4300  0F32  0020               	movlb	0	; select bank0
  4301  0F33  0830               	movf	Triac_Counter@speed+1,w
  4302  0F34  042F               	iorwf	Triac_Counter@speed,w
  4303  0F35  1903               	skipnz
  4304  0F36  2F3B               	goto	l2535
  4305                           
  4306                           ;NB_fans.c: 24: speed = 60;
  4307  0F37  303C               	movlw	60
  4308  0F38  00AF               	movwf	Triac_Counter@speed
  4309  0F39  3000               	movlw	0
  4310  0F3A  00B0               	movwf	Triac_Counter@speed+1
  4311  0F3B                     l2535:	
  4312                           
  4313                           ;NB_fans.c: 25: }
  4314                           ;NB_fans.c: 26: return ((100-speed)*maxCount/100 + zeroDelay);
  4315  0F3B  3064               	movlw	100
  4316  0F3C  0020               	movlb	0	; select bank0
  4317  0F3D  00A6               	movwf	___awdiv@divisor
  4318  0F3E  3000               	movlw	0
  4319  0F3F  00A7               	movwf	___awdiv@divisor+1
  4320  0F40  092F               	comf	Triac_Counter@speed,w
  4321  0F41  00B5               	movwf	??_Triac_Counter
  4322  0F42  0930               	comf	Triac_Counter@speed+1,w
  4323  0F43  00B6               	movwf	??_Triac_Counter+1
  4324  0F44  0AB5               	incf	??_Triac_Counter,f
  4325  0F45  1903               	skipnz
  4326  0F46  0AB6               	incf	??_Triac_Counter+1,f
  4327  0F47  0835               	movf	??_Triac_Counter,w
  4328  0F48  3E64               	addlw	100
  4329  0F49  00A0               	movwf	___wmul@multiplier
  4330  0F4A  3000               	movlw	0
  4331  0F4B  3D36               	addwfc	??_Triac_Counter+1,w
  4332  0F4C  00A1               	movwf	___wmul@multiplier+1
  4333  0F4D  0832               	movf	Triac_Counter@maxCount+1,w
  4334  0F4E  01A3               	clrf	___wmul@multiplicand+1
  4335  0F4F  07A3               	addwf	___wmul@multiplicand+1,f
  4336  0F50  0831               	movf	Triac_Counter@maxCount,w
  4337  0F51  01A2               	clrf	___wmul@multiplicand
  4338  0F52  07A2               	addwf	___wmul@multiplicand,f
  4339  0F53  318E  2679  318F   	fcall	___wmul
  4340  0F56  0020               	movlb	0	; select bank0
  4341  0F57  0821               	movf	?___wmul+1,w
  4342  0F58  01A9               	clrf	___awdiv@dividend+1
  4343  0F59  07A9               	addwf	___awdiv@dividend+1,f
  4344  0F5A  0820               	movf	?___wmul,w
  4345  0F5B  01A8               	clrf	___awdiv@dividend
  4346  0F5C  07A8               	addwf	___awdiv@dividend,f
  4347  0F5D  3187  272A         	fcall	___awdiv
  4348  0F5F  0020               	movlb	0	; select bank0
  4349  0F60  0833               	movf	Triac_Counter@zeroDelay,w
  4350  0F61  0726               	addwf	?___awdiv,w
  4351  0F62  00AF               	movwf	?_Triac_Counter
  4352  0F63  0834               	movf	Triac_Counter@zeroDelay+1,w
  4353  0F64  3D27               	addwfc	?___awdiv+1,w
  4354  0F65  00B0               	movwf	?_Triac_Counter+1
  4355  0F66  0008               	return
  4356  0F67                     __end_of_Triac_Counter:	
  4357                           
  4358                           	psect	text10
  4359  0E79                     __ptext10:	
  4360 ;; *************** function ___wmul *****************
  4361 ;; Defined at:
  4362 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\Umul16.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4365 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  product         2    4[BANK0 ] unsigned int 
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  2    0[BANK0 ] unsigned int 
  4370 ;; Registers used:
  4371 ;;		wreg, status,2, status,0
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4377 ;;      Params:         0       4       0       0       0       0       0       0
  4378 ;;      Locals:         0       2       0       0       0       0       0       0
  4379 ;;      Temps:          0       0       0       0       0       0       0       0
  4380 ;;      Totals:         0       6       0       0       0       0       0       0
  4381 ;;Total ram usage:        6 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:    2
  4384 ;; This function calls:
  4385 ;;		Nothing
  4386 ;; This function is called by:
  4387 ;;		_main
  4388 ;;		_Triac_Counter
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           
  4393                           ;psect for function ___wmul
  4394  0E79                     ___wmul:	
  4395                           
  4396                           ;incstack = 0
  4397                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4398  0E79  0020               	movlb	0	; select bank0
  4399  0E7A  01A4               	clrf	___wmul@product
  4400  0E7B  01A5               	clrf	___wmul@product+1
  4401  0E7C                     l2333:	
  4402  0E7C  1C20               	btfss	___wmul@multiplier,0
  4403  0E7D  2E82               	goto	l556
  4404  0E7E  0822               	movf	___wmul@multiplicand,w
  4405  0E7F  07A4               	addwf	___wmul@product,f
  4406  0E80  0823               	movf	___wmul@multiplicand+1,w
  4407  0E81  3DA5               	addwfc	___wmul@product+1,f
  4408  0E82                     l556:	
  4409  0E82  3001               	movlw	1
  4410  0E83                     u2225:	
  4411  0E83  35A2               	lslf	___wmul@multiplicand,f
  4412  0E84  0DA3               	rlf	___wmul@multiplicand+1,f
  4413  0E85  0B89               	decfsz	9,f
  4414  0E86  2E83               	goto	u2225
  4415  0E87  3001               	movlw	1
  4416  0E88                     u2235:	
  4417  0E88  36A1               	lsrf	___wmul@multiplier+1,f
  4418  0E89  0CA0               	rrf	___wmul@multiplier,f
  4419  0E8A  0B89               	decfsz	9,f
  4420  0E8B  2E88               	goto	u2235
  4421  0E8C  0821               	movf	___wmul@multiplier+1,w
  4422  0E8D  0420               	iorwf	___wmul@multiplier,w
  4423  0E8E  1D03               	skipz
  4424  0E8F  2E7C               	goto	l2333
  4425  0E90  0825               	movf	___wmul@product+1,w
  4426  0E91  01A1               	clrf	?___wmul+1
  4427  0E92  07A1               	addwf	?___wmul+1,f
  4428  0E93  0824               	movf	___wmul@product,w
  4429  0E94  01A0               	clrf	?___wmul
  4430  0E95  07A0               	addwf	?___wmul,f
  4431  0E96  0008               	return
  4432  0E97                     __end_of___wmul:	
  4433                           
  4434                           	psect	text11
  4435  0677                     __ptext11:	
  4436 ;; *************** function _Tick24BitTimer *****************
  4437 ;; Defined at:
  4438 ;;		line 30 in file "NB_Time.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;  timer4          4    0[BANK0 ] unsigned long 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  temp            4    8[BANK0 ] unsigned long 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  4    0[BANK0 ] unsigned long 
  4445 ;; Registers used:
  4446 ;;		wreg
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4452 ;;      Params:         0       4       0       0       0       0       0       0
  4453 ;;      Locals:         0       4       0       0       0       0       0       0
  4454 ;;      Temps:          0       4       0       0       0       0       0       0
  4455 ;;      Totals:         0      12       0       0       0       0       0       0
  4456 ;;Total ram usage:       12 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    2
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_main
  4463 ;;		_RHT05Init
  4464 ;;		_CheckSensorStatus
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           
  4469                           ;psect for function _Tick24BitTimer
  4470  0677                     _Tick24BitTimer:	
  4471                           
  4472                           ;NB_Time.c: 31: NB_TIMER_ temp=0;
  4473                           
  4474                           ;incstack = 0
  4475                           ; Regs used in _Tick24BitTimer: [wreg]
  4476  0677  3000               	movlw	0
  4477  0678  0020               	movlb	0	; select bank0
  4478  0679  00AB               	movwf	Tick24BitTimer@temp+3
  4479  067A  3000               	movlw	0
  4480  067B  00AA               	movwf	Tick24BitTimer@temp+2
  4481  067C  3000               	movlw	0
  4482  067D  00A9               	movwf	Tick24BitTimer@temp+1
  4483  067E  3000               	movlw	0
  4484  067F  00A8               	movwf	Tick24BitTimer@temp
  4485                           
  4486                           ;NB_Time.c: 32: temp = timer4 + tick_us1;
  4487  0680  0820               	movf	Tick24BitTimer@timer4,w
  4488  0681  077A               	addwf	_tick_us1,w
  4489  0682  00A4               	movwf	??_Tick24BitTimer
  4490  0683  0821               	movf	Tick24BitTimer@timer4+1,w
  4491  0684  3D7B               	addwfc	_tick_us1+1,w
  4492  0685  00A5               	movwf	??_Tick24BitTimer+1
  4493  0686  0822               	movf	Tick24BitTimer@timer4+2,w
  4494  0687  3D7C               	addwfc	_tick_us1+2,w
  4495  0688  00A6               	movwf	??_Tick24BitTimer+2
  4496  0689  0823               	movf	Tick24BitTimer@timer4+3,w
  4497  068A  3D7D               	addwfc	_tick_us1+3,w
  4498  068B  00A7               	movwf	??_Tick24BitTimer+3
  4499  068C  0827               	movf	??_Tick24BitTimer+3,w
  4500  068D  00AB               	movwf	Tick24BitTimer@temp+3
  4501  068E  0826               	movf	??_Tick24BitTimer+2,w
  4502  068F  00AA               	movwf	Tick24BitTimer@temp+2
  4503  0690  0825               	movf	??_Tick24BitTimer+1,w
  4504  0691  00A9               	movwf	Tick24BitTimer@temp+1
  4505  0692  0824               	movf	??_Tick24BitTimer,w
  4506  0693  00A8               	movwf	Tick24BitTimer@temp
  4507                           
  4508                           ;NB_Time.c: 33: if((temp&0x7FFFFF)>4800000){
  4509  0694  30FF               	movlw	255
  4510  0695  0528               	andwf	Tick24BitTimer@temp,w
  4511  0696  00A4               	movwf	??_Tick24BitTimer
  4512  0697  30FF               	movlw	255
  4513  0698  0529               	andwf	Tick24BitTimer@temp+1,w
  4514  0699  00A5               	movwf	??_Tick24BitTimer+1
  4515  069A  307F               	movlw	127
  4516  069B  052A               	andwf	Tick24BitTimer@temp+2,w
  4517  069C  00A6               	movwf	??_Tick24BitTimer+2
  4518  069D  3000               	movlw	0
  4519  069E  052B               	andwf	Tick24BitTimer@temp+3,w
  4520  069F  00A7               	movwf	??_Tick24BitTimer+3
  4521  06A0  3000               	movlw	0
  4522  06A1  0227               	subwf	??_Tick24BitTimer+3,w
  4523  06A2  1D03               	skipz
  4524  06A3  2EAE               	goto	u2505
  4525  06A4  3049               	movlw	73
  4526  06A5  0226               	subwf	??_Tick24BitTimer+2,w
  4527  06A6  1D03               	skipz
  4528  06A7  2EAE               	goto	u2505
  4529  06A8  303E               	movlw	62
  4530  06A9  0225               	subwf	??_Tick24BitTimer+1,w
  4531  06AA  1D03               	skipz
  4532  06AB  2EAE               	goto	u2505
  4533  06AC  3001               	movlw	1
  4534  06AD  0224               	subwf	??_Tick24BitTimer,w
  4535  06AE                     u2505:	
  4536  06AE  1C03               	skipc
  4537  06AF  2EC8               	goto	l229
  4538                           
  4539                           ;NB_Time.c: 34: temp -= 4800000;
  4540  06B0  3000               	movlw	0
  4541  06B1  00A4               	movwf	??_Tick24BitTimer
  4542  06B2  303E               	movlw	62
  4543  06B3  00A5               	movwf	??_Tick24BitTimer+1
  4544  06B4  3049               	movlw	73
  4545  06B5  00A6               	movwf	??_Tick24BitTimer+2
  4546  06B6  3000               	movlw	0
  4547  06B7  00A7               	movwf	??_Tick24BitTimer+3
  4548  06B8  0824               	movf	??_Tick24BitTimer,w
  4549  06B9  02A8               	subwf	Tick24BitTimer@temp,f
  4550  06BA  0825               	movf	??_Tick24BitTimer+1,w
  4551  06BB  3BA9               	subwfb	Tick24BitTimer@temp+1,f
  4552  06BC  0826               	movf	??_Tick24BitTimer+2,w
  4553  06BD  3BAA               	subwfb	Tick24BitTimer@temp+2,f
  4554  06BE  0827               	movf	??_Tick24BitTimer+3,w
  4555  06BF  3BAB               	subwfb	Tick24BitTimer@temp+3,f
  4556                           
  4557                           ;NB_Time.c: 35: temp ^= 0x800000;
  4558  06C0  3000               	movlw	0
  4559  06C1  06A8               	xorwf	Tick24BitTimer@temp,f
  4560  06C2  3000               	movlw	0
  4561  06C3  06A9               	xorwf	Tick24BitTimer@temp+1,f
  4562  06C4  3080               	movlw	128
  4563  06C5  06AA               	xorwf	Tick24BitTimer@temp+2,f
  4564  06C6  3000               	movlw	0
  4565  06C7  06AB               	xorwf	Tick24BitTimer@temp+3,f
  4566  06C8                     l229:	
  4567                           
  4568                           ;NB_Time.c: 36: }
  4569                           ;NB_Time.c: 44: return temp;
  4570  06C8  082B               	movf	Tick24BitTimer@temp+3,w
  4571  06C9  00A3               	movwf	?_Tick24BitTimer+3
  4572  06CA  082A               	movf	Tick24BitTimer@temp+2,w
  4573  06CB  00A2               	movwf	?_Tick24BitTimer+2
  4574  06CC  0829               	movf	Tick24BitTimer@temp+1,w
  4575  06CD  00A1               	movwf	?_Tick24BitTimer+1
  4576  06CE  0828               	movf	Tick24BitTimer@temp,w
  4577  06CF  00A0               	movwf	?_Tick24BitTimer
  4578  06D0  0008               	return
  4579  06D1                     __end_of_Tick24BitTimer:	
  4580                           
  4581                           	psect	text12
  4582  0E00                     __ptext12:	
  4583 ;; *************** function _SetClockSpeed *****************
  4584 ;; Defined at:
  4585 ;;		line 15 in file "NB_Time.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;		None               void
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4599 ;;      Params:         0       0       0       0       0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0       0
  4602 ;;      Totals:         0       0       0       0       0       0       0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    2
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           
  4614                           ;psect for function _SetClockSpeed
  4615  0E00                     _SetClockSpeed:	
  4616                           
  4617                           ;NB_Time.c: 17: OSCCONbits.SCS=0;
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _SetClockSpeed: [wreg+status,2+status,0]
  4621  0E00  30FC               	movlw	-4
  4622  0E01  0021               	movlb	1	; select bank1
  4623  0E02  0599               	andwf	25,f	;volatile
  4624                           
  4625                           ;NB_Time.c: 18: OSCCONbits.IRCF= 0b1111;
  4626  0E03  3078               	movlw	120
  4627  0E04  0499               	iorwf	25,f	;volatile
  4628                           
  4629                           ;NB_Time.c: 19: OSCCONbits.SPLLEN = 1;
  4630  0E05  1799               	bsf	25,7	;volatile
  4631  0E06  0008               	return
  4632  0E07                     __end_of_SetClockSpeed:	
  4633                           ;NB_Time.c: 20: return;
  4634                           
  4635                           
  4636                           	psect	text13
  4637  03B4                     __ptext13:	
  4638 ;; *************** function _RHT_readData *****************
  4639 ;; Defined at:
  4640 ;;		line 129 in file "rht03.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  port            1    wreg     unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  port            1   16[BANK0 ] unsigned char 
  4645 ;;  i               2   17[BANK0 ] int 
  4646 ;;  error           1   15[BANK0 ] enum E4722
  4647 ;;  checksum        1   14[BANK0 ] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      enum E4931
  4650 ;; Registers used:
  4651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4657 ;;      Params:         0       0       0       0       0       0       0       0
  4658 ;;      Locals:         0       5       0       0       0       0       0       0
  4659 ;;      Temps:          0       3       0       0       0       0       0       0
  4660 ;;      Totals:         0       8       0       0       0       0       0       0
  4661 ;;Total ram usage:        8 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    3
  4664 ;; This function calls:
  4665 ;;		_RHT_readByte
  4666 ;;		_RHT_start
  4667 ;; This function is called by:
  4668 ;;		_main
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _RHT_readData
  4674  03B4                     _RHT_readData:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _RHT_readData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4678                           ;RHT_readData@port stored from wreg
  4679  03B4  0020               	movlb	0	; select bank0
  4680  03B5  00B0               	movwf	RHT_readData@port
  4681                           
  4682                           ;rht03.c: 131: int i;
  4683                           ;rht03.c: 132: uint8_t checksum = 0;
  4684  03B6  01AE               	clrf	RHT_readData@checksum
  4685                           
  4686                           ;rht03.c: 133: RHT_ERR_t error = 0;
  4687  03B7  01AF               	clrf	RHT_readData@error
  4688                           
  4689                           ;rht03.c: 136: error = RHT_start(port);
  4690  03B8  0830               	movf	RHT_readData@port,w
  4691  03B9  3185  2591  3183   	fcall	_RHT_start
  4692  03BC  0020               	movlb	0	; select bank0
  4693  03BD  00AB               	movwf	??_RHT_readData
  4694  03BE  082B               	movf	??_RHT_readData,w
  4695  03BF  00AF               	movwf	RHT_readData@error
  4696                           
  4697                           ;rht03.c: 138: if (error == 0) {
  4698  03C0  08AF               	movf	RHT_readData@error,f
  4699  03C1  1D03               	skipz
  4700  03C2  2C21               	goto	l2605
  4701                           
  4702                           ;rht03.c: 141: for (i = 0; i < 5; i++) {
  4703  03C3  01B1               	clrf	RHT_readData@i
  4704  03C4  01B2               	clrf	RHT_readData@i+1
  4705  03C5  0832               	movf	RHT_readData@i+1,w
  4706  03C6  3A80               	xorlw	128
  4707  03C7  00AB               	movwf	??_RHT_readData
  4708  03C8  3080               	movlw	128
  4709  03C9  022B               	subwf	??_RHT_readData,w
  4710  03CA  1D03               	skipz
  4711  03CB  2BCE               	goto	u2595
  4712  03CC  3005               	movlw	5
  4713  03CD  0231               	subwf	RHT_readData@i,w
  4714  03CE                     u2595:	
  4715  03CE  1803               	btfsc	3,0
  4716  03CF  2BF3               	goto	l2587
  4717  03D0                     l2577:	
  4718                           
  4719                           ;rht03.c: 142: error = RHT_readByte(&RHT_data[i], port);
  4720  03D0  0020               	movlb	0	; select bank0
  4721  03D1  0830               	movf	RHT_readData@port,w
  4722  03D2  00AB               	movwf	??_RHT_readData
  4723  03D3  082B               	movf	??_RHT_readData,w
  4724  03D4  00A0               	movwf	RHT_readByte@port
  4725  03D5  0831               	movf	RHT_readData@i,w
  4726  03D6  3EEA               	addlw	_RHT_data& (0+255)
  4727  03D7  3185  2503  3183   	fcall	_RHT_readByte
  4728  03DA  0020               	movlb	0	; select bank0
  4729  03DB  00AC               	movwf	??_RHT_readData+1
  4730  03DC  082C               	movf	??_RHT_readData+1,w
  4731  03DD  00AF               	movwf	RHT_readData@error
  4732                           
  4733                           ;rht03.c: 143: if (error) {
  4734  03DE  082F               	movf	RHT_readData@error,w
  4735  03DF  1903               	btfsc	3,2
  4736  03E0  2BE4               	goto	l2585
  4737                           
  4738                           ;rht03.c: 145: return i+1;
  4739  03E1  0831               	movf	RHT_readData@i,w
  4740  03E2  3E01               	addlw	1
  4741  03E3  0008               	return
  4742  03E4                     l2585:	
  4743  03E4  3001               	movlw	1
  4744  03E5  07B1               	addwf	RHT_readData@i,f
  4745  03E6  3000               	movlw	0
  4746  03E7  3DB2               	addwfc	RHT_readData@i+1,f
  4747  03E8  0832               	movf	RHT_readData@i+1,w
  4748  03E9  3A80               	xorlw	128
  4749  03EA  00AB               	movwf	??_RHT_readData
  4750  03EB  3080               	movlw	128
  4751  03EC  022B               	subwf	??_RHT_readData,w
  4752  03ED  1D03               	skipz
  4753  03EE  2BF1               	goto	u2615
  4754  03EF  3005               	movlw	5
  4755  03F0  0231               	subwf	RHT_readData@i,w
  4756  03F1                     u2615:	
  4757  03F1  1C03               	skipc
  4758  03F2  2BD0               	goto	l2577
  4759  03F3                     l2587:	
  4760                           
  4761                           ;rht03.c: 146: }
  4762                           ;rht03.c: 147: }
  4763                           ;rht03.c: 150: for (i = 0; i < 4; i++) {
  4764  03F3  0020               	movlb	0	; select bank0
  4765  03F4  01B1               	clrf	RHT_readData@i
  4766  03F5  01B2               	clrf	RHT_readData@i+1
  4767  03F6  0832               	movf	RHT_readData@i+1,w
  4768  03F7  3A80               	xorlw	128
  4769  03F8  00AB               	movwf	??_RHT_readData
  4770  03F9  3080               	movlw	128
  4771  03FA  022B               	subwf	??_RHT_readData,w
  4772  03FB  1D03               	skipz
  4773  03FC  2BFF               	goto	u2625
  4774  03FD  3004               	movlw	4
  4775  03FE  0231               	subwf	RHT_readData@i,w
  4776  03FF                     u2625:	
  4777  03FF  1803               	btfsc	3,0
  4778  0400  2C19               	goto	l2599
  4779  0401                     l2593:	
  4780                           
  4781                           ;rht03.c: 151: checksum += RHT_data[i];
  4782  0401  0020               	movlb	0	; select bank0
  4783  0402  0831               	movf	RHT_readData@i,w
  4784  0403  3EEA               	addlw	_RHT_data& (0+255)
  4785  0404  0086               	movwf	6
  4786  0405  0187               	clrf	7
  4787  0406  0801               	movf	1,w
  4788  0407  00AB               	movwf	??_RHT_readData
  4789  0408  082B               	movf	??_RHT_readData,w
  4790  0409  07AE               	addwf	RHT_readData@checksum,f
  4791  040A  3001               	movlw	1
  4792  040B  07B1               	addwf	RHT_readData@i,f
  4793  040C  3000               	movlw	0
  4794  040D  3DB2               	addwfc	RHT_readData@i+1,f
  4795  040E  0832               	movf	RHT_readData@i+1,w
  4796  040F  3A80               	xorlw	128
  4797  0410  00AB               	movwf	??_RHT_readData
  4798  0411  3080               	movlw	128
  4799  0412  022B               	subwf	??_RHT_readData,w
  4800  0413  1D03               	skipz
  4801  0414  2C17               	goto	u2635
  4802  0415  3004               	movlw	4
  4803  0416  0231               	subwf	RHT_readData@i,w
  4804  0417                     u2635:	
  4805  0417  1C03               	skipc
  4806  0418  2C01               	goto	l2593
  4807  0419                     l2599:	
  4808                           
  4809                           ;rht03.c: 152: }
  4810                           ;rht03.c: 155: if (checksum != RHT_data[4]) {
  4811  0419  0021               	movlb	1	; select bank1
  4812  041A  086E               	movf	(_RHT_data^(0+128)+4),w
  4813  041B  0020               	movlb	0	; select bank0
  4814  041C  062E               	xorwf	RHT_readData@checksum,w
  4815  041D  1903               	skipnz
  4816  041E  2C21               	goto	l2605
  4817                           
  4818                           ;rht03.c: 156: return ERR_CHECKSUM;
  4819  041F  3005               	movlw	5
  4820  0420  0008               	return
  4821  0421                     l2605:	
  4822                           
  4823                           ;rht03.c: 157: }
  4824                           ;rht03.c: 159: }
  4825                           ;rht03.c: 161: rh[port] = RHT_data[0] << 8;
  4826  0421  0021               	movlb	1	; select bank1
  4827  0422  086A               	movf	_RHT_data^(0+128),w
  4828  0423  0020               	movlb	0	; select bank0
  4829  0424  00AB               	movwf	??_RHT_readData
  4830  0425  01AC               	clrf	??_RHT_readData+1
  4831  0426  082B               	movf	??_RHT_readData,w
  4832  0427  00AC               	movwf	??_RHT_readData+1
  4833  0428  01AB               	clrf	??_RHT_readData
  4834  0429  3530               	lslf	RHT_readData@port,w
  4835  042A  3EAA               	addlw	_rh& (0+255)
  4836  042B  0086               	movwf	6
  4837  042C  0187               	clrf	7
  4838  042D  082B               	movf	??_RHT_readData,w
  4839  042E  3FC0               	movwi [0]fsr1
  4840  042F  082C               	movf	??_RHT_readData+1,w
  4841  0430  3FC1               	movwi [1]fsr1
  4842                           
  4843                           ;rht03.c: 162: rh[port] |= RHT_data[1];
  4844  0431  0021               	movlb	1	; select bank1
  4845  0432  086B               	movf	(_RHT_data^(0+128)+1),w
  4846  0433  0020               	movlb	0	; select bank0
  4847  0434  00AB               	movwf	??_RHT_readData
  4848  0435  01AC               	clrf	??_RHT_readData+1
  4849  0436  3530               	lslf	RHT_readData@port,w
  4850  0437  3EAA               	addlw	_rh& (0+255)
  4851  0438  0086               	movwf	6
  4852  0439  0187               	clrf	7
  4853  043A  082B               	movf	??_RHT_readData,w
  4854  043B  0481               	iorwf	1,f
  4855  043C  3141               	addfsr 1,1
  4856  043D  082C               	movf	??_RHT_readData+1,w
  4857  043E  0481               	iorwf	1,f
  4858                           
  4859                           ;rht03.c: 164: temp[port] = RHT_data[2] << 8;
  4860  043F  0021               	movlb	1	; select bank1
  4861  0440  086C               	movf	(_RHT_data^(0+128)+2),w
  4862  0441  0020               	movlb	0	; select bank0
  4863  0442  00AB               	movwf	??_RHT_readData
  4864  0443  01AC               	clrf	??_RHT_readData+1
  4865  0444  082B               	movf	??_RHT_readData,w
  4866  0445  00AC               	movwf	??_RHT_readData+1
  4867  0446  01AB               	clrf	??_RHT_readData
  4868  0447  3530               	lslf	RHT_readData@port,w
  4869  0448  3EB2               	addlw	_temp& (0+255)
  4870  0449  0086               	movwf	6
  4871  044A  0187               	clrf	7
  4872  044B  082B               	movf	??_RHT_readData,w
  4873  044C  3FC0               	movwi [0]fsr1
  4874  044D  082C               	movf	??_RHT_readData+1,w
  4875  044E  3FC1               	movwi [1]fsr1
  4876                           
  4877                           ;rht03.c: 165: temp[port] |= RHT_data[3];
  4878  044F  0021               	movlb	1	; select bank1
  4879  0450  086D               	movf	(_RHT_data^(0+128)+3),w
  4880  0451  0020               	movlb	0	; select bank0
  4881  0452  00AB               	movwf	??_RHT_readData
  4882  0453  01AC               	clrf	??_RHT_readData+1
  4883  0454  3530               	lslf	RHT_readData@port,w
  4884  0455  3EB2               	addlw	_temp& (0+255)
  4885  0456  0086               	movwf	6
  4886  0457  0187               	clrf	7
  4887  0458  082B               	movf	??_RHT_readData,w
  4888  0459  0481               	iorwf	1,f
  4889  045A  3141               	addfsr 1,1
  4890  045B  082C               	movf	??_RHT_readData+1,w
  4891  045C  0481               	iorwf	1,f
  4892                           
  4893                           ;rht03.c: 167: return error;
  4894  045D  082F               	movf	RHT_readData@error,w
  4895  045E  0008               	return
  4896  045F                     __end_of_RHT_readData:	
  4897                           
  4898                           	psect	text14
  4899  0591                     __ptext14:	
  4900 ;; *************** function _RHT_start *****************
  4901 ;; Defined at:
  4902 ;;		line 26 in file "rht03.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  port            1    wreg     unsigned char 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  port            1    2[BANK0 ] unsigned char 
  4907 ;;  mask            2    5[BANK0 ] int 
  4908 ;;  timeout         2    3[BANK0 ] int 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      enum E4722
  4911 ;; Registers used:
  4912 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4918 ;;      Params:         0       0       0       0       0       0       0       0
  4919 ;;      Locals:         0       5       0       0       0       0       0       0
  4920 ;;      Temps:          0       2       0       0       0       0       0       0
  4921 ;;      Totals:         0       7       0       0       0       0       0       0
  4922 ;;Total ram usage:        7 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    2
  4925 ;; This function calls:
  4926 ;;		Nothing
  4927 ;; This function is called by:
  4928 ;;		_RHT_readData
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _RHT_start
  4934  0591                     _RHT_start:	
  4935                           
  4936                           ;incstack = 0
  4937                           ; Regs used in _RHT_start: [wreg-fsr0h+status,2+status,0]
  4938                           ;RHT_start@port stored from wreg
  4939  0591  0020               	movlb	0	; select bank0
  4940  0592  00A2               	movwf	RHT_start@port
  4941                           
  4942                           ;rht03.c: 28: int timeout;
  4943                           ;rht03.c: 29: int mask;
  4944                           ;rht03.c: 32: switch (port) {
  4945  0593  2DA5               	goto	l2213
  4946  0594                     l2197:	
  4947                           ;rht03.c: 33: case 0: mask = (1<<0); break;
  4948                           
  4949  0594  3001               	movlw	1
  4950  0595  2DA1               	goto	L8
  4951  0596                     l2199:	
  4952                           ;rht03.c: 34: case 1: mask = (1<<1); break;
  4953                           
  4954  0596  3002               	movlw	2
  4955  0597  2DA1               	goto	L8
  4956  0598                     l2201:	
  4957                           ;rht03.c: 35: case 2: mask = (1<<2); break;
  4958                           
  4959  0598  3004               	movlw	4
  4960  0599  2DA1               	goto	L8
  4961  059A                     l2203:	
  4962                           ;rht03.c: 36: case 3: mask = (1<<3); break;
  4963                           
  4964  059A  3008               	movlw	8
  4965  059B  2DA1               	goto	L8
  4966  059C                     l2205:	
  4967                           ;rht03.c: 37: case 4: mask = (1<<4); break;
  4968                           
  4969  059C  3010               	movlw	16
  4970  059D  2DA1               	goto	L8
  4971  059E                     l2207:	
  4972                           ;rht03.c: 38: case 5: mask = (1<<5); break;
  4973                           
  4974  059E  3020               	movlw	32
  4975  059F  2DA1               	goto	L8
  4976  05A0                     l2209:	
  4977                           ;rht03.c: 39: case 6: mask = (1<<6); break;
  4978                           
  4979  05A0  3040               	movlw	64
  4980  05A1                     L8:	
  4981  05A1  00A5               	movwf	RHT_start@mask
  4982  05A2  3000               	movlw	0
  4983  05A3  00A6               	movwf	RHT_start@mask+1
  4984                           
  4985                           ;rht03.c: 41: }
  4986                           
  4987                           ;rht03.c: 40: default: break;
  4988  05A4  2DAF               	goto	l2215
  4989  05A5                     l2213:	
  4990  05A5  0822               	movf	RHT_start@port,w
  4991                           
  4992                           ; Switch size 1, requested type "space"
  4993                           ; Number of cases is 7, Range of values is 0 to 6
  4994                           ; switch strategies available:
  4995                           ; Name         Instructions Cycles
  4996                           ; direct_byte           20     6 (fixed)
  4997                           ; simple_byte           22    12 (average)
  4998                           ; jumptable            260     6 (fixed)
  4999                           ;	Chosen strategy is direct_byte
  5000  05A6  0084               	movwf	4
  5001  05A7  3007               	movlw	7
  5002  05A8  0204               	subwf	4,w
  5003  05A9  1803               	skipnc
  5004  05AA  2DAF               	goto	l2215
  5005  05AB  3188               	movlp	high S3069
  5006  05AC  3504               	lslf	4,w
  5007  05AD  3E24               	addlw	low S3069
  5008  05AE  0082               	movwf	2
  5009  05AF                     l2215:	
  5010                           
  5011                           ;rht03.c: 43: TRISC &= ~(mask);
  5012  05AF  0925               	comf	RHT_start@mask,w
  5013  05B0  00A0               	movwf	??_RHT_start
  5014  05B1  0820               	movf	??_RHT_start,w
  5015  05B2  0021               	movlb	1	; select bank1
  5016  05B3  058E               	andwf	14,f	;volatile
  5017                           
  5018                           ;rht03.c: 44: PORTC &= ~(mask);
  5019  05B4  0020               	movlb	0	; select bank0
  5020  05B5  0925               	comf	RHT_start@mask,w
  5021  05B6  00A0               	movwf	??_RHT_start
  5022  05B7  0820               	movf	??_RHT_start,w
  5023  05B8  058E               	andwf	14,f	;volatile
  5024                           
  5025                           ;rht03.c: 45: _delay((unsigned long)((5)*(32000000/4000.0)));
  5026  05B9  3034               	movlw	52
  5027  05BA  00A1               	movwf	??_RHT_start+1
  5028  05BB  30F1               	movlw	241
  5029  05BC  00A0               	movwf	??_RHT_start
  5030  05BD                     u3317:	
  5031  05BD  0BA0               	decfsz	??_RHT_start,f
  5032  05BE  2DBD               	goto	u3317
  5033  05BF  0BA1               	decfsz	??_RHT_start+1,f
  5034  05C0  2DBD               	goto	u3317
  5035  05C1  3200               	nop2
  5036                           
  5037                           ;rht03.c: 48: TRISC |= mask;
  5038  05C2  0020               	movlb	0	; select bank0
  5039  05C3  0825               	movf	RHT_start@mask,w
  5040  05C4  00A0               	movwf	??_RHT_start
  5041  05C5  0820               	movf	??_RHT_start,w
  5042  05C6  0021               	movlb	1	; select bank1
  5043  05C7  048E               	iorwf	14,f	;volatile
  5044                           
  5045                           ;rht03.c: 49: PORTC |= mask;
  5046  05C8  0020               	movlb	0	; select bank0
  5047  05C9  0825               	movf	RHT_start@mask,w
  5048  05CA  00A0               	movwf	??_RHT_start
  5049  05CB  0820               	movf	??_RHT_start,w
  5050  05CC  048E               	iorwf	14,f	;volatile
  5051                           
  5052                           ;rht03.c: 50: _delay((unsigned long)((40)*(32000000/4000000.0)));
  5053  05CD  306A               	movlw	106
  5054  05CE  00A0               	movwf	??_RHT_start
  5055  05CF                     u3327:	
  5056  05CF  0BA0               	decfsz	??_RHT_start,f
  5057  05D0  2DCF               	goto	u3327
  5058  05D1  0000               	nop
  5059                           
  5060                           ;rht03.c: 53: if ((PORTC & mask) != mask) {
  5061  05D2  0020               	movlb	0	; select bank0
  5062  05D3  080E               	movf	14,w	;volatile
  5063  05D4  0525               	andwf	RHT_start@mask,w
  5064  05D5  00A0               	movwf	??_RHT_start
  5065  05D6  01A1               	clrf	??_RHT_start+1
  5066  05D7  0826               	movf	RHT_start@mask+1,w
  5067  05D8  0621               	xorwf	??_RHT_start+1,w
  5068  05D9  1D03               	skipz
  5069  05DA  2DDD               	goto	u2065
  5070  05DB  0825               	movf	RHT_start@mask,w
  5071  05DC  0620               	xorwf	??_RHT_start,w
  5072  05DD                     u2065:	
  5073  05DD  1903               	skipnz
  5074  05DE  2E17               	goto	l2251
  5075                           
  5076                           ;rht03.c: 55: timeout = 128;
  5077  05DF  3080               	movlw	128
  5078  05E0  00A3               	movwf	RHT_start@timeout
  5079  05E1  3000               	movlw	0
  5080  05E2  00A4               	movwf	RHT_start@timeout+1
  5081  05E3  2DEA               	goto	l2227
  5082  05E4                     l2229:	
  5083  05E4  30FF               	movlw	255
  5084  05E5  07A3               	addwf	RHT_start@timeout,f
  5085  05E6  30FF               	movlw	255
  5086  05E7  3DA4               	addwfc	RHT_start@timeout+1,f
  5087  05E8  1BA4               	btfsc	RHT_start@timeout+1,7
  5088  05E9  2DF6               	goto	l388
  5089  05EA                     l2227:	
  5090                           ;rht03.c: 56: while((PORTC & mask) != mask && timeout-- > 0) ;
  5091                           
  5092  05EA  080E               	movf	14,w	;volatile
  5093  05EB  0525               	andwf	RHT_start@mask,w
  5094  05EC  00A0               	movwf	??_RHT_start
  5095  05ED  01A1               	clrf	??_RHT_start+1
  5096  05EE  0826               	movf	RHT_start@mask+1,w
  5097  05EF  0621               	xorwf	??_RHT_start+1,w
  5098  05F0  1D03               	skipz
  5099  05F1  2DF4               	goto	u2075
  5100  05F2  0825               	movf	RHT_start@mask,w
  5101  05F3  0620               	xorwf	??_RHT_start,w
  5102  05F4                     u2075:	
  5103  05F4  1D03               	btfss	3,2
  5104  05F5  2DE4               	goto	l2229
  5105  05F6                     l388:	
  5106                           
  5107                           ;rht03.c: 57: if (timeout < 0) {
  5108  05F6  1FA4               	btfss	RHT_start@timeout+1,7
  5109  05F7  2DFA               	goto	l2235
  5110                           
  5111                           ;rht03.c: 58: return ERR_START_TIMEOUT_1;
  5112  05F8  3002               	movlw	2
  5113  05F9  0008               	return
  5114  05FA                     l2235:	
  5115                           
  5116                           ;rht03.c: 59: }
  5117                           ;rht03.c: 61: timeout = 128;
  5118  05FA  3080               	movlw	128
  5119  05FB  00A3               	movwf	RHT_start@timeout
  5120  05FC  3000               	movlw	0
  5121  05FD  00A4               	movwf	RHT_start@timeout+1
  5122  05FE  2E05               	goto	l2237
  5123  05FF                     l2239:	
  5124  05FF  30FF               	movlw	255
  5125  0600  07A3               	addwf	RHT_start@timeout,f
  5126  0601  30FF               	movlw	255
  5127  0602  3DA4               	addwfc	RHT_start@timeout+1,f
  5128  0603  1BA4               	btfsc	RHT_start@timeout+1,7
  5129  0604  2E11               	goto	l395
  5130  0605                     l2237:	
  5131                           ;rht03.c: 62: while((PORTC & mask) == mask && timeout-- > 0) ;
  5132                           
  5133  0605  080E               	movf	14,w	;volatile
  5134  0606  0525               	andwf	RHT_start@mask,w
  5135  0607  00A0               	movwf	??_RHT_start
  5136  0608  01A1               	clrf	??_RHT_start+1
  5137  0609  0826               	movf	RHT_start@mask+1,w
  5138  060A  0621               	xorwf	??_RHT_start+1,w
  5139  060B  1D03               	skipz
  5140  060C  2E0F               	goto	u2105
  5141  060D  0825               	movf	RHT_start@mask,w
  5142  060E  0620               	xorwf	??_RHT_start,w
  5143  060F                     u2105:	
  5144  060F  1903               	btfsc	3,2
  5145  0610  2DFF               	goto	l2239
  5146  0611                     l395:	
  5147                           
  5148                           ;rht03.c: 63: if (timeout < 0) {
  5149  0611  1FA4               	btfss	RHT_start@timeout+1,7
  5150  0612  2E15               	goto	l2245
  5151                           
  5152                           ;rht03.c: 64: return ERR_START_TIMEOUT_2;
  5153  0613  3003               	movlw	3
  5154  0614  0008               	return
  5155  0615                     l2245:	
  5156                           
  5157                           ;rht03.c: 65: }
  5158                           ;rht03.c: 67: return ERR_OK;
  5159  0615  3000               	movlw	0
  5160                           
  5161                           ;rht03.c: 69: } else {
  5162  0616  0008               	return
  5163  0617                     l2251:	
  5164                           
  5165                           ;rht03.c: 70: return ERR_NO_RESPONSE;
  5166  0617  3001               	movlw	1
  5167  0618  0008               	return
  5168  0619                     __end_of_RHT_start:	
  5169                           
  5170                           	psect	swtext1
  5171  0824                     __pswtext1:	
  5172  0824                     S3069:	
  5173  0824  3185  2D94         	ljmp	l2197
  5174  0826  3185  2D96         	ljmp	l2199
  5175  0828  3185  2D98         	ljmp	l2201
  5176  082A  3185  2D9A         	ljmp	l2203
  5177  082C  3185  2D9C         	ljmp	l2205
  5178  082E  3185  2D9E         	ljmp	l2207
  5179  0830  3185  2DA0         	ljmp	l2209
  5180                           
  5181                           	psect	text15
  5182  0503                     __ptext15:	
  5183 ;; *************** function _RHT_readByte *****************
  5184 ;; Defined at:
  5185 ;;		line 75 in file "rht03.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  out             1    wreg     PTR unsigned char 
  5188 ;;		 -> RHT_data(5), 
  5189 ;;  port            1    0[BANK0 ] unsigned char 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  out             1    3[BANK0 ] PTR unsigned char 
  5192 ;;		 -> RHT_data(5), 
  5193 ;;  mask            2    9[BANK0 ] int 
  5194 ;;  timeout         2    7[BANK0 ] int 
  5195 ;;  i               1    6[BANK0 ] unsigned char 
  5196 ;;  tempByte        1    5[BANK0 ] unsigned char 
  5197 ;;  tempBit         1    4[BANK0 ] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  1    wreg      enum E4722
  5200 ;; Registers used:
  5201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5207 ;;      Params:         0       1       0       0       0       0       0       0
  5208 ;;      Locals:         0       8       0       0       0       0       0       0
  5209 ;;      Temps:          0       2       0       0       0       0       0       0
  5210 ;;      Totals:         0      11       0       0       0       0       0       0
  5211 ;;Total ram usage:       11 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    2
  5214 ;; This function calls:
  5215 ;;		Nothing
  5216 ;; This function is called by:
  5217 ;;		_RHT_readData
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function _RHT_readByte
  5223  0503                     _RHT_readByte:	
  5224                           
  5225                           ;incstack = 0
  5226                           ; Regs used in _RHT_readByte: [wreg-fsr1h+status,2+status,0]
  5227                           ;RHT_readByte@out stored from wreg
  5228  0503  0020               	movlb	0	; select bank0
  5229  0504  00A3               	movwf	RHT_readByte@out
  5230                           
  5231                           ;rht03.c: 77: char i;
  5232                           ;rht03.c: 78: int timeout;
  5233                           ;rht03.c: 79: char tempBit;
  5234                           ;rht03.c: 80: char tempByte = 0;
  5235  0505  01A5               	clrf	RHT_readByte@tempByte
  5236                           
  5237                           ;rht03.c: 82: int mask;
  5238                           ;rht03.c: 85: switch (port) {
  5239  0506  2D18               	goto	l2279
  5240  0507                     l2263:	
  5241                           ;rht03.c: 86: case 0: mask = (1<<0); break;
  5242                           
  5243  0507  3001               	movlw	1
  5244  0508  2D14               	goto	L14
  5245  0509                     l2265:	
  5246                           ;rht03.c: 87: case 1: mask = (1<<1); break;
  5247                           
  5248  0509  3002               	movlw	2
  5249  050A  2D14               	goto	L14
  5250  050B                     l2267:	
  5251                           ;rht03.c: 88: case 2: mask = (1<<2); break;
  5252                           
  5253  050B  3004               	movlw	4
  5254  050C  2D14               	goto	L14
  5255  050D                     l2269:	
  5256                           ;rht03.c: 89: case 3: mask = (1<<3); break;
  5257                           
  5258  050D  3008               	movlw	8
  5259  050E  2D14               	goto	L14
  5260  050F                     l2271:	
  5261                           ;rht03.c: 90: case 4: mask = (1<<4); break;
  5262                           
  5263  050F  3010               	movlw	16
  5264  0510  2D14               	goto	L14
  5265  0511                     l2273:	
  5266                           ;rht03.c: 91: case 5: mask = (1<<5); break;
  5267                           
  5268  0511  3020               	movlw	32
  5269  0512  2D14               	goto	L14
  5270  0513                     l2275:	
  5271                           ;rht03.c: 92: case 6: mask = (1<<6); break;
  5272                           
  5273  0513  3040               	movlw	64
  5274  0514                     L14:	
  5275  0514  00A9               	movwf	RHT_readByte@mask
  5276  0515  3000               	movlw	0
  5277  0516  00AA               	movwf	RHT_readByte@mask+1
  5278                           
  5279                           ;rht03.c: 94: }
  5280                           
  5281                           ;rht03.c: 93: default: break;
  5282  0517  2D22               	goto	l2281
  5283  0518                     l2279:	
  5284  0518  0820               	movf	RHT_readByte@port,w
  5285                           
  5286                           ; Switch size 1, requested type "space"
  5287                           ; Number of cases is 7, Range of values is 0 to 6
  5288                           ; switch strategies available:
  5289                           ; Name         Instructions Cycles
  5290                           ; direct_byte           20     6 (fixed)
  5291                           ; simple_byte           22    12 (average)
  5292                           ; jumptable            260     6 (fixed)
  5293                           ;	Chosen strategy is direct_byte
  5294  0519  0084               	movwf	4
  5295  051A  3007               	movlw	7
  5296  051B  0204               	subwf	4,w
  5297  051C  1803               	skipnc
  5298  051D  2D22               	goto	l2281
  5299  051E  3188               	movlp	high S3071
  5300  051F  3504               	lslf	4,w
  5301  0520  3E32               	addlw	low S3071
  5302  0521  0082               	movwf	2
  5303  0522                     l2281:	
  5304                           
  5305                           ;rht03.c: 96: for(i = 0; i < 8; i++)
  5306  0522  01A6               	clrf	RHT_readByte@i
  5307  0523  3008               	movlw	8
  5308  0524  0226               	subwf	RHT_readByte@i,w
  5309  0525  1803               	btfsc	3,0
  5310  0526  2D85               	goto	l411
  5311  0527                     l2287:	
  5312                           
  5313                           ;rht03.c: 97: {
  5314                           ;rht03.c: 98: timeout = 256;
  5315  0527  3000               	movlw	0
  5316  0528  00A7               	movwf	RHT_readByte@timeout
  5317  0529  3001               	movlw	1
  5318  052A  00A8               	movwf	RHT_readByte@timeout+1
  5319  052B                     l2289:	
  5320                           ;rht03.c: 99: while(((PORTC & mask) != mask) && timeout-- > 0);
  5321                           
  5322  052B  080E               	movf	14,w	;volatile
  5323  052C  0529               	andwf	RHT_readByte@mask,w
  5324  052D  00A1               	movwf	??_RHT_readByte
  5325  052E  01A2               	clrf	??_RHT_readByte+1
  5326  052F  082A               	movf	RHT_readByte@mask+1,w
  5327  0530  0622               	xorwf	??_RHT_readByte+1,w
  5328  0531  1D03               	skipz
  5329  0532  2D35               	goto	u2145
  5330  0533  0829               	movf	RHT_readByte@mask,w
  5331  0534  0621               	xorwf	??_RHT_readByte,w
  5332  0535                     u2145:	
  5333  0535  1903               	skipnz
  5334  0536  2D3D               	goto	l2293
  5335  0537  30FF               	movlw	255
  5336  0538  07A7               	addwf	RHT_readByte@timeout,f
  5337  0539  30FF               	movlw	255
  5338  053A  3DA8               	addwfc	RHT_readByte@timeout+1,f
  5339  053B  1FA8               	btfss	RHT_readByte@timeout+1,7
  5340  053C  2D2B               	goto	l2289
  5341  053D                     l2293:	
  5342                           
  5343                           ;rht03.c: 101: _delay((unsigned long)((27)*(32000000/4000000.0)));
  5344  053D  3047               	movlw	71
  5345  053E  00A1               	movwf	??_RHT_readByte
  5346  053F                     u3337:	
  5347  053F  0BA1               	decfsz	??_RHT_readByte,f
  5348  0540  2D3F               	goto	u3337
  5349  0541  3200               	nop2	;nop
  5350                           
  5351                           ;rht03.c: 102: if((PORTC & mask) == mask)
  5352  0542  0020               	movlb	0	; select bank0
  5353  0543  080E               	movf	14,w	;volatile
  5354  0544  0529               	andwf	RHT_readByte@mask,w
  5355  0545  00A1               	movwf	??_RHT_readByte
  5356  0546  01A2               	clrf	??_RHT_readByte+1
  5357  0547  082A               	movf	RHT_readByte@mask+1,w
  5358  0548  0622               	xorwf	??_RHT_readByte+1,w
  5359  0549  1D03               	skipz
  5360  054A  2D4D               	goto	u2165
  5361  054B  0829               	movf	RHT_readByte@mask,w
  5362  054C  0621               	xorwf	??_RHT_readByte,w
  5363  054D                     u2165:	
  5364  054D  1D03               	skipz
  5365  054E  2D54               	goto	l2299
  5366                           
  5367                           ;rht03.c: 103: {
  5368                           ;rht03.c: 104: tempBit = 1;
  5369  054F  01A4               	clrf	RHT_readByte@tempBit
  5370  0550  0AA4               	incf	RHT_readByte@tempBit,f
  5371                           
  5372                           ;rht03.c: 105: LATAbits.LATA7 = 1;
  5373  0551  0022               	movlb	2	; select bank2
  5374  0552  178C               	bsf	12,7	;volatile
  5375                           
  5376                           ;rht03.c: 106: } else{
  5377  0553  2D58               	goto	l2303
  5378  0554                     l2299:	
  5379                           
  5380                           ;rht03.c: 107: tempBit = 0;
  5381  0554  0020               	movlb	0	; select bank0
  5382  0555  01A4               	clrf	RHT_readByte@tempBit
  5383                           
  5384                           ;rht03.c: 108: LATAbits.LATA7 = 0;
  5385  0556  0022               	movlb	2	; select bank2
  5386  0557  138C               	bcf	12,7	;volatile
  5387  0558                     l2303:	
  5388                           
  5389                           ;rht03.c: 109: }
  5390                           ;rht03.c: 111: timeout = 256;
  5391  0558  3000               	movlw	0
  5392  0559  0020               	movlb	0	; select bank0
  5393  055A  00A7               	movwf	RHT_readByte@timeout
  5394  055B  3001               	movlw	1
  5395  055C  00A8               	movwf	RHT_readByte@timeout+1
  5396  055D  2D64               	goto	l2305
  5397  055E                     l2307:	
  5398  055E  30FF               	movlw	255
  5399  055F  07A7               	addwf	RHT_readByte@timeout,f
  5400  0560  30FF               	movlw	255
  5401  0561  3DA8               	addwfc	RHT_readByte@timeout+1,f
  5402  0562  1BA8               	btfsc	RHT_readByte@timeout+1,7
  5403  0563  2D70               	goto	l423
  5404  0564                     l2305:	
  5405                           ;rht03.c: 112: while(((PORTC & mask) == mask) && timeout-- > 0);
  5406                           
  5407  0564  080E               	movf	14,w	;volatile
  5408  0565  0529               	andwf	RHT_readByte@mask,w
  5409  0566  00A1               	movwf	??_RHT_readByte
  5410  0567  01A2               	clrf	??_RHT_readByte+1
  5411  0568  082A               	movf	RHT_readByte@mask+1,w
  5412  0569  0622               	xorwf	??_RHT_readByte+1,w
  5413  056A  1D03               	skipz
  5414  056B  2D6E               	goto	u2175
  5415  056C  0829               	movf	RHT_readByte@mask,w
  5416  056D  0621               	xorwf	??_RHT_readByte,w
  5417  056E                     u2175:	
  5418  056E  1903               	btfsc	3,2
  5419  056F  2D5E               	goto	l2307
  5420  0570                     l423:	
  5421                           
  5422                           ;rht03.c: 113: if(timeout < 0)
  5423  0570  1FA8               	btfss	RHT_readByte@timeout+1,7
  5424  0571  2D76               	goto	l2315
  5425                           
  5426                           ;rht03.c: 114: {
  5427                           ;rht03.c: 115: LATAbits.LATA7 = 0;
  5428  0572  0022               	movlb	2	; select bank2
  5429  0573  138C               	bcf	12,7	;volatile
  5430                           
  5431                           ;rht03.c: 116: return ERR_READ_BYTE_TIMEOUT;
  5432  0574  3004               	movlw	4
  5433  0575  0008               	return
  5434  0576                     l2315:	
  5435                           
  5436                           ;rht03.c: 117: }
  5437                           ;rht03.c: 120: tempByte <<= 1;
  5438  0576  1003               	clrc
  5439  0577  0020               	movlb	0	; select bank0
  5440  0578  0DA5               	rlf	RHT_readByte@tempByte,f
  5441                           
  5442                           ;rht03.c: 121: tempByte |= tempBit;
  5443  0579  0824               	movf	RHT_readByte@tempBit,w
  5444  057A  00A1               	movwf	??_RHT_readByte
  5445  057B  0821               	movf	??_RHT_readByte,w
  5446  057C  04A5               	iorwf	RHT_readByte@tempByte,f
  5447  057D  3001               	movlw	1
  5448  057E  00A1               	movwf	??_RHT_readByte
  5449  057F  0821               	movf	??_RHT_readByte,w
  5450  0580  07A6               	addwf	RHT_readByte@i,f
  5451  0581  3008               	movlw	8
  5452  0582  0226               	subwf	RHT_readByte@i,w
  5453  0583  1C03               	skipc
  5454  0584  2D27               	goto	l2287
  5455  0585                     l411:	
  5456                           
  5457                           ;rht03.c: 122: }
  5458                           ;rht03.c: 124: LATAbits.LATA7 = 0;
  5459  0585  0022               	movlb	2	; select bank2
  5460  0586  138C               	bcf	12,7	;volatile
  5461                           
  5462                           ;rht03.c: 125: *out = tempByte;
  5463  0587  0020               	movlb	0	; select bank0
  5464  0588  0825               	movf	RHT_readByte@tempByte,w
  5465  0589  00A1               	movwf	??_RHT_readByte
  5466  058A  0823               	movf	RHT_readByte@out,w
  5467  058B  0086               	movwf	6
  5468  058C  0187               	clrf	7
  5469  058D  0821               	movf	??_RHT_readByte,w
  5470  058E  0081               	movwf	1
  5471                           
  5472                           ;rht03.c: 126: return ERR_OK;
  5473  058F  3000               	movlw	0
  5474  0590  0008               	return
  5475  0591                     __end_of_RHT_readByte:	
  5476                           
  5477                           	psect	swtext2
  5478  0832                     __pswtext2:	
  5479  0832                     S3071:	
  5480  0832  3185  2D07         	ljmp	l2263
  5481  0834  3185  2D09         	ljmp	l2265
  5482  0836  3185  2D0B         	ljmp	l2267
  5483  0838  3185  2D0D         	ljmp	l2269
  5484  083A  3185  2D0F         	ljmp	l2271
  5485  083C  3185  2D11         	ljmp	l2273
  5486  083E  3185  2D13         	ljmp	l2275
  5487                           
  5488                           	psect	text16
  5489  0FAF                     __ptext16:	
  5490 ;; *************** function _PWM_Counter *****************
  5491 ;; Defined at:
  5492 ;;		line 35 in file "NB_fans.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;  speed           2   15[BANK0 ] int 
  5495 ;;  invert          2   17[BANK0 ] int 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  2   15[BANK0 ] int 
  5500 ;; Registers used:
  5501 ;;		wreg, status,2, status,0, pclath, cstack
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5507 ;;      Params:         0       4       0       0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0       0       0       0
  5509 ;;      Temps:          0       2       0       0       0       0       0       0
  5510 ;;      Totals:         0       6       0       0       0       0       0       0
  5511 ;;Total ram usage:        6 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    3
  5514 ;; This function calls:
  5515 ;;		___awdiv
  5516 ;; This function is called by:
  5517 ;;		_main
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           
  5522                           ;psect for function _PWM_Counter
  5523  0FAF                     _PWM_Counter:	
  5524                           
  5525                           ;NB_fans.c: 36: if((speed<30)&&(speed>5)){
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in _PWM_Counter: [wreg+status,2+status,0+pclath+cstack]
  5529  0FAF  0020               	movlb	0	; select bank0
  5530  0FB0  0830               	movf	PWM_Counter@speed+1,w
  5531  0FB1  3A80               	xorlw	128
  5532  0FB2  00B3               	movwf	??_PWM_Counter
  5533  0FB3  3080               	movlw	128
  5534  0FB4  0233               	subwf	??_PWM_Counter,w
  5535  0FB5  1D03               	skipz
  5536  0FB6  2FB9               	goto	u2535
  5537  0FB7  301E               	movlw	30
  5538  0FB8  022F               	subwf	PWM_Counter@speed,w
  5539  0FB9                     u2535:	
  5540  0FB9  1803               	skipnc
  5541  0FBA  2FCC               	goto	l442
  5542  0FBB  0020               	movlb	0	; select bank0
  5543  0FBC  0830               	movf	PWM_Counter@speed+1,w
  5544  0FBD  3A80               	xorlw	128
  5545  0FBE  00B3               	movwf	??_PWM_Counter
  5546  0FBF  3080               	movlw	128
  5547  0FC0  0233               	subwf	??_PWM_Counter,w
  5548  0FC1  1D03               	skipz
  5549  0FC2  2FC5               	goto	u2545
  5550  0FC3  3006               	movlw	6
  5551  0FC4  022F               	subwf	PWM_Counter@speed,w
  5552  0FC5                     u2545:	
  5553  0FC5  1C03               	skipc
  5554  0FC6  2FCC               	goto	l442
  5555                           
  5556                           ;NB_fans.c: 37: speed = 30;
  5557  0FC7  301E               	movlw	30
  5558  0FC8  0020               	movlb	0	; select bank0
  5559  0FC9  00AF               	movwf	PWM_Counter@speed
  5560  0FCA  3000               	movlw	0
  5561  0FCB  00B0               	movwf	PWM_Counter@speed+1
  5562  0FCC                     l442:	
  5563                           
  5564                           ;NB_fans.c: 38: }
  5565                           ;NB_fans.c: 39: if(invert){
  5566  0FCC  0020               	movlb	0	; select bank0
  5567  0FCD  0832               	movf	PWM_Counter@invert+1,w
  5568  0FCE  0431               	iorwf	PWM_Counter@invert,w
  5569  0FCF  1903               	skipnz
  5570  0FD0  2FEC               	goto	l2549
  5571                           
  5572                           ;NB_fans.c: 40: return ((100-speed)/5);
  5573  0FD1  3005               	movlw	5
  5574  0FD2  00A6               	movwf	___awdiv@divisor
  5575  0FD3  3000               	movlw	0
  5576  0FD4  00A7               	movwf	___awdiv@divisor+1
  5577  0FD5  092F               	comf	PWM_Counter@speed,w
  5578  0FD6  00B3               	movwf	??_PWM_Counter
  5579  0FD7  0930               	comf	PWM_Counter@speed+1,w
  5580  0FD8  00B4               	movwf	??_PWM_Counter+1
  5581  0FD9  0AB3               	incf	??_PWM_Counter,f
  5582  0FDA  1903               	skipnz
  5583  0FDB  0AB4               	incf	??_PWM_Counter+1,f
  5584  0FDC  0833               	movf	??_PWM_Counter,w
  5585  0FDD  3E64               	addlw	100
  5586  0FDE  00A8               	movwf	___awdiv@dividend
  5587  0FDF  3000               	movlw	0
  5588  0FE0  3D34               	addwfc	??_PWM_Counter+1,w
  5589  0FE1  00A9               	movwf	___awdiv@dividend+1
  5590  0FE2  3187  272A         	fcall	___awdiv
  5591  0FE4  0020               	movlb	0	; select bank0
  5592  0FE5  0827               	movf	?___awdiv+1,w
  5593  0FE6  01B0               	clrf	?_PWM_Counter+1
  5594  0FE7  07B0               	addwf	?_PWM_Counter+1,f
  5595  0FE8  0826               	movf	?___awdiv,w
  5596  0FE9  01AF               	clrf	?_PWM_Counter
  5597  0FEA  07AF               	addwf	?_PWM_Counter,f
  5598  0FEB  0008               	return
  5599  0FEC                     l2549:	
  5600                           
  5601                           ;NB_fans.c: 41: }
  5602                           ;NB_fans.c: 42: return (speed/5);
  5603  0FEC  3005               	movlw	5
  5604  0FED  00A6               	movwf	___awdiv@divisor
  5605  0FEE  3000               	movlw	0
  5606  0FEF  00A7               	movwf	___awdiv@divisor+1
  5607  0FF0  0830               	movf	PWM_Counter@speed+1,w
  5608  0FF1  01A9               	clrf	___awdiv@dividend+1
  5609  0FF2  07A9               	addwf	___awdiv@dividend+1,f
  5610  0FF3  082F               	movf	PWM_Counter@speed,w
  5611  0FF4  01A8               	clrf	___awdiv@dividend
  5612  0FF5  07A8               	addwf	___awdiv@dividend,f
  5613  0FF6  3187  272A         	fcall	___awdiv
  5614  0FF8  0020               	movlb	0	; select bank0
  5615  0FF9  0827               	movf	?___awdiv+1,w
  5616  0FFA  01B0               	clrf	?_PWM_Counter+1
  5617  0FFB  07B0               	addwf	?_PWM_Counter+1,f
  5618  0FFC  0826               	movf	?___awdiv,w
  5619  0FFD  01AF               	clrf	?_PWM_Counter
  5620  0FFE  07AF               	addwf	?_PWM_Counter,f
  5621  0FFF  0008               	return
  5622  1000                     __end_of_PWM_Counter:	
  5623                           
  5624                           	psect	text17
  5625  072A                     __ptext17:	
  5626 ;; *************** function ___awdiv *****************
  5627 ;; Defined at:
  5628 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.32\sources\common\awdiv.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  divisor         2    6[BANK0 ] int 
  5631 ;;  dividend        2    8[BANK0 ] int 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  quotient        2   13[BANK0 ] int 
  5634 ;;  sign            1   12[BANK0 ] unsigned char 
  5635 ;;  counter         1   11[BANK0 ] unsigned char 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  2    6[BANK0 ] int 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5645 ;;      Params:         0       4       0       0       0       0       0       0
  5646 ;;      Locals:         0       4       0       0       0       0       0       0
  5647 ;;      Temps:          0       1       0       0       0       0       0       0
  5648 ;;      Totals:         0       9       0       0       0       0       0       0
  5649 ;;Total ram usage:        9 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    2
  5652 ;; This function calls:
  5653 ;;		Nothing
  5654 ;; This function is called by:
  5655 ;;		_main
  5656 ;;		_Triac_Counter
  5657 ;;		_PWM_Counter
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function ___awdiv
  5663  072A                     ___awdiv:	
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5667  072A  0020               	movlb	0	; select bank0
  5668  072B  01AC               	clrf	___awdiv@sign
  5669  072C  1FA7               	btfss	___awdiv@divisor+1,7
  5670  072D  2F35               	goto	l2351
  5671  072E  09A6               	comf	___awdiv@divisor,f
  5672  072F  09A7               	comf	___awdiv@divisor+1,f
  5673  0730  0AA6               	incf	___awdiv@divisor,f
  5674  0731  1903               	skipnz
  5675  0732  0AA7               	incf	___awdiv@divisor+1,f
  5676  0733  01AC               	clrf	___awdiv@sign
  5677  0734  0AAC               	incf	___awdiv@sign,f
  5678  0735                     l2351:	
  5679  0735  1FA9               	btfss	___awdiv@dividend+1,7
  5680  0736  2F40               	goto	l2357
  5681  0737  09A8               	comf	___awdiv@dividend,f
  5682  0738  09A9               	comf	___awdiv@dividend+1,f
  5683  0739  0AA8               	incf	___awdiv@dividend,f
  5684  073A  1903               	skipnz
  5685  073B  0AA9               	incf	___awdiv@dividend+1,f
  5686  073C  3001               	movlw	1
  5687  073D  00AA               	movwf	??___awdiv
  5688  073E  082A               	movf	??___awdiv,w
  5689  073F  06AC               	xorwf	___awdiv@sign,f
  5690  0740                     l2357:	
  5691  0740  01AD               	clrf	___awdiv@quotient
  5692  0741  01AE               	clrf	___awdiv@quotient+1
  5693  0742  0827               	movf	___awdiv@divisor+1,w
  5694  0743  0426               	iorwf	___awdiv@divisor,w
  5695  0744  1903               	skipnz
  5696  0745  2F6F               	goto	l2379
  5697  0746  01AB               	clrf	___awdiv@counter
  5698  0747  0AAB               	incf	___awdiv@counter,f
  5699  0748                     l2367:	
  5700  0748  1BA7               	btfsc	___awdiv@divisor+1,7
  5701  0749  2F54               	goto	l2369
  5702  074A  3001               	movlw	1
  5703  074B                     u2285:	
  5704  074B  35A6               	lslf	___awdiv@divisor,f
  5705  074C  0DA7               	rlf	___awdiv@divisor+1,f
  5706  074D  0B89               	decfsz	9,f
  5707  074E  2F4B               	goto	u2285
  5708  074F  3001               	movlw	1
  5709  0750  00AA               	movwf	??___awdiv
  5710  0751  082A               	movf	??___awdiv,w
  5711  0752  07AB               	addwf	___awdiv@counter,f
  5712  0753  2F48               	goto	l2367
  5713  0754                     l2369:	
  5714  0754  3001               	movlw	1
  5715  0755                     u2305:	
  5716  0755  35AD               	lslf	___awdiv@quotient,f
  5717  0756  0DAE               	rlf	___awdiv@quotient+1,f
  5718  0757  0B89               	decfsz	9,f
  5719  0758  2F55               	goto	u2305
  5720  0759  0827               	movf	___awdiv@divisor+1,w
  5721  075A  0229               	subwf	___awdiv@dividend+1,w
  5722  075B  1D03               	skipz
  5723  075C  2F5F               	goto	u2315
  5724  075D  0826               	movf	___awdiv@divisor,w
  5725  075E  0228               	subwf	___awdiv@dividend,w
  5726  075F                     u2315:	
  5727  075F  1C03               	skipc
  5728  0760  2F66               	goto	l2375
  5729  0761  0826               	movf	___awdiv@divisor,w
  5730  0762  02A8               	subwf	___awdiv@dividend,f
  5731  0763  0827               	movf	___awdiv@divisor+1,w
  5732  0764  3BA9               	subwfb	___awdiv@dividend+1,f
  5733  0765  142D               	bsf	___awdiv@quotient,0
  5734  0766                     l2375:	
  5735  0766  3001               	movlw	1
  5736  0767                     u2325:	
  5737  0767  36A7               	lsrf	___awdiv@divisor+1,f
  5738  0768  0CA6               	rrf	___awdiv@divisor,f
  5739  0769  0B89               	decfsz	9,f
  5740  076A  2F67               	goto	u2325
  5741  076B  3001               	movlw	1
  5742  076C  02AB               	subwf	___awdiv@counter,f
  5743  076D  1D03               	btfss	3,2
  5744  076E  2F54               	goto	l2369
  5745  076F                     l2379:	
  5746  076F  082C               	movf	___awdiv@sign,w
  5747  0770  1903               	btfsc	3,2
  5748  0771  2F77               	goto	l2383
  5749  0772  09AD               	comf	___awdiv@quotient,f
  5750  0773  09AE               	comf	___awdiv@quotient+1,f
  5751  0774  0AAD               	incf	___awdiv@quotient,f
  5752  0775  1903               	skipnz
  5753  0776  0AAE               	incf	___awdiv@quotient+1,f
  5754  0777                     l2383:	
  5755  0777  082E               	movf	___awdiv@quotient+1,w
  5756  0778  01A7               	clrf	?___awdiv+1
  5757  0779  07A7               	addwf	?___awdiv+1,f
  5758  077A  082D               	movf	___awdiv@quotient,w
  5759  077B  01A6               	clrf	?___awdiv
  5760  077C  07A6               	addwf	?___awdiv,f
  5761  077D  0008               	return
  5762  077E                     __end_of___awdiv:	
  5763                           
  5764                           	psect	text18
  5765  0E97                     __ptext18:	
  5766 ;; *************** function _LCD_WriteString *****************
  5767 ;; Defined at:
  5768 ;;		line 113 in file "HD44780.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  s               1    wreg     PTR const unsigned char 
  5771 ;;		 -> tempString(16), rhString(16), 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  s               1    8[BANK0 ] PTR const unsigned char 
  5774 ;;		 -> tempString(16), rhString(16), 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;		None               void
  5777 ;; Registers used:
  5778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5784 ;;      Params:         0       0       0       0       0       0       0       0
  5785 ;;      Locals:         0       1       0       0       0       0       0       0
  5786 ;;      Temps:          0       1       0       0       0       0       0       0
  5787 ;;      Totals:         0       2       0       0       0       0       0       0
  5788 ;;Total ram usage:        2 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    5
  5791 ;; This function calls:
  5792 ;;		_LCD_GoTo
  5793 ;;		_LCD_Write
  5794 ;; This function is called by:
  5795 ;;		_main
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _LCD_WriteString
  5801  0E97                     _LCD_WriteString:	
  5802                           
  5803                           ;incstack = 0
  5804                           ; Regs used in _LCD_WriteString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5805                           ;LCD_WriteString@s stored from wreg
  5806  0E97  0020               	movlb	0	; select bank0
  5807  0E98  00A8               	movwf	LCD_WriteString@s
  5808                           
  5809                           ;HD44780.c: 114: LATAbits.LATA0 = 1;
  5810  0E99  0022               	movlb	2	; select bank2
  5811  0E9A  140C               	bsf	12,0	;volatile
  5812  0E9B                     l2687:	
  5813                           ;HD44780.c: 115: while(*s){
  5814                           
  5815  0E9B  0020               	movlb	0	; select bank0
  5816  0E9C  0828               	movf	LCD_WriteString@s,w
  5817  0E9D  0086               	movwf	6
  5818  0E9E  0187               	clrf	7
  5819  0E9F  0881               	movf	1,f
  5820  0EA0  1903               	btfsc	3,2
  5821  0EA1  2EBC               	goto	l346
  5822                           
  5823                           ;HD44780.c: 116: if (*s != '\n') LCD_Write(*s);
  5824  0EA2  0020               	movlb	0	; select bank0
  5825  0EA3  0828               	movf	LCD_WriteString@s,w
  5826  0EA4  0086               	movwf	6
  5827  0EA5  0187               	clrf	7
  5828  0EA6  0801               	movf	1,w
  5829  0EA7  3A0A               	xorlw	10
  5830  0EA8  1903               	skipnz
  5831  0EA9  2EB2               	goto	l2683
  5832  0EAA  0828               	movf	LCD_WriteString@s,w
  5833  0EAB  0086               	movwf	6
  5834  0EAC  0187               	clrf	7
  5835  0EAD  0801               	movf	1,w
  5836  0EAE  3184  245F  318E   	fcall	_LCD_Write
  5837  0EB1  2EB6               	goto	l2685
  5838  0EB2                     l2683:	
  5839                           
  5840                           ;HD44780.c: 117: else LCD_GoTo(0x40);
  5841  0EB2  3040               	movlw	64
  5842  0EB3  318E  2644  318E   	fcall	_LCD_GoTo
  5843  0EB6                     l2685:	
  5844                           
  5845                           ;HD44780.c: 119: s++;
  5846  0EB6  3001               	movlw	1
  5847  0EB7  0020               	movlb	0	; select bank0
  5848  0EB8  00A7               	movwf	??_LCD_WriteString
  5849  0EB9  0827               	movf	??_LCD_WriteString,w
  5850  0EBA  07A8               	addwf	LCD_WriteString@s,f
  5851  0EBB  2E9B               	goto	l2687
  5852  0EBC                     l346:	
  5853                           
  5854                           ;HD44780.c: 120: }
  5855                           ;HD44780.c: 121: LATAbits.LATA0 = 0;
  5856  0EBC  0022               	movlb	2	; select bank2
  5857  0EBD  100C               	bcf	12,0	;volatile
  5858  0EBE  0008               	return
  5859  0EBF                     __end_of_LCD_WriteString:	
  5860                           
  5861                           	psect	text19
  5862  0E44                     __ptext19:	
  5863 ;; *************** function _LCD_GoTo *****************
  5864 ;; Defined at:
  5865 ;;		line 138 in file "HD44780.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;  P               1    wreg     unsigned char 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;  P               1    6[BANK0 ] unsigned char 
  5870 ;; Return value:  Size  Location     Type
  5871 ;;		None               void
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0, pclath, cstack
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5879 ;;      Params:         0       0       0       0       0       0       0       0
  5880 ;;      Locals:         0       1       0       0       0       0       0       0
  5881 ;;      Temps:          0       2       0       0       0       0       0       0
  5882 ;;      Totals:         0       3       0       0       0       0       0       0
  5883 ;;Total ram usage:        3 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    4
  5886 ;; This function calls:
  5887 ;;		_LCD_Write
  5888 ;; This function is called by:
  5889 ;;		_LCD_WriteString
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           
  5894                           ;psect for function _LCD_GoTo
  5895  0E44                     _LCD_GoTo:	
  5896                           
  5897                           ;incstack = 0
  5898                           ; Regs used in _LCD_GoTo: [wreg+status,2+status,0+pclath+cstack]
  5899                           ;LCD_GoTo@P stored from wreg
  5900  0E44  0020               	movlb	0	; select bank0
  5901  0E45  00A6               	movwf	LCD_GoTo@P
  5902                           
  5903                           ;HD44780.c: 139: LATAbits.LATA0 = 0;
  5904  0E46  0022               	movlb	2	; select bank2
  5905  0E47  100C               	bcf	12,0	;volatile
  5906                           
  5907                           ;HD44780.c: 140: LCD_Write(0x80+P);
  5908  0E48  0020               	movlb	0	; select bank0
  5909  0E49  0826               	movf	LCD_GoTo@P,w
  5910  0E4A  3E80               	addlw	128
  5911  0E4B  3184  245F  318E   	fcall	_LCD_Write
  5912                           
  5913                           ;HD44780.c: 141: LATAbits.LATA0 = 1;
  5914  0E4E  0022               	movlb	2	; select bank2
  5915  0E4F  140C               	bsf	12,0	;volatile
  5916                           
  5917                           ;HD44780.c: 142: _delay((unsigned long)((2)*(32000000/4000.0)));
  5918  0E50  3015               	movlw	21
  5919  0E51  0020               	movlb	0	; select bank0
  5920  0E52  00A5               	movwf	??_LCD_GoTo+1
  5921  0E53  30C6               	movlw	198
  5922  0E54  00A4               	movwf	??_LCD_GoTo
  5923  0E55                     u3347:	
  5924  0E55  0BA4               	decfsz	??_LCD_GoTo,f
  5925  0E56  2E55               	goto	u3347
  5926  0E57  0BA5               	decfsz	??_LCD_GoTo+1,f
  5927  0E58  2E55               	goto	u3347
  5928  0E59  0000               	nop
  5929  0E5A  0008               	return
  5930  0E5B                     __end_of_LCD_GoTo:	
  5931                           
  5932                           	psect	text20
  5933  0619                     __ptext20:	
  5934 ;; *************** function _LCD_Initialize *****************
  5935 ;; Defined at:
  5936 ;;		line 29 in file "HD44780.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;		None               void
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0, pclath, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5950 ;;      Params:         0       0       0       0       0       0       0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0
  5952 ;;      Temps:          0       2       0       0       0       0       0       0
  5953 ;;      Totals:         0       2       0       0       0       0       0       0
  5954 ;;Total ram usage:        2 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    4
  5957 ;; This function calls:
  5958 ;;		_LCD_Clock
  5959 ;;		_LCD_Write
  5960 ;; This function is called by:
  5961 ;;		_main
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           
  5966                           ;psect for function _LCD_Initialize
  5967  0619                     _LCD_Initialize:	
  5968                           
  5969                           ;HD44780.c: 30: LATAbits.LATA0=0;
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _LCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5973  0619  0022               	movlb	2	; select bank2
  5974  061A  100C               	bcf	12,0	;volatile
  5975                           
  5976                           ;HD44780.c: 31: LATAbits.LATA1=0;
  5977  061B  108C               	bcf	12,1	;volatile
  5978                           
  5979                           ;HD44780.c: 32: LATAbits.LATA2=0;
  5980  061C  110C               	bcf	12,2	;volatile
  5981                           
  5982                           ;HD44780.c: 34: _delay((unsigned long)((20)*(32000000/4000.0)));
  5983  061D  30D0               	movlw	208
  5984  061E  0020               	movlb	0	; select bank0
  5985  061F  00A5               	movwf	??_LCD_Initialize+1
  5986  0620  30C9               	movlw	201
  5987  0621  00A4               	movwf	??_LCD_Initialize
  5988  0622                     u3357:	
  5989  0622  0BA4               	decfsz	??_LCD_Initialize,f
  5990  0623  2E22               	goto	u3357
  5991  0624  0BA5               	decfsz	??_LCD_Initialize+1,f
  5992  0625  2E22               	goto	u3357
  5993  0626  3200               	nop2
  5994                           
  5995                           ;HD44780.c: 35: LATBbits.LATB3 = 0;
  5996  0627  0022               	movlb	2	; select bank2
  5997  0628  118D               	bcf	13,3	;volatile
  5998                           
  5999                           ;HD44780.c: 36: LATBbits.LATB2 = 0;
  6000  0629  110D               	bcf	13,2	;volatile
  6001                           
  6002                           ;HD44780.c: 37: LATBbits.LATB1 = 1;
  6003  062A  148D               	bsf	13,1	;volatile
  6004                           
  6005                           ;HD44780.c: 38: LATBbits.LATB4 = 1;
  6006  062B  160D               	bsf	13,4	;volatile
  6007                           
  6008                           ;HD44780.c: 39: LCD_Clock();
  6009  062C  318E  2607  3186   	fcall	_LCD_Clock
  6010                           
  6011                           ;HD44780.c: 41: _delay((unsigned long)((5)*(32000000/4000.0)));
  6012  062F  3034               	movlw	52
  6013  0630  0020               	movlb	0	; select bank0
  6014  0631  00A5               	movwf	??_LCD_Initialize+1
  6015  0632  30F1               	movlw	241
  6016  0633  00A4               	movwf	??_LCD_Initialize
  6017  0634                     u3367:	
  6018  0634  0BA4               	decfsz	??_LCD_Initialize,f
  6019  0635  2E34               	goto	u3367
  6020  0636  0BA5               	decfsz	??_LCD_Initialize+1,f
  6021  0637  2E34               	goto	u3367
  6022  0638  3200               	nop2
  6023                           
  6024                           ;HD44780.c: 42: LATBbits.LATB3 = 0;
  6025  0639  0022               	movlb	2	; select bank2
  6026  063A  118D               	bcf	13,3	;volatile
  6027                           
  6028                           ;HD44780.c: 43: LATBbits.LATB2 = 0;
  6029  063B  110D               	bcf	13,2	;volatile
  6030                           
  6031                           ;HD44780.c: 44: LATBbits.LATB1 = 1;
  6032  063C  148D               	bsf	13,1	;volatile
  6033                           
  6034                           ;HD44780.c: 45: LATBbits.LATB4 = 1;
  6035  063D  160D               	bsf	13,4	;volatile
  6036                           
  6037                           ;HD44780.c: 46: LCD_Clock();
  6038  063E  318E  2607  3186   	fcall	_LCD_Clock
  6039                           
  6040                           ;HD44780.c: 48: _delay((unsigned long)((150)*(32000000/4000000.0)));
  6041  0641  30EF               	movlw	239
  6042  0642  0020               	movlb	0	; select bank0
  6043  0643  00A4               	movwf	??_LCD_Initialize
  6044  0644                     u3377:	
  6045  0644  3200               	nop2
  6046  0645  0BA4               	decfsz	??_LCD_Initialize,f
  6047  0646  2E44               	goto	u3377
  6048  0647  3200               	nop2	;nop
  6049  0648  3200               	nop2	;nop
  6050                           
  6051                           ;HD44780.c: 49: LATBbits.LATB3 = 0;
  6052  0649  0022               	movlb	2	; select bank2
  6053  064A  118D               	bcf	13,3	;volatile
  6054                           
  6055                           ;HD44780.c: 50: LATBbits.LATB2 = 0;
  6056  064B  110D               	bcf	13,2	;volatile
  6057                           
  6058                           ;HD44780.c: 51: LATBbits.LATB1 = 1;
  6059  064C  148D               	bsf	13,1	;volatile
  6060                           
  6061                           ;HD44780.c: 52: LATBbits.LATB4 = 1;
  6062  064D  160D               	bsf	13,4	;volatile
  6063                           
  6064                           ;HD44780.c: 53: LCD_Clock();
  6065  064E  318E  2607  3186   	fcall	_LCD_Clock
  6066                           
  6067                           ;HD44780.c: 55: LATBbits.LATB3 = 0;
  6068  0651  0022               	movlb	2	; select bank2
  6069  0652  118D               	bcf	13,3	;volatile
  6070                           
  6071                           ;HD44780.c: 56: LATBbits.LATB2 = 0;
  6072  0653  110D               	bcf	13,2	;volatile
  6073                           
  6074                           ;HD44780.c: 57: LATBbits.LATB1 = 1;
  6075  0654  148D               	bsf	13,1	;volatile
  6076                           
  6077                           ;HD44780.c: 58: LATBbits.LATB4 = 0;
  6078  0655  120D               	bcf	13,4	;volatile
  6079                           
  6080                           ;HD44780.c: 59: LCD_Clock();
  6081  0656  318E  2607  3186   	fcall	_LCD_Clock
  6082                           
  6083                           ;HD44780.c: 64: LCD_Write((((0<<4)&0x10)+((1<<3)&0x08)+((0 <<2)&0x04)) | 0x20);
  6084  0659  3028               	movlw	40
  6085  065A  3184  245F  3186   	fcall	_LCD_Write
  6086                           
  6087                           ;HD44780.c: 74: LCD_Write((((1<<1)&0x02)+(1&0x01)) | 0x08);
  6088  065D  300B               	movlw	11
  6089  065E  3184  245F  3186   	fcall	_LCD_Write
  6090                           
  6091                           ;HD44780.c: 77: LCD_Write(0x01);
  6092  0661  3001               	movlw	1
  6093  0662  3184  245F  3186   	fcall	_LCD_Write
  6094                           
  6095                           ;HD44780.c: 82: LCD_Write((((0<<1)&0x02)+(0&0x01)) | 0x04);
  6096  0665  3004               	movlw	4
  6097  0666  3184  245F  3186   	fcall	_LCD_Write
  6098                           
  6099                           ;HD44780.c: 84: _delay((unsigned long)((10)*(32000000/4000.0)));
  6100  0669  3068               	movlw	104
  6101  066A  0020               	movlb	0	; select bank0
  6102  066B  00A5               	movwf	??_LCD_Initialize+1
  6103  066C  30E4               	movlw	228
  6104  066D  00A4               	movwf	??_LCD_Initialize
  6105  066E                     u3387:	
  6106  066E  0BA4               	decfsz	??_LCD_Initialize,f
  6107  066F  2E6E               	goto	u3387
  6108  0670  0BA5               	decfsz	??_LCD_Initialize+1,f
  6109  0671  2E6E               	goto	u3387
  6110  0672  0000               	nop
  6111                           
  6112                           ;HD44780.c: 89: LCD_Write((((1<<2)&0x04)+((1<<1)&0x02)+(1&0x01)) | 0x08);
  6113  0673  300F               	movlw	15
  6114  0674  3184  245F         	fcall	_LCD_Write
  6115  0676  0008               	return
  6116  0677                     __end_of_LCD_Initialize:	
  6117                           
  6118                           	psect	text21
  6119  0E31                     __ptext21:	
  6120 ;; *************** function _LCD_Clear *****************
  6121 ;; Defined at:
  6122 ;;		line 124 in file "HD44780.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;		None
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;		None
  6127 ;; Return value:  Size  Location     Type
  6128 ;;		None               void
  6129 ;; Registers used:
  6130 ;;		wreg, status,2, status,0, pclath, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6136 ;;      Params:         0       0       0       0       0       0       0       0
  6137 ;;      Locals:         0       0       0       0       0       0       0       0
  6138 ;;      Temps:          0       2       0       0       0       0       0       0
  6139 ;;      Totals:         0       2       0       0       0       0       0       0
  6140 ;;Total ram usage:        2 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    4
  6143 ;; This function calls:
  6144 ;;		_LCD_Write
  6145 ;; This function is called by:
  6146 ;;		_main
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           
  6151                           ;psect for function _LCD_Clear
  6152  0E31                     _LCD_Clear:	
  6153                           
  6154                           ;HD44780.c: 125: LATAbits.LATA0 = 0;
  6155                           
  6156                           ;incstack = 0
  6157                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  6158  0E31  0022               	movlb	2	; select bank2
  6159  0E32  100C               	bcf	12,0	;volatile
  6160                           
  6161                           ;HD44780.c: 126: LCD_Write(0x01);
  6162  0E33  3001               	movlw	1
  6163  0E34  3184  245F  318E   	fcall	_LCD_Write
  6164                           
  6165                           ;HD44780.c: 127: LATAbits.LATA0 = 1;
  6166  0E37  0022               	movlb	2	; select bank2
  6167  0E38  140C               	bsf	12,0	;volatile
  6168                           
  6169                           ;HD44780.c: 128: _delay((unsigned long)((2)*(32000000/4000.0)));
  6170  0E39  3015               	movlw	21
  6171  0E3A  0020               	movlb	0	; select bank0
  6172  0E3B  00A5               	movwf	??_LCD_Clear+1
  6173  0E3C  30C6               	movlw	198
  6174  0E3D  00A4               	movwf	??_LCD_Clear
  6175  0E3E                     u3397:	
  6176  0E3E  0BA4               	decfsz	??_LCD_Clear,f
  6177  0E3F  2E3E               	goto	u3397
  6178  0E40  0BA5               	decfsz	??_LCD_Clear+1,f
  6179  0E41  2E3E               	goto	u3397
  6180  0E42  0000               	nop
  6181  0E43  0008               	return
  6182  0E44                     __end_of_LCD_Clear:	
  6183                           
  6184                           	psect	text22
  6185  045F                     __ptext22:	
  6186 ;; *************** function _LCD_Write *****************
  6187 ;; Defined at:
  6188 ;;		line 13 in file "HD44780.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  c               1    wreg     unsigned char 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  c               1    3[BANK0 ] unsigned char 
  6193 ;; Return value:  Size  Location     Type
  6194 ;;		None               void
  6195 ;; Registers used:
  6196 ;;		wreg, status,2, status,0, pclath, cstack
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6202 ;;      Params:         0       0       0       0       0       0       0       0
  6203 ;;      Locals:         0       1       0       0       0       0       0       0
  6204 ;;      Temps:          0       2       0       0       0       0       0       0
  6205 ;;      Totals:         0       3       0       0       0       0       0       0
  6206 ;;Total ram usage:        3 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    3
  6209 ;; This function calls:
  6210 ;;		_LCD_Clock
  6211 ;; This function is called by:
  6212 ;;		_LCD_Initialize
  6213 ;;		_LCD_WriteString
  6214 ;;		_LCD_Clear
  6215 ;;		_LCD_GoTo
  6216 ;;		_LCD_WriteNumber
  6217 ;;		_LCD_Home
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function _LCD_Write
  6223  045F                     _LCD_Write:	
  6224                           
  6225                           ;incstack = 0
  6226                           ; Regs used in _LCD_Write: [wreg+status,2+status,0+pclath+cstack]
  6227                           ;LCD_Write@c stored from wreg
  6228  045F  0020               	movlb	0	; select bank0
  6229  0460  00A3               	movwf	LCD_Write@c
  6230                           
  6231                           ;HD44780.c: 14: LATBbits.LATB3 = (c >> 7) & 0x01;
  6232  0461  0823               	movf	LCD_Write@c,w
  6233  0462  00A1               	movwf	??_LCD_Write
  6234  0463  3007               	movlw	7
  6235  0464                     u2005:	
  6236  0464  36A1               	lsrf	??_LCD_Write,f
  6237  0465  0B89               	decfsz	9,f
  6238  0466  2C64               	goto	u2005
  6239  0467  0821               	movf	??_LCD_Write,w
  6240  0468  3901               	andlw	1
  6241  0469  00A2               	movwf	??_LCD_Write+1
  6242  046A  0DA2               	rlf	??_LCD_Write+1,f
  6243  046B  0DA2               	rlf	??_LCD_Write+1,f
  6244  046C  0DA2               	rlf	??_LCD_Write+1,f
  6245  046D  0022               	movlb	2	; select bank2
  6246  046E  080D               	movf	13,w	;volatile
  6247  046F  0020               	movlb	0	; select bank0
  6248  0470  0622               	xorwf	??_LCD_Write+1,w
  6249  0471  39F7               	andlw	-9
  6250  0472  0622               	xorwf	??_LCD_Write+1,w
  6251  0473  0022               	movlb	2	; select bank2
  6252  0474  008D               	movwf	13	;volatile
  6253                           
  6254                           ;HD44780.c: 15: LATBbits.LATB2 = (c >> 6) & 0x01;
  6255  0475  0020               	movlb	0	; select bank0
  6256  0476  0823               	movf	LCD_Write@c,w
  6257  0477  00A1               	movwf	??_LCD_Write
  6258  0478  3006               	movlw	6
  6259  0479                     u2015:	
  6260  0479  36A1               	lsrf	??_LCD_Write,f
  6261  047A  0B89               	decfsz	9,f
  6262  047B  2C79               	goto	u2015
  6263  047C  0821               	movf	??_LCD_Write,w
  6264  047D  3901               	andlw	1
  6265  047E  00A2               	movwf	??_LCD_Write+1
  6266  047F  0DA2               	rlf	??_LCD_Write+1,f
  6267  0480  0DA2               	rlf	??_LCD_Write+1,f
  6268  0481  0022               	movlb	2	; select bank2
  6269  0482  080D               	movf	13,w	;volatile
  6270  0483  0020               	movlb	0	; select bank0
  6271  0484  0622               	xorwf	??_LCD_Write+1,w
  6272  0485  39FB               	andlw	-5
  6273  0486  0622               	xorwf	??_LCD_Write+1,w
  6274  0487  0022               	movlb	2	; select bank2
  6275  0488  008D               	movwf	13	;volatile
  6276                           
  6277                           ;HD44780.c: 16: LATBbits.LATB1 = (c >> 5) & 0x01;
  6278  0489  0020               	movlb	0	; select bank0
  6279  048A  0823               	movf	LCD_Write@c,w
  6280  048B  00A1               	movwf	??_LCD_Write
  6281  048C  3005               	movlw	5
  6282  048D                     u2025:	
  6283  048D  36A1               	lsrf	??_LCD_Write,f
  6284  048E  0B89               	decfsz	9,f
  6285  048F  2C8D               	goto	u2025
  6286  0490  0821               	movf	??_LCD_Write,w
  6287  0491  3901               	andlw	1
  6288  0492  00A2               	movwf	??_LCD_Write+1
  6289  0493  0DA2               	rlf	??_LCD_Write+1,f
  6290  0494  0022               	movlb	2	; select bank2
  6291  0495  080D               	movf	13,w	;volatile
  6292  0496  0020               	movlb	0	; select bank0
  6293  0497  0622               	xorwf	??_LCD_Write+1,w
  6294  0498  39FD               	andlw	-3
  6295  0499  0622               	xorwf	??_LCD_Write+1,w
  6296  049A  0022               	movlb	2	; select bank2
  6297  049B  008D               	movwf	13	;volatile
  6298                           
  6299                           ;HD44780.c: 17: LATBbits.LATB4 = (c >> 4) & 0x01;
  6300  049C  0020               	movlb	0	; select bank0
  6301  049D  0823               	movf	LCD_Write@c,w
  6302  049E  00A1               	movwf	??_LCD_Write
  6303  049F  3004               	movlw	4
  6304  04A0                     u2035:	
  6305  04A0  36A1               	lsrf	??_LCD_Write,f
  6306  04A1  0B89               	decfsz	9,f
  6307  04A2  2CA0               	goto	u2035
  6308  04A3  0821               	movf	??_LCD_Write,w
  6309  04A4  3901               	andlw	1
  6310  04A5  00A2               	movwf	??_LCD_Write+1
  6311  04A6  0EA2               	swapf	??_LCD_Write+1,f
  6312  04A7  0022               	movlb	2	; select bank2
  6313  04A8  080D               	movf	13,w	;volatile
  6314  04A9  0020               	movlb	0	; select bank0
  6315  04AA  0622               	xorwf	??_LCD_Write+1,w
  6316  04AB  39EF               	andlw	-17
  6317  04AC  0622               	xorwf	??_LCD_Write+1,w
  6318  04AD  0022               	movlb	2	; select bank2
  6319  04AE  008D               	movwf	13	;volatile
  6320                           
  6321                           ;HD44780.c: 19: LCD_Clock();
  6322  04AF  318E  2607  3184   	fcall	_LCD_Clock
  6323                           
  6324                           ;HD44780.c: 21: LATBbits.LATB3 = (c >> 3) & 0x01;
  6325  04B2  0020               	movlb	0	; select bank0
  6326  04B3  0823               	movf	LCD_Write@c,w
  6327  04B4  00A1               	movwf	??_LCD_Write
  6328  04B5  3003               	movlw	3
  6329  04B6                     u2045:	
  6330  04B6  36A1               	lsrf	??_LCD_Write,f
  6331  04B7  0B89               	decfsz	9,f
  6332  04B8  2CB6               	goto	u2045
  6333  04B9  0821               	movf	??_LCD_Write,w
  6334  04BA  3901               	andlw	1
  6335  04BB  00A2               	movwf	??_LCD_Write+1
  6336  04BC  0DA2               	rlf	??_LCD_Write+1,f
  6337  04BD  0DA2               	rlf	??_LCD_Write+1,f
  6338  04BE  0DA2               	rlf	??_LCD_Write+1,f
  6339  04BF  0022               	movlb	2	; select bank2
  6340  04C0  080D               	movf	13,w	;volatile
  6341  04C1  0020               	movlb	0	; select bank0
  6342  04C2  0622               	xorwf	??_LCD_Write+1,w
  6343  04C3  39F7               	andlw	-9
  6344  04C4  0622               	xorwf	??_LCD_Write+1,w
  6345  04C5  0022               	movlb	2	; select bank2
  6346  04C6  008D               	movwf	13	;volatile
  6347                           
  6348                           ;HD44780.c: 22: LATBbits.LATB2 = (c >> 2) & 0x01;
  6349  04C7  0020               	movlb	0	; select bank0
  6350  04C8  0823               	movf	LCD_Write@c,w
  6351  04C9  00A1               	movwf	??_LCD_Write
  6352  04CA  3002               	movlw	2
  6353  04CB                     u2055:	
  6354  04CB  36A1               	lsrf	??_LCD_Write,f
  6355  04CC  0B89               	decfsz	9,f
  6356  04CD  2CCB               	goto	u2055
  6357  04CE  0821               	movf	??_LCD_Write,w
  6358  04CF  3901               	andlw	1
  6359  04D0  00A2               	movwf	??_LCD_Write+1
  6360  04D1  0DA2               	rlf	??_LCD_Write+1,f
  6361  04D2  0DA2               	rlf	??_LCD_Write+1,f
  6362  04D3  0022               	movlb	2	; select bank2
  6363  04D4  080D               	movf	13,w	;volatile
  6364  04D5  0020               	movlb	0	; select bank0
  6365  04D6  0622               	xorwf	??_LCD_Write+1,w
  6366  04D7  39FB               	andlw	-5
  6367  04D8  0622               	xorwf	??_LCD_Write+1,w
  6368  04D9  0022               	movlb	2	; select bank2
  6369  04DA  008D               	movwf	13	;volatile
  6370                           
  6371                           ;HD44780.c: 23: LATBbits.LATB1 = (c >> 1) & 0x01;
  6372  04DB  0020               	movlb	0	; select bank0
  6373  04DC  3623               	lsrf	LCD_Write@c,w
  6374  04DD  3901               	andlw	1
  6375  04DE  00A1               	movwf	??_LCD_Write
  6376  04DF  0DA1               	rlf	??_LCD_Write,f
  6377  04E0  0022               	movlb	2	; select bank2
  6378  04E1  080D               	movf	13,w	;volatile
  6379  04E2  0020               	movlb	0	; select bank0
  6380  04E3  0621               	xorwf	??_LCD_Write,w
  6381  04E4  39FD               	andlw	-3
  6382  04E5  0621               	xorwf	??_LCD_Write,w
  6383  04E6  0022               	movlb	2	; select bank2
  6384  04E7  008D               	movwf	13	;volatile
  6385                           
  6386                           ;HD44780.c: 24: LATBbits.LATB4 = (c >> 0) & 0x01;
  6387  04E8  0020               	movlb	0	; select bank0
  6388  04E9  0823               	movf	LCD_Write@c,w
  6389  04EA  3901               	andlw	1
  6390  04EB  00A1               	movwf	??_LCD_Write
  6391  04EC  0EA1               	swapf	??_LCD_Write,f
  6392  04ED  0022               	movlb	2	; select bank2
  6393  04EE  080D               	movf	13,w	;volatile
  6394  04EF  0020               	movlb	0	; select bank0
  6395  04F0  0621               	xorwf	??_LCD_Write,w
  6396  04F1  39EF               	andlw	-17
  6397  04F2  0621               	xorwf	??_LCD_Write,w
  6398  04F3  0022               	movlb	2	; select bank2
  6399  04F4  008D               	movwf	13	;volatile
  6400                           
  6401                           ;HD44780.c: 25: LCD_Clock();
  6402  04F5  318E  2607  3184   	fcall	_LCD_Clock
  6403                           
  6404                           ;HD44780.c: 26: _delay((unsigned long)((1)*(32000000/4000.0)));
  6405  04F8  300B               	movlw	11
  6406  04F9  0020               	movlb	0	; select bank0
  6407  04FA  00A2               	movwf	??_LCD_Write+1
  6408  04FB  3062               	movlw	98
  6409  04FC  00A1               	movwf	??_LCD_Write
  6410  04FD                     u3407:	
  6411  04FD  0BA1               	decfsz	??_LCD_Write,f
  6412  04FE  2CFD               	goto	u3407
  6413  04FF  0BA2               	decfsz	??_LCD_Write+1,f
  6414  0500  2CFD               	goto	u3407
  6415  0501  0000               	nop
  6416  0502  0008               	return
  6417  0503                     __end_of_LCD_Write:	
  6418                           
  6419                           	psect	text23
  6420  0E07                     __ptext23:	
  6421 ;; *************** function _LCD_Clock *****************
  6422 ;; Defined at:
  6423 ;;		line 7 in file "HD44780.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;		None
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;		None               void
  6430 ;; Registers used:
  6431 ;;		wreg
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6437 ;;      Params:         0       0       0       0       0       0       0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0       0
  6439 ;;      Temps:          0       1       0       0       0       0       0       0
  6440 ;;      Totals:         0       1       0       0       0       0       0       0
  6441 ;;Total ram usage:        1 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    2
  6444 ;; This function calls:
  6445 ;;		Nothing
  6446 ;; This function is called by:
  6447 ;;		_LCD_Write
  6448 ;;		_LCD_Initialize
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           
  6453                           ;psect for function _LCD_Clock
  6454  0E07                     _LCD_Clock:	
  6455                           
  6456                           ;HD44780.c: 8: LATAbits.LATA2=1;
  6457                           
  6458                           ;incstack = 0
  6459                           ; Regs used in _LCD_Clock: [wreg]
  6460  0E07  0022               	movlb	2	; select bank2
  6461  0E08  150C               	bsf	12,2	;volatile
  6462                           
  6463                           ;HD44780.c: 9: _delay((unsigned long)((50)*(32000000/4000000.0)));
  6464  0E09  3085               	movlw	133
  6465  0E0A  0020               	movlb	0	; select bank0
  6466  0E0B  00A0               	movwf	??_LCD_Clock
  6467  0E0C                     u3417:	
  6468  0E0C  0BA0               	decfsz	??_LCD_Clock,f
  6469  0E0D  2E0C               	goto	u3417
  6470                           
  6471                           ;HD44780.c: 10: LATAbits.LATA2=0;
  6472  0E0E  0022               	movlb	2	; select bank2
  6473  0E0F  110C               	bcf	12,2	;volatile
  6474  0E10  0008               	return
  6475  0E11                     __end_of_LCD_Clock:	
  6476                           
  6477                           	psect	text24
  6478  06D1                     __ptext24:	
  6479 ;; *************** function _CheckTick24Timer *****************
  6480 ;; Defined at:
  6481 ;;		line 53 in file "NB_Time.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  timeout         4    0[BANK0 ] unsigned long 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  2    0[BANK0 ] unsigned int 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6495 ;;      Params:         0       4       0       0       0       0       0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0
  6497 ;;      Temps:          0       8       0       0       0       0       0       0
  6498 ;;      Totals:         0      12       0       0       0       0       0       0
  6499 ;;Total ram usage:       12 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    2
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_main
  6506 ;;		_CheckSensorStatus
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           
  6511                           ;psect for function _CheckTick24Timer
  6512  06D1                     _CheckTick24Timer:	
  6513                           
  6514                           ;NB_Time.c: 63: if(((timeout&0x7FFFFF)<(tick_us1&0x7FFFFF))&&((timeout&0x800000)==(tick_
      +                          us1&0x800000))){
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _CheckTick24Timer: [wreg+status,2]
  6518  06D1  30FF               	movlw	255
  6519  06D2  057A               	andwf	_tick_us1,w
  6520  06D3  0020               	movlb	0	; select bank0
  6521  06D4  00A4               	movwf	??_CheckTick24Timer
  6522  06D5  30FF               	movlw	255
  6523  06D6  057B               	andwf	_tick_us1+1,w
  6524  06D7  00A5               	movwf	??_CheckTick24Timer+1
  6525  06D8  307F               	movlw	127
  6526  06D9  057C               	andwf	_tick_us1+2,w
  6527  06DA  00A6               	movwf	??_CheckTick24Timer+2
  6528  06DB  3000               	movlw	0
  6529  06DC  057D               	andwf	_tick_us1+3,w
  6530  06DD  00A7               	movwf	??_CheckTick24Timer+3
  6531  06DE  30FF               	movlw	255
  6532  06DF  0520               	andwf	CheckTick24Timer@timeout,w
  6533  06E0  00A8               	movwf	??_CheckTick24Timer+4
  6534  06E1  30FF               	movlw	255
  6535  06E2  0521               	andwf	CheckTick24Timer@timeout+1,w
  6536  06E3  00A9               	movwf	??_CheckTick24Timer+5
  6537  06E4  307F               	movlw	127
  6538  06E5  0522               	andwf	CheckTick24Timer@timeout+2,w
  6539  06E6  00AA               	movwf	??_CheckTick24Timer+6
  6540  06E7  3000               	movlw	0
  6541  06E8  0523               	andwf	CheckTick24Timer@timeout+3,w
  6542  06E9  00AB               	movwf	??_CheckTick24Timer+7
  6543  06EA  0827               	movf	??_CheckTick24Timer+3,w
  6544  06EB  022B               	subwf	??_CheckTick24Timer+7,w
  6545  06EC  1D03               	skipz
  6546  06ED  2EF8               	goto	u2565
  6547  06EE  0826               	movf	??_CheckTick24Timer+2,w
  6548  06EF  022A               	subwf	??_CheckTick24Timer+6,w
  6549  06F0  1D03               	skipz
  6550  06F1  2EF8               	goto	u2565
  6551  06F2  0825               	movf	??_CheckTick24Timer+1,w
  6552  06F3  0229               	subwf	??_CheckTick24Timer+5,w
  6553  06F4  1D03               	skipz
  6554  06F5  2EF8               	goto	u2565
  6555  06F6  0824               	movf	??_CheckTick24Timer,w
  6556  06F7  0228               	subwf	??_CheckTick24Timer+4,w
  6557  06F8                     u2565:	
  6558  06F8  1803               	skipnc
  6559  06F9  2F27               	goto	l2561
  6560  06FA  3000               	movlw	0
  6561  06FB  057A               	andwf	_tick_us1,w
  6562  06FC  00A4               	movwf	??_CheckTick24Timer
  6563  06FD  3000               	movlw	0
  6564  06FE  057B               	andwf	_tick_us1+1,w
  6565  06FF  00A5               	movwf	??_CheckTick24Timer+1
  6566  0700  3080               	movlw	128
  6567  0701  057C               	andwf	_tick_us1+2,w
  6568  0702  00A6               	movwf	??_CheckTick24Timer+2
  6569  0703  3000               	movlw	0
  6570  0704  057D               	andwf	_tick_us1+3,w
  6571  0705  00A7               	movwf	??_CheckTick24Timer+3
  6572  0706  3000               	movlw	0
  6573  0707  0520               	andwf	CheckTick24Timer@timeout,w
  6574  0708  00A8               	movwf	??_CheckTick24Timer+4
  6575  0709  3000               	movlw	0
  6576  070A  0521               	andwf	CheckTick24Timer@timeout+1,w
  6577  070B  00A9               	movwf	??_CheckTick24Timer+5
  6578  070C  3080               	movlw	128
  6579  070D  0522               	andwf	CheckTick24Timer@timeout+2,w
  6580  070E  00AA               	movwf	??_CheckTick24Timer+6
  6581  070F  3000               	movlw	0
  6582  0710  0523               	andwf	CheckTick24Timer@timeout+3,w
  6583  0711  00AB               	movwf	??_CheckTick24Timer+7
  6584  0712  0827               	movf	??_CheckTick24Timer+3,w
  6585  0713  062B               	xorwf	??_CheckTick24Timer+7,w
  6586  0714  1D03               	skipz
  6587  0715  2F20               	goto	u2575
  6588  0716  0826               	movf	??_CheckTick24Timer+2,w
  6589  0717  062A               	xorwf	??_CheckTick24Timer+6,w
  6590  0718  1D03               	skipz
  6591  0719  2F20               	goto	u2575
  6592  071A  0825               	movf	??_CheckTick24Timer+1,w
  6593  071B  0629               	xorwf	??_CheckTick24Timer+5,w
  6594  071C  1D03               	skipz
  6595  071D  2F20               	goto	u2575
  6596  071E  0824               	movf	??_CheckTick24Timer,w
  6597  071F  0628               	xorwf	??_CheckTick24Timer+4,w
  6598  0720                     u2575:	
  6599  0720  1D03               	skipz
  6600  0721  2F27               	goto	l2561
  6601                           
  6602                           ;NB_Time.c: 64: return 1;
  6603  0722  3001               	movlw	1
  6604  0723  00A0               	movwf	?_CheckTick24Timer
  6605  0724  3000               	movlw	0
  6606  0725  00A1               	movwf	?_CheckTick24Timer+1
  6607  0726  0008               	return
  6608  0727                     l2561:	
  6609                           
  6610                           ;NB_Time.c: 65: }
  6611                           ;NB_Time.c: 66: return 0;
  6612  0727  01A0               	clrf	?_CheckTick24Timer
  6613  0728  01A1               	clrf	?_CheckTick24Timer+1
  6614  0729  0008               	return
  6615  072A                     __end_of_CheckTick24Timer:	
  6616                           
  6617                           	psect	intentry
  6618  0004                     __pintentry:	
  6619 ;; *************** function _tc_int *****************
  6620 ;; Defined at:
  6621 ;;		line 260 in file "main.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;		None
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;		None
  6626 ;; Return value:  Size  Location     Type
  6627 ;;		None               void
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0, pclath, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6635 ;;      Params:         0       0       0       0       0       0       0       0
  6636 ;;      Locals:         0       0       0       0       0       0       0       0
  6637 ;;      Temps:          5       0       0       0       0       0       0       0
  6638 ;;      Totals:         5       0       0       0       0       0       0       0
  6639 ;;Total ram usage:        5 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    1
  6642 ;; This function calls:
  6643 ;;		_adc_convert
  6644 ;; This function is called by:
  6645 ;;		Interrupt level 1
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649  0004                     _tc_int:	
  6650                           
  6651                           ;incstack = 0
  6652                           ; Regs used in _tc_int: [wreg+status,2+status,0+pclath+cstack]
  6653  0004  147E               	bsf	126,0	;set compiler interrupt flag
  6654  0005  3180               	pagesel	$
  6655  0006  0020               	movlb	0	; select bank0
  6656  0007  087F               	movf	127,w
  6657  0008  00F9               	movwf	??_tc_int+4
  6658                           
  6659                           ;main.c: 264: if(INTCONbits.T0IF && INTCONbits.T0IE){
  6660  0009  190B               	btfsc	11,2	;volatile
  6661  000A  1E8B               	btfss	11,5	;volatile
  6662  000B  2883               	goto	i1l2929
  6663                           
  6664                           ;main.c: 265: TMR0 -= 250;
  6665  000C  30FA               	movlw	250
  6666  000D  0295               	subwf	21,f	;volatile
  6667                           
  6668                           ;main.c: 266: INTCONbits.T0IF = 0;
  6669  000E  110B               	bcf	11,2	;volatile
  6670                           
  6671                           ;main.c: 267: tick_us1++;
  6672  000F  3001               	movlw	1
  6673  0010  07FA               	addwf	_tick_us1,f
  6674  0011  3000               	movlw	0
  6675  0012  3DFB               	addwfc	_tick_us1+1,f
  6676  0013  3000               	movlw	0
  6677  0014  3DFC               	addwfc	_tick_us1+2,f
  6678  0015  3000               	movlw	0
  6679  0016  3DFD               	addwfc	_tick_us1+3,f
  6680                           
  6681                           ;main.c: 268: if ((tick_us1&0x7FFFFF)>=4800000){
  6682  0017  30FF               	movlw	255
  6683  0018  057A               	andwf	_tick_us1,w
  6684  0019  00F5               	movwf	??_tc_int
  6685  001A  30FF               	movlw	255
  6686  001B  057B               	andwf	_tick_us1+1,w
  6687  001C  00F6               	movwf	??_tc_int+1
  6688  001D  307F               	movlw	127
  6689  001E  057C               	andwf	_tick_us1+2,w
  6690  001F  00F7               	movwf	??_tc_int+2
  6691  0020  3000               	movlw	0
  6692  0021  057D               	andwf	_tick_us1+3,w
  6693  0022  00F8               	movwf	??_tc_int+3
  6694  0023  3000               	movlw	0
  6695  0024  0278               	subwf	??_tc_int+3,w
  6696  0025  1D03               	skipz
  6697  0026  2831               	goto	u307_25
  6698  0027  3049               	movlw	73
  6699  0028  0277               	subwf	??_tc_int+2,w
  6700  0029  1D03               	skipz
  6701  002A  2831               	goto	u307_25
  6702  002B  303E               	movlw	62
  6703  002C  0276               	subwf	??_tc_int+1,w
  6704  002D  1D03               	skipz
  6705  002E  2831               	goto	u307_25
  6706  002F  3000               	movlw	0
  6707  0030  0275               	subwf	??_tc_int,w
  6708  0031                     u307_25:	
  6709  0031  1C03               	skipc
  6710  0032  284B               	goto	i1l110
  6711                           
  6712                           ;main.c: 269: tick_us1 -= 4800000;
  6713  0033  3000               	movlw	0
  6714  0034  00F5               	movwf	??_tc_int
  6715  0035  303E               	movlw	62
  6716  0036  00F6               	movwf	??_tc_int+1
  6717  0037  3049               	movlw	73
  6718  0038  00F7               	movwf	??_tc_int+2
  6719  0039  3000               	movlw	0
  6720  003A  00F8               	movwf	??_tc_int+3
  6721  003B  0875               	movf	??_tc_int,w
  6722  003C  02FA               	subwf	_tick_us1,f
  6723  003D  0876               	movf	??_tc_int+1,w
  6724  003E  3BFB               	subwfb	_tick_us1+1,f
  6725  003F  0877               	movf	??_tc_int+2,w
  6726  0040  3BFC               	subwfb	_tick_us1+2,f
  6727  0041  0878               	movf	??_tc_int+3,w
  6728  0042  3BFD               	subwfb	_tick_us1+3,f
  6729                           
  6730                           ;main.c: 270: tick_us1 ^= 0x00800000;
  6731  0043  3000               	movlw	0
  6732  0044  06FA               	xorwf	_tick_us1,f
  6733  0045  3000               	movlw	0
  6734  0046  06FB               	xorwf	_tick_us1+1,f
  6735  0047  3080               	movlw	128
  6736  0048  06FC               	xorwf	_tick_us1+2,f
  6737  0049  3000               	movlw	0
  6738  004A  06FD               	xorwf	_tick_us1+3,f
  6739  004B                     i1l110:	
  6740                           
  6741                           ;main.c: 271: }
  6742                           ;main.c: 272: if(triacCounter<=0){
  6743  004B  085B               	movf	_triacCounter+1,w
  6744  004C  3A80               	xorlw	128
  6745  004D  00F5               	movwf	??_tc_int
  6746  004E  3080               	movlw	128
  6747  004F  0275               	subwf	??_tc_int,w
  6748  0050  1D03               	skipz
  6749  0051  2854               	goto	u308_25
  6750  0052  3001               	movlw	1
  6751  0053  025A               	subwf	_triacCounter,w
  6752  0054                     u308_25:	
  6753  0054  1803               	skipnc
  6754  0055  2859               	goto	i1l2921
  6755                           
  6756                           ;main.c: 273: LATAbits.LATA3 = 1;
  6757  0056  0022               	movlb	2	; select bank2
  6758  0057  158C               	bsf	12,3	;volatile
  6759                           
  6760                           ;main.c: 274: }
  6761  0058  285E               	goto	i1l112
  6762  0059                     i1l2921:	
  6763                           
  6764                           ;main.c: 275: else{
  6765                           ;main.c: 276: triacCounter--;
  6766  0059  30FF               	movlw	255
  6767  005A  0020               	movlb	0	; select bank0
  6768  005B  07DA               	addwf	_triacCounter,f
  6769  005C  30FF               	movlw	255
  6770  005D  3DDB               	addwfc	_triacCounter+1,f
  6771  005E                     i1l112:	
  6772                           
  6773                           ;main.c: 277: }
  6774                           ;main.c: 278: if(PWMCounter>=PWMDC){
  6775  005E  0020               	movlb	0	; select bank0
  6776  005F  0857               	movf	_PWMCounter+1,w
  6777  0060  3A80               	xorlw	128
  6778  0061  00F5               	movwf	??_tc_int
  6779  0062  086F               	movf	_PWMDC+1,w
  6780  0063  3A80               	xorlw	128
  6781  0064  0275               	subwf	??_tc_int,w
  6782  0065  1D03               	skipz
  6783  0066  2869               	goto	u309_25
  6784  0067  086E               	movf	_PWMDC,w
  6785  0068  0256               	subwf	_PWMCounter,w
  6786  0069                     u309_25:	
  6787  0069  1C03               	skipc
  6788  006A  286E               	goto	i1l113
  6789                           
  6790                           ;main.c: 279: LATAbits.LATA6 = 0;
  6791  006B  0022               	movlb	2	; select bank2
  6792  006C  130C               	bcf	12,6	;volatile
  6793                           
  6794                           ;main.c: 280: }
  6795  006D  2870               	goto	i1l2925
  6796  006E                     i1l113:	
  6797                           
  6798                           ;main.c: 281: else{
  6799                           ;main.c: 282: LATAbits.LATA6 = 1;
  6800  006E  0022               	movlb	2	; select bank2
  6801  006F  170C               	bsf	12,6	;volatile
  6802  0070                     i1l2925:	
  6803                           
  6804                           ;main.c: 283: }
  6805                           ;main.c: 284: if(PWMCounter++>18){
  6806  0070  3001               	movlw	1
  6807  0071  0020               	movlb	0	; select bank0
  6808  0072  07D6               	addwf	_PWMCounter,f
  6809  0073  3000               	movlw	0
  6810  0074  3DD7               	addwfc	_PWMCounter+1,f
  6811  0075  0857               	movf	_PWMCounter+1,w
  6812  0076  3A80               	xorlw	128
  6813  0077  00F5               	movwf	??_tc_int
  6814  0078  3080               	movlw	128
  6815  0079  0275               	subwf	??_tc_int,w
  6816  007A  1D03               	skipz
  6817  007B  287E               	goto	u310_25
  6818  007C  3014               	movlw	20
  6819  007D  0256               	subwf	_PWMCounter,w
  6820  007E                     u310_25:	
  6821  007E  1C03               	skipc
  6822  007F  2883               	goto	i1l2929
  6823                           
  6824                           ;main.c: 285: PWMCounter = 0;
  6825  0080  0020               	movlb	0	; select bank0
  6826  0081  01D6               	clrf	_PWMCounter
  6827  0082  01D7               	clrf	_PWMCounter+1
  6828  0083                     i1l2929:	
  6829                           
  6830                           ;main.c: 286: }
  6831                           ;main.c: 287: }
  6832                           ;main.c: 289: if(INTCONbits.INTF && INTCONbits.INTE){
  6833  0083  188B               	btfsc	11,1	;volatile
  6834  0084  1E0B               	btfss	11,4	;volatile
  6835  0085  2890               	goto	i1l2937
  6836                           
  6837                           ;main.c: 290: INTCONbits.INTF = 0;
  6838  0086  108B               	bcf	11,1	;volatile
  6839                           
  6840                           ;main.c: 291: LATAbits.LATA3 = 0;
  6841  0087  0022               	movlb	2	; select bank2
  6842  0088  118C               	bcf	12,3	;volatile
  6843                           
  6844                           ;main.c: 292: triacCounter = TriacDelay;
  6845  0089  0020               	movlb	0	; select bank0
  6846  008A  0859               	movf	_TriacDelay+1,w
  6847  008B  01DB               	clrf	_triacCounter+1
  6848  008C  07DB               	addwf	_triacCounter+1,f
  6849  008D  0858               	movf	_TriacDelay,w
  6850  008E  01DA               	clrf	_triacCounter
  6851  008F  07DA               	addwf	_triacCounter,f
  6852  0090                     i1l2937:	
  6853                           
  6854                           ;main.c: 293: }
  6855                           ;main.c: 295: if(ADC_intF){
  6856  0090  0020               	movlb	0	; select bank0
  6857  0091  086D               	movf	_ADC_intF+1,w
  6858  0092  046C               	iorwf	_ADC_intF,w
  6859  0093  1903               	skipnz
  6860  0094  28A6               	goto	i1l118
  6861                           
  6862                           ;main.c: 296: ADC_intF = 0;
  6863  0095  01EC               	clrf	_ADC_intF
  6864  0096  01ED               	clrf	_ADC_intF+1
  6865                           
  6866                           ;main.c: 297: potDivider = adc_convert(4, 1);
  6867  0097  3004               	movlw	4
  6868  0098  00F0               	movwf	adc_convert@pChannel
  6869  0099  3000               	movlw	0
  6870  009A  00F1               	movwf	adc_convert@pChannel+1
  6871  009B  01F2               	clrf	adc_convert@notSigned
  6872  009C  0AF2               	incf	adc_convert@notSigned,f
  6873  009D  318E  265B         	fcall	_adc_convert
  6874  009F  0870               	movf	?_adc_convert,w
  6875  00A0  0021               	movlb	1	; select bank1
  6876  00A1  00BE               	movwf	_potDivider^(0+128)
  6877  00A2  0871               	movf	?_adc_convert+1,w
  6878  00A3  00BF               	movwf	(_potDivider^(0+128)+1)
  6879  00A4  01C0               	clrf	(_potDivider^(0+128)+2)
  6880  00A5  01C1               	clrf	(_potDivider^(0+128)+3)
  6881  00A6                     i1l118:	
  6882  00A6  0879               	movf	??_tc_int+4,w
  6883  00A7  0020               	movlb	0	; select bank0
  6884  00A8  00FF               	movwf	127
  6885  00A9  107E               	bcf	126,0	;clear compiler interrupt flag
  6886  00AA  0009               	retfie
  6887  00AB                     __end_of_tc_int:	
  6888                           
  6889                           	psect	text26
  6890  0E5B                     __ptext26:	
  6891 ;; *************** function _adc_convert *****************
  6892 ;; Defined at:
  6893 ;;		line 26 in file "NB_ADC.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;  pChannel        2    0[COMMON] unsigned short 
  6896 ;;  notSigned       1    2[COMMON] unsigned char 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  temp            1    4[COMMON] unsigned char 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  2    0[COMMON] unsigned short 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6908 ;;      Params:         3       0       0       0       0       0       0       0
  6909 ;;      Locals:         1       0       0       0       0       0       0       0
  6910 ;;      Temps:          1       0       0       0       0       0       0       0
  6911 ;;      Totals:         5       0       0       0       0       0       0       0
  6912 ;;Total ram usage:        5 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; This function calls:
  6915 ;;		Nothing
  6916 ;; This function is called by:
  6917 ;;		_tc_int
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _adc_convert
  6923  0E5B                     _adc_convert:	
  6924                           
  6925                           ;NB_ADC.c: 28: unsigned char temp;
  6926                           ;NB_ADC.c: 29: ADCON0bits.CHS = pChannel;
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
  6930  0E5B  0870               	movf	adc_convert@pChannel,w
  6931  0E5C  00F3               	movwf	??_adc_convert
  6932  0E5D  0DF3               	rlf	??_adc_convert,f
  6933  0E5E  0DF3               	rlf	??_adc_convert,f
  6934  0E5F  0021               	movlb	1	; select bank1
  6935  0E60  081D               	movf	29,w	;volatile
  6936  0E61  0673               	xorwf	??_adc_convert,w
  6937  0E62  3983               	andlw	-125
  6938  0E63  0673               	xorwf	??_adc_convert,w
  6939  0E64  009D               	movwf	29	;volatile
  6940                           
  6941                           ;NB_ADC.c: 30: ADRESH = 0b00000000;
  6942  0E65  019C               	clrf	28	;volatile
  6943                           
  6944                           ;NB_ADC.c: 31: ADRESL = 0b00000000;
  6945  0E66  019B               	clrf	27	;volatile
  6946                           
  6947                           ;NB_ADC.c: 32: ADCON0bits.GO = 0b1;
  6948  0E67  149D               	bsf	29,1	;volatile
  6949  0E68                     i1l16:	
  6950                           ;NB_ADC.c: 33: while(ADCON0bits.GO_nDONE);
  6951                           
  6952  0E68  189D               	btfsc	29,1	;volatile
  6953  0E69  2E68               	goto	i1l16
  6954                           
  6955                           ;NB_ADC.c: 36: if (notSigned){
  6956  0E6A  0872               	movf	adc_convert@notSigned,w
  6957  0E6B  1903               	btfsc	3,2
  6958  0E6C  2E72               	goto	i1l2457
  6959                           
  6960                           ;NB_ADC.c: 37: temp = ADRESH & 0b00001111;
  6961  0E6D  081C               	movf	28,w	;volatile
  6962  0E6E  390F               	andlw	15
  6963  0E6F  00F3               	movwf	??_adc_convert
  6964  0E70  0873               	movf	??_adc_convert,w
  6965  0E71  00F4               	movwf	adc_convert@temp
  6966  0E72                     i1l2457:	
  6967                           
  6968                           ;NB_ADC.c: 38: }
  6969                           ;NB_ADC.c: 39: return (temp<<8)|ADRESL;
  6970  0E72  0874               	movf	adc_convert@temp,w
  6971  0E73  01F1               	clrf	?_adc_convert+1
  6972  0E74  07F1               	addwf	?_adc_convert+1,f
  6973  0E75  081B               	movf	27,w	;volatile
  6974  0E76  01F0               	clrf	?_adc_convert
  6975  0E77  07F0               	addwf	?_adc_convert,f
  6976  0E78  0008               	return
  6977  0E79                     __end_of_adc_convert:	
  6978  007E                     btemp	set	126	;btemp
  6979  007E                     pic14e$flags	set	126
  6980  007E                     wtemp	set	126
  6981  007E                     wtemp0	set	126
  6982  0080                     wtemp1	set	128
  6983  0082                     wtemp2	set	130
  6984  0084                     wtemp3	set	132
  6985  0086                     wtemp4	set	134
  6986  0088                     wtemp5	set	136
  6987  007F                     wtemp6	set	127
  6988  007E                     ttemp	set	126
  6989  007E                     ttemp0	set	126
  6990  0081                     ttemp1	set	129
  6991  0084                     ttemp2	set	132
  6992  0087                     ttemp3	set	135
  6993  007F                     ttemp4	set	127
  6994  007E                     ltemp	set	126
  6995  007E                     ltemp0	set	126
  6996  0082                     ltemp1	set	130
  6997  0086                     ltemp2	set	134
  6998  0080                     ltemp3	set	128


Data Sizes:
    Strings     26
    Constant    10
    Data        4
    BSS         105
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     54      80
    BANK1            80      0      79
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_3(CODE[6]), STR_2(CODE[13]), STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> tempString(BANK1[16]), rhString(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S852$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    RHT_readByte@out	PTR unsigned char  size(1) Largest target is 5
		 -> RHT_data(BANK1[5]), 

    LCD_WriteString@s	PTR const unsigned char  size(1) Largest target is 16
		 -> tempString(BANK1[16]), rhString(BANK1[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_adc_convert

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___awdiv
    ___lwmod->___lwdiv
    ___lldiv->___lmul
    _Triac_Counter->___awdiv
    _RHT_readData->_RHT_readByte
    _PWM_Counter->___awdiv
    ___awdiv->___wmul
    _LCD_WriteString->_LCD_GoTo
    _LCD_GoTo->_LCD_Write
    _LCD_Initialize->_LCD_Write
    _LCD_Clear->_LCD_Write
    _LCD_Write->_LCD_Clock

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_int in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0    9461
                                             34 BANK0     20    20      0
                   _CheckTick24Timer
                          _LCD_Clear
                     _LCD_Initialize
                    _LCD_WriteString
                        _PWM_Counter
                       _RHT_readData
                      _SetClockSpeed
                     _Tick24BitTimer
                      _Triac_Counter
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___lldiv
                             ___lmul
                             ___wmul
                           _init_adc
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    13      6    1336
                                             15 BANK0     19    13      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     220
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     418
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     424
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Triac_Counter                                        8     2      6    1463
                                             15 BANK0      8     2      6
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     348
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Tick24BitTimer                                      12     8      4     582
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (1) _SetClockSpeed                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RHT_readData                                         8     8      0    1170
                                             11 BANK0      8     8      0
                       _RHT_readByte
                          _RHT_start
 ---------------------------------------------------------------------------------
 (2) _RHT_start                                            7     7      0     339
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _RHT_readByte                                        11    10      1     448
                                              0 BANK0     11    10      1
 ---------------------------------------------------------------------------------
 (1) _PWM_Counter                                          6     2      4    1051
                                             15 BANK0      6     2      4
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     812
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      2     2      0     501
                                              7 BANK0      2     2      0
                           _LCD_GoTo
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_GoTo                                             3     3      0     198
                                              4 BANK0      3     3      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       2     2      0     176
                                              4 BANK0      2     2      0
                          _LCD_Clock
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0     176
                                              4 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Write                                            3     3      0     176
                                              1 BANK0      3     3      0
                          _LCD_Clock
 ---------------------------------------------------------------------------------
 (3) _LCD_Clock                                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckTick24Timer                                    12     8      4     300
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _tc_int                                               5     5      0     195
                                              5 COMMON     5     5      0
                        _adc_convert
 ---------------------------------------------------------------------------------
 (6) _adc_convert                                          5     2      3     195
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTick24Timer
   _LCD_Clear
     _LCD_Write
       _LCD_Clock
   _LCD_Initialize
     _LCD_Clock
     _LCD_Write
       _LCD_Clock
   _LCD_WriteString
     _LCD_GoTo
       _LCD_Write
         _LCD_Clock
     _LCD_Write
       _LCD_Clock
   _PWM_Counter
     ___awdiv
       ___wmul (ARG)
   _RHT_readData
     _RHT_readByte
     _RHT_start
   _SetClockSpeed
   _Tick24BitTimer
   _Triac_Counter
     ___awdiv
       ___wmul (ARG)
     ___wmul
   ___awdiv
     ___wmul (ARG)
   ___awmod
   ___bmul
   ___lldiv
     ___lmul (ARG)
   ___lmul
   ___wmul
   _init_adc
   _sprintf
     ___awdiv (ARG)
       ___wmul (ARG)
     ___awmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)

 _tc_int (ROOT)
   _adc_convert

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      AD       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     36      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      AD      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Mar 19 14:05:47 2015

               _PWMCounter 0056             _LCD_Initialize 0619                          pc 0002  
           ___bmul@product 0022            ??_Triac_Counter 0035                __CFG_CP$OFF 0000  
             ___awdiv@sign 002C                         _rh 00AA        ___wmul@multiplicand 0022  
              __CFG_LVP$ON 0000                        l411 0585                        l229 06C8  
                      l423 0570                        l346 0EBC                        l442 0FCC  
     __size_of_adc_convert 001E                        l395 0611                        l388 05F6  
                      l556 0E82               __CFG_CPD$OFF 0000                _PWM_Counter 0FAF  
             ___awmod@sign 0026               __CFG_BORV$LO 0000                        wreg 0009  
        ??_LCD_WriteString 0027                       S3071 0832                       S3069 0824  
                     l2201 0598                       l2203 059A                       l2205 059C  
                     l2213 05A5                       l2303 0558                       l2207 059E  
                     l2215 05AF                       l2305 0564                       l2209 05A0  
                     l2315 0576                       l2307 055E                       l2235 05FA  
                     l2227 05EA                       l2251 0617                       l2245 0615  
                     l2237 0605                       l2229 05E4                       l2333 0E7C  
                     l2405 0F16                       l2421 07D8                       l2351 0735  
                     l2271 050F                       l2263 0507                       l2239 05FF  
                     l2423 07E4                       l2431 07F9                       l2273 0511  
                     l2265 0509                       l2281 0522                       l2409 0F1F  
                     l2275 0513                       l2267 050B                       l2427 07F0  
                     l2357 0740                       l2293 053D                       l2269 050D  
                     l2197 0594                       l2605 0421                       l2701 0EC8  
                     l2383 0777                       l2375 0766                       l2367 0748  
                     l2287 0527                       l2279 0518                       l2199 0596  
                     l2535 0F3B                       l2561 0727                       l2369 0754  
                     l2289 052B                       l2705 0ED2                       l2633 0321  
                     l2379 076F                       l2299 0554                       l2715 0E22  
                     l2643 0337                       l2627 0309                       l2549 0FEC  
                     l2741 0F79                       l2397 0EF8                       l2661 036B  
                     l2751 0F8B                       l2719 0E28                       l2399 0F04  
                     l2655 035C                       l2647 033D                       l2671 02E7  
                     l2593 0401                       l2585 03E4                       l2577 03D0  
                     l2737 0F72                       l2673 03AF                       l2683 0EB2  
                     l2587 03F3                       l2763 0FA8                       l2755 0F97  
                     l2835 0136                       l2685 0EB6                       l2749 0F7F  
                     l2773 078F                       l2669 036F                       l2687 0E9B  
                     l2599 0419                       l2759 0FA0                       l2783 07BD  
                     l2775 079D                       l2871 023E                       l2849 01AD  
                     l2787 07C8                       l2875 025C                       l2893 02A2  
                     l2887 0285                       l2899 02B8                       STR_1 0817  
                     STR_2 080A                       STR_3 081E                       u2005 0464  
                     u2015 0479                       u2025 048D                       u2105 060F  
                     u2035 04A0                       u2045 04B6                       _LATA 010C  
                     _LATB 010D                       u2055 04CB                       _LATC 010E  
                     u2305 0755                       u2145 0535                       u2065 05DD  
                     u2225 0E83                       u2315 075F                       u2075 05F4  
                     u2235 0E88                       u2325 0767                       u2165 054D  
                     u2405 0F17                       u2175 056E                       u2505 06AE  
                     u2515 0F30                       u2435 07DB                       u3307 02A9  
                     u2285 074B                       u3317 05BD                       u2365 0EFB  
                     u3407 04FD                       u2535 0FB9                       u3327 05CF  
                     u2615 03F1                       u2455 07EA                       u3417 0E0C  
                     u2545 0FC5                       u3337 053F                       u2625 03FF  
                     u2385 0F05                       u2465 07F1                       u3347 0E55  
                     u2635 0417                       u2395 0F0F                       u2565 06F8  
                     u3357 0622                       u2575 0720                       u3367 0634  
                     u3377 0644                       u3297 0122                       u3387 066E  
                     u2595 03CE                       u3397 0E3E                       u2925 0792  
                     u2685 0352                       u2855 0F82                       u2775 0ED3  
                     i1l16 0E68                       u2945 079E                       u2785 0EDA  
                     u2875 0F91                       u2955 07B2                       u2885 0F98  
                     u2965 07BE                       _TMR0 0015                       _WPUA 020C  
                     _WPUB 020D                       _WPUC 020E               __CFG_WRT$OFF 0000  
            __CFG_FCMEN$ON 0000                       _main 00D4         __size_of_LCD_Clear 0013  
                     _sens 005C                       _temp 00B2         __size_of_LCD_Clock 000A  
                     fsr0h 0005                       fsr1h 0007                       fsr0l 0004  
                     indf0 0000                       indf1 0001                       fsr1l 0006  
                     btemp 007E                       ltemp 007E        adc_convert@pChannel 0070  
                     start 00AB                       ttemp 007E                       wtemp 007E  
       __size_of_LCD_Write 00A4              __CFG_IESO$OFF 0000     __end_of_LCD_Initialize 0677  
        ___bmul@multiplier 0023              __CFG_MCLRE$ON 0000          main@error_counter 004B  
         __end_of_LCD_GoTo 0E5B                      ?_main 0070            __end_of___awdiv 077E  
            __CFG_WDTE$OFF 0000            __end_of___awmod 0FAF            __end_of___lldiv 07D1  
          ___awdiv@divisor 0026            __end_of___lwdiv 0F26                      i1l110 004B  
                    i1l112 005E                      i1l113 006E                      i1l118 00A6  
          __end_of___lwmod 0800            ___awdiv@counter 002B                      _PORTA 000C  
                    _PORTB 000D                      _PORTC 000E                      _PWMDC 006E  
                    _TRISA 008C                      _TRISB 008D                      _TRISC 008E  
      ___lmul@multiplicand 0024            __end_of_dpowers 080A                      main@i 0045  
           __CFG_BOREN$OFF 0000                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080         Triac_Counter@speed 002F  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F            __end_of_sprintf 03B4         __size_of_RHT_start 0088  
          ?_LCD_Initialize 0070            __initialization 00AD               __end_of_main 02E1  
           __CFG_LPBOR$OFF 0000                     ??_main 0042          __end_of_LCD_Clear 0E44  
        __end_of_LCD_Clock 0E11             __CFG_PLLEN$OFF 0000          __end_of_LCD_Write 0503  
                   _ADRESH 009C                     _ADRESL 009B           ___awdiv@dividend 0028  
                   i1l2457 0E72                     i1l2921 0059                     i1l2925 0070  
                   i1l2937 0090                     i1l2929 0083                     u310_25 007E  
                   u307_25 0031                     u308_25 0054                     u309_25 0069  
  __size_of_Tick24BitTimer 005A             __CFG_PWRTE$OFF 0000                     ___bmul 0E1F  
     adc_convert@notSigned 0072                     ___lmul 0EBF                     ___wmul 0E79  
                ??___awdiv 002A             __CFG_STVREN$ON 0000                  ??___awmod 0024  
                ??___lldiv 0034                  ??___lwdiv 0024                  ??___lwmod 002C  
         __end_of_init_adc 0E1F                     _tc_int 0004           ___awdiv@quotient 002D  
          ___awmod@divisor 0020            ___awmod@counter 0025          __end_of_RHT_start 0619  
            RHT_readData@i 0031                 _TriacDelay 0058              RHT_readByte@i 0026  
          _sensorReadTimer 00C2     __size_of_SetClockSpeed 0007                  ??_sprintf 0035  
  __end_of__initialization 00D0                  ?_LCD_GoTo 0070           LCD_WriteString@s 0028  
                LCD_GoTo@P 0026        ___bmul@multiplicand 0020             __pcstackCOMMON 0070  
__size_of_CheckTick24Timer 0059               __pidataBANK0 0DF6          PWM_Counter@invert 0031  
          _LCD_WriteString 0E97               ?_PWM_Counter 002F             _OPTION_REGbits 0095  
               __pbssBANK0 0056                 __pbssBANK1 00A0                 ??_LCD_GoTo 0024  
          __CFG_VCAPEN$OFF 0000              RHT_start@mask 0025              RHT_start@port 0022  
               __pmaintext 00D4                    ?___bmul 0020                    ?___lmul 0020  
            _SetClockSpeed 0E00                    ?___wmul 0020                 __pintentry 0004  
            ??_adc_convert 0073             ___lmul@product 0028                    ?_tc_int 0070  
    __end_of_Triac_Counter 0F67             _Tick24BitTimer 0677           ??_LCD_Initialize 0024  
                ?_init_adc 0070       RHT_readByte@tempByte 0025    __end_of_LCD_WriteString 0EBF  
           ?_SetClockSpeed 0070            __size_of___bmul 0012                    ___awdiv 072A  
          __size_of___lmul 0030                    ___awmod 0F67                    ___lldiv 077E  
          __size_of___wmul 001E                    ___lwdiv 0EEF                    ___lwmod 07D1  
          __size_of_tc_int 00A7                    __ptext1 02E1                    __ptext2 07D1  
                  __ptext3 0EEF                    __ptext4 0E11                    __ptext5 0EBF  
                  __ptext6 077E                    __ptext7 0E1F                    __ptext8 0F67  
                  __ptext9 0F26                    _dpowers 0800           ___awmod@dividend 0022  
      __end_of_adc_convert 0E79                  _LCD_Clear 0E31                  _LCD_Clock 0E07  
                  _sprintf 02E1                    clrloop0 0DFB     __end_of_Tick24BitTimer 06D1  
                _LCD_Write 045F       end_of_initialization 00D0             main@sensorPort 0055  
               ??_init_adc 0020                 _potDivider 00BE            ___lldiv@divisor 002C  
          ___lldiv@counter 0039           _CheckTick24Timer 06D1                 _tempString 00DA  
             __pstringtext 0800                  _PORTCbits 000E           __CFG_FOSC$INTOSC 0000  
     __size_of_PWM_Counter 0051                  _TRISAbits 008C                  _TRISBbits 008D  
               ?_LCD_Clear 0070                  _RHT_start 0591                 ?_LCD_Clock 0070  
               ?_LCD_Write 0070            ?_Tick24BitTimer 0020              ?_RHT_readData 0070  
            ?_RHT_readByte 0020          __size_of_LCD_GoTo 0017            ??_SetClockSpeed 0020  
         ?_LCD_WriteString 0070             __end_of___bmul 0E31             __end_of___lmul 0EEF  
           __end_of___wmul 0E97                _adc_convert 0E5B                 LCD_Write@c 0023  
           __end_of_tc_int 00AB        start_initialization 00AD                 ?_RHT_start 0070  
          adc_convert@temp 0074             ??_RHT_readData 002B          RHT_readData@error 002F  
           ??_RHT_readByte 0021                   ??___bmul 0021       Tick24BitTimer@timer4 0020  
                 ??___lmul 0028                   ??___wmul 0024                __pdataBANK0 006C  
                 ??_tc_int 0075                __pbssCOMMON 007A                  ___latbits 0001  
            __pcstackBANK0 0020                ??_LCD_Clear 0024           RHT_start@timeout 0023  
              ??_LCD_Clock 0020        __end_of__stringdata 0824           PWM_Counter@speed 002F  
              ??_LCD_Write 0021       RHT_readData@checksum 002E                sprintf@_val 003C  
              sprintf@flag 003A                sprintf@prec 003B          __size_of_init_adc 000E  
         ___lwdiv@dividend 0022                   ?___awdiv 0026                   ?___awmod 0020  
                 ?___lldiv 002C                   ?___lwdiv 0020                   ?___lwmod 0028  
                __pswtext1 0824                  __pswtext2 0832        RHT_readByte@tempBit 0024  
      RHT_readByte@timeout 0027                   _ADC_intF 006C                ??_RHT_start 0020  
 __end_of_CheckTick24Timer 072A           ___lwdiv@quotient 0025                   ?_sprintf 002F  
                 _LCD_GoTo 0E44             ___wmul@product 0024                   _LATAbits 010C  
                 _LATBbits 010D     __size_of_Triac_Counter 0041                  clear_ram0 0DFA  
                 _RHT_data 00EA                 _ADCON0bits 009D                 _ADCON1bits 009E  
              __stringdata 080A                 _ADCON2bits 009F       __end_of_RHT_readData 045F  
        ___wmul@multiplier 0020       __end_of_RHT_readByte 0591           ??_Tick24BitTimer 0024  
                main@error 0054                  main@speed 0052              _ledFlashTimer 00BA  
  CheckTick24Timer@timeout 0020          ___lmul@multiplier 0020           main@sensor_er_no 0051  
         RHT_readData@port 0030    __size_of_LCD_Initialize 005E           __size_of___awdiv 0054  
         __size_of___awmod 0048               ?_adc_convert 0070           __size_of___lldiv 0053  
         __size_of___lwdiv 0037           __size_of___lwmod 002F              _Triac_Counter 0F26  
            ??_PWM_Counter 0033                 _ANSELAbits 018C                 _ANSELBbits 018D  
          ___lwdiv@divisor 0020           RHT_readByte@mask 0029            ___lwdiv@counter 0027  
                 __ptext10 0E79                   _fanspeed 00C6                   __ptext11 0677  
                 __ptext20 0619                   __ptext12 0E00                   __ptext21 0E31  
                 __ptext13 03B4                   __ptext22 045F                   __ptext14 0591  
                 __ptext23 0E07                   __ptext15 0503           RHT_readByte@port 0020  
                 __ptext24 06D1                   __ptext16 0FAF                   __ptext17 072A  
                 __ptext26 0E5B                   __ptext18 0E97                   __ptext19 0E44  
         __size_of_sprintf 00D3                   _init_adc 0E11              __size_of_main 020D  
                 _rhString 00CA                   _tick_us1 007A      __end_of_SetClockSpeed 0E07  
   Triac_Counter@zeroDelay 0033   __size_of_LCD_WriteString 0028            main@sensorDelay 004D  
           ?_Triac_Counter 002F      LCD_WriteNumber@numstr 00A0                 _INTCONbits 000B  
       Tick24BitTimer@temp 0028                pic14e$flags 007E        __end_of_PWM_Counter 1000  
    Triac_Counter@maxCount 0031                   intlevel1 0000                  sprintf@ap 0039  
                sprintf@sp 0040           ___lwmod@dividend 002A            RHT_readByte@out 0023  
         ___lldiv@dividend 0030          __CFG_CLKOUTEN$OFF 0000                 _OSCCONbits 0099  
             main@ADCDelay 0047      __size_of_RHT_readData 00AB            _timer24overflow 00C8  
    __size_of_RHT_readByte 008E                   sprintf@c 0041                   sprintf@f 002F  
         ___lldiv@quotient 0035            ___lwmod@divisor 0028            ___lwmod@counter 002D  
        ?_CheckTick24Timer 0020         ??_CheckTick24Timer 0024               _triacCounter 005A  
             _RHT_readData 03B4               _RHT_readByte 0503  
